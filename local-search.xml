<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Spring Cache</title>
    <link href="/2024/09/29/Spring%20Cache/"/>
    <url>/2024/09/29/Spring%20Cache/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>我們平常在專案中查找資料往往都是直接訪問資料庫,但現今資料的量越來越大,訪問的次數及時間過於頻繁,這樣會對我們的資料庫帶來很大的負擔及效能上的問題,為了解決這個狀況,這邊採用Spring Cache 整合Redis來實現。本文將透過簡單的實作，展示springBoot結合Redis並且實現快取。</p><h1 id="需要的依賴與設定"><a href="#需要的依賴與設定" class="headerlink" title="需要的依賴與設定"></a>需要的依賴與設定</h1><h2 id="Dependency"><a href="#Dependency" class="headerlink" title="Dependency"></a>Dependency</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-cache<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1.5<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="Enable-Caching"><a href="#Enable-Caching" class="headerlink" title="Enable Caching"></a>Enable Caching</h2><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@Configuration</span><br><span class="hljs-variable">@EnableCaching</span><br>public class CachingConfig &#123;<br><br>    <span class="hljs-variable">@Bean</span><br>    public CacheManager <span class="hljs-built_in">cacheManager</span>() &#123;<br>        <span class="hljs-selector-tag">return</span> <span class="hljs-selector-tag">new</span> <span class="hljs-selector-tag">ConcurrentMapCacheManager</span>(<span class="hljs-string">&quot;addresses&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Cacheable-annotation"><a href="#Cacheable-annotation" class="headerlink" title="@Cacheable annotation"></a>@Cacheable annotation</h2><figure class="highlight nim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nim">@<span class="hljs-type">Cacheable</span>(<span class="hljs-string">&quot;addresses&quot;</span>)<br>public <span class="hljs-type">String</span> getAddress(<span class="hljs-type">Customer</span> customer) <span class="hljs-meta">&#123;...&#125;</span><br></code></pre></td></tr></table></figure><h1 id="參數說明"><a href="#參數說明" class="headerlink" title="參數說明"></a>參數說明</h1><h2 id="value-或-cacheNames"><a href="#value-或-cacheNames" class="headerlink" title="value 或 cacheNames:"></a>value 或 cacheNames:</h2><ul><li>指定一個或多個緩存的名稱（相當於 cache 的名稱）。通常是必填的，用來標識方法返回結果存儲的緩存。<code>value</code> 和 <code>cacheNames</code> 是同義的，通常用其中之一就可以。</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><br><span class="hljs-meta">@Cacheable</span>(value = <span class="hljs-string">&quot;myCache&quot;</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">getData</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> key</span>) &#123; ... &#125;<br><br><br></code></pre></td></tr></table></figure><h2 id="key"><a href="#key" class="headerlink" title="key:"></a>key:</h2><ul><li>指定緩存條目的鍵（key）。默認使用方法參數作為鍵。可以使用 SpEL（Spring Expression Language）來定義鍵的生成策略。</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><br><span class="hljs-meta">@Cacheable</span>(value = <span class="hljs-string">&quot;myCache&quot;</span>, key = <span class="hljs-string">&quot;#root.methodName + &#x27;_&#x27; + #id&quot;</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">getData</span>(<span class="hljs-params"><span class="hljs-title class_">Long</span> id</span>) &#123; ... &#125;<br><br><br></code></pre></td></tr></table></figure><h2 id="keyGenerator"><a href="#keyGenerator" class="headerlink" title="keyGenerator:"></a>keyGenerator:</h2><ul><li>指定用於生成緩存鍵的鍵生成器（<code>KeyGenerator</code>），當 <code>key</code> 和 <code>keyGenerator</code> 同時存在時，<code>key</code> 的優先級更高。</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><br><span class="hljs-meta">@Cacheable</span>(value = <span class="hljs-string">&quot;myCache&quot;</span>, keyGenerator = <span class="hljs-string">&quot;myKeyGenerator&quot;</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">getData</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> key</span>) &#123; ... &#125;<br><br><br></code></pre></td></tr></table></figure><h2 id="cacheManager"><a href="#cacheManager" class="headerlink" title="cacheManager:"></a>cacheManager:</h2><ul><li>指定使用的緩存管理器（<code>CacheManager</code>）。如果有多個緩存管理器，可以用這個參數來指定具體的管理器。</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><br><span class="hljs-meta">@Cacheable</span>(value = <span class="hljs-string">&quot;myCache&quot;</span>, cacheManager = <span class="hljs-string">&quot;myCacheManager&quot;</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">getData</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> key</span>) &#123; ... &#125;<br><br><br></code></pre></td></tr></table></figure><h2 id="cacheResolver"><a href="#cacheResolver" class="headerlink" title="cacheResolver:"></a>cacheResolver:</h2><ul><li>指定使用的緩存解析器（<code>CacheResolver</code>）。它是另一種用來解決緩存的方式，當 <code>cacheResolver</code> 和 <code>cacheManager</code> 都被指定時，<code>cacheResolver</code> 優先。</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><br><span class="hljs-meta">@Cacheable</span>(value = <span class="hljs-string">&quot;myCache&quot;</span>, cacheResolver = <span class="hljs-string">&quot;myCacheResolver&quot;</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">getData</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> key</span>) &#123; ... &#125;<br></code></pre></td></tr></table></figure><h2 id="condition"><a href="#condition" class="headerlink" title="condition:"></a>condition:</h2><ul><li>使用 SpEL 表達式來指定一個條件，只有當這個條件為 <code>true</code> 時，方法的結果才會被緩存。</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><br><span class="hljs-meta">@Cacheable</span>(value = <span class="hljs-string">&quot;myCache&quot;</span>, condition = <span class="hljs-string">&quot;#key.length() &gt; 3&quot;</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">getData</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> key</span>) &#123; ... &#125;<br></code></pre></td></tr></table></figure><h2 id="unless"><a href="#unless" class="headerlink" title="unless:"></a>unless:</h2><ul><li>使用 SpEL 表達式來指定一個條件，只有當這個條件為 <code>false</code> 時，方法的結果才會被緩存。和 <code>condition</code> 相對應，適用於排除特定條件的情況。</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><br><span class="hljs-meta">@Cacheable</span>(value = <span class="hljs-string">&quot;myCache&quot;</span>, unless = <span class="hljs-string">&quot;#result == null&quot;</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">getData</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> key</span>) &#123; ... &#125;<br><br><br></code></pre></td></tr></table></figure><h2 id="sync"><a href="#sync" class="headerlink" title="sync:"></a>sync:</h2><ul><li>當 <code>sync</code> 設置為 <code>true</code> 時，方法的執行將會同步；這意味著多個線程不會同時計算相同的值。default為 <code>false</code>。</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><br><span class="hljs-meta">@Cacheable</span>(value = <span class="hljs-string">&quot;myCache&quot;</span>, sync = <span class="hljs-literal">true</span>)<br><span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">getData</span>(<span class="hljs-params"><span class="hljs-title class_">String</span> key</span>) &#123; ... &#125;<br><br></code></pre></td></tr></table></figure><h1 id="注意事項"><a href="#注意事項" class="headerlink" title="注意事項"></a>注意事項</h1><h2 id="1-關於key參數"><a href="#1-關於key參數" class="headerlink" title="1. 關於key參數"></a>1. 關於key參數</h2><p>Key默認使用method的parameter作為Key，但如果方法沒有參數，@Cacheable 仍然會正常運作。對於沒有參數的方法，Spring Boot 預設使用 0 作為 key。</p><h2 id="2-使用-Cacheable的Method必須要有返回值，不能是void"><a href="#2-使用-Cacheable的Method必須要有返回值，不能是void" class="headerlink" title="2.  使用@Cacheable的Method必須要有返回值，不能是void"></a>2.  使用@Cacheable的Method必須要有返回值，不能是void</h2><p>根據官方文件說明:</p><p>@Cacheable 將數據添加到cache或更新cache中的數據，就像是key、value機制，因此需要return值。</p><p><img src="/./image/Spring_Cache/110e09e7-188c-81ab-a44b-ebed0103d939.webp" alt="Image"></p><p><a href="https://docs.spring.io/spring-framework/reference/integration/cache/annotations.html">https://docs.spring.io/spring-framework/reference/integration/cache/annotations.html</a></p><p>補充:</p><p>可以透過第四點，透過覆寫createConcurrentMapCache來達到不須返回值</p><h2 id="3-Cacheable-注解通過-Spring-AOP-實現"><a href="#3-Cacheable-注解通過-Spring-AOP-實現" class="headerlink" title="3. @Cacheable 注解通過 Spring AOP 實現"></a>3. @Cacheable 注解通過 Spring AOP 實現</h2><p>@Cacheable 注解確實是通過 Spring AOP（面向切面編程）來實現的，而且在同一個類中的內部方法調用時，緩存可能不會生效。<br>因此應盡量避免在同一個類中調用帶有 @Cacheable 注解的方法。</p><p>原因解釋：</p><ul><li><p>Spring AOP 使用代理模式來實現。當一個 bean 被注入到另一個類中時，實際注入的是該 bean 的代理對象。</p></li><li><p>代理對象能夠攔截對公共方法的外部調用，並在調用前後添加額外的行為（如緩存邏輯）。</p></li><li><p>然而，當在類的內部調用自己的方法時，這個調用不會經過代理對象，而是直接調用原始對象的方法。</p></li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-meta">@Service</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserService</span> &#123;<br>    <span class="hljs-meta">@Cacheable(<span class="hljs-string">&quot;users&quot;</span>)</span><br>    <span class="hljs-keyword">public</span> User getUser(<span class="hljs-built_in">Long</span> id) &#123;<br>        <span class="hljs-comment">// 這個方法被外部調用時，緩存會生效</span><br>        <span class="hljs-keyword">return</span> fetchUserFromDatabase(id);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> void updateUserDetails(<span class="hljs-built_in">Long</span> id) &#123;<br>        <span class="hljs-comment">// 這裡的內部調用不會觸發緩存</span><br>        User user = <span class="hljs-keyword">this</span>.getUser(id);  <span class="hljs-comment">// 緩存不生效</span><br>        <span class="hljs-comment">// 更新用戶邏輯</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-使用ConcurrentMapCacheManager管理多個Cache"><a href="#4-使用ConcurrentMapCacheManager管理多個Cache" class="headerlink" title="4. 使用ConcurrentMapCacheManager管理多個Cache"></a>4. 使用ConcurrentMapCacheManager管理多個Cache</h2><p>當有多個cache name需要管理時，可以考慮實作一個ConcurrentMapCacheManager並覆寫裡面的createConcurrentMapCache方法，透過createConcurrentMapCache自訂義管理每個cache name.</p><p>範例代碼:</p><p>下面我們定義了兩個cache: ACache、BCache，並透過ConcurrentMapCache()的建構子分別定義了兩個cache的到期時間。</p><p>另外需特別注意的是建構子的第三個參數是<code>allowNullValues</code> ，下方有詳細說明:</p><p><code>allowNullValues</code></p><ul><li><p>描述: 此屬性控制是否允許緩存 <code>null</code> 值。如果允許，當方法返回 <code>null</code> 時，<code>ConcurrentMapCache</code> 會將其存入緩存；否則，<code>null</code> 值將不會被緩存。</p></li><li><p>默認值: <code>true</code>（允許緩存 <code>null</code> 值）</p></li><li><p>使用場景: 如果不希望緩存 <code>null</code> 值（例如避免存儲空值占用資源），可以將其設置為 <code>false</code>。</p></li></ul><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-meta">@EnableCaching</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CacheConfig</span> &#123;<br><br>    <span class="hljs-meta">@Value(<span class="hljs-string">&quot;<span class="hljs-subst">$&#123;cache.a.expire-time-minute&#125;</span>&quot;</span>)</span><br>    <span class="hljs-keyword">private</span> Integer aCacheExpired60minute;<br><br>    <span class="hljs-meta">@Value(<span class="hljs-string">&quot;<span class="hljs-subst">$&#123;cache.b.expire-time-minute&#125;</span>&quot;</span>)</span><br>    <span class="hljs-keyword">private</span> Integer bCacheExpiredMinute;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-meta">@Primary</span><br>    <span class="hljs-keyword">public</span> CacheManager cacheManager() &#123;<br>        ConcurrentMapCacheManager cacheManager = new ConcurrentMapCacheManager(<span class="hljs-string">&quot;ACache&quot;</span>, <span class="hljs-string">&quot;BCache&quot;</span>) &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">protected</span> Cache createConcurrentMapCache(<span class="hljs-keyword">final</span> String name) &#123;<br>                <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;ACache&quot;</span>.equals(name)) &#123;<br>                    <span class="hljs-keyword">return</span> new ConcurrentMapCache(name, CacheBuilder.newBuilder().expireAfterWrite(aCacheExpired60minute, TimeUnit.MINUTES).build().asMap(), <span class="hljs-literal">true</span>);<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;BCache&quot;</span>.equals(name)) &#123;<br>                    <span class="hljs-keyword">return</span> new ConcurrentMapCache(name, CacheBuilder.newBuilder().expireAfterWrite(bCacheExpiredMinute, TimeUnit.MINUTES).build().asMap(), <span class="hljs-literal">true</span>);<br>                &#125;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>            &#125;<br>        &#125;;<br><br>        <span class="hljs-keyword">return</span> cacheManager;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-comment">// 使用cacheManager</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Test</span>&#123;<br><br>    <span class="hljs-meta">@Cacheable(cacheManager = <span class="hljs-string">&quot;cacheManager&quot;</span>,cacheNames = <span class="hljs-string">&quot;ACache&quot;</span>)</span><br>    void testA(String topic);<br>    <br>    <span class="hljs-meta">@Cacheable(cacheManager = <span class="hljs-string">&quot;cacheManager&quot;</span>,cacheNames = <span class="hljs-string">&quot;BCache&quot;</span>)</span><br>    void testB(String topic);<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="代碼實作"><a href="#代碼實作" class="headerlink" title="代碼實作"></a>代碼實作</h1><h2 id="Table-Schema"><a href="#Table-Schema" class="headerlink" title="Table Schema"></a>Table Schema</h2><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">CREATE</span> TABLE <span class="hljs-symbol">`member`</span> (<br>  <span class="hljs-symbol">`member_id`</span> int <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span> AUTO_INCREMENT,<br>  <span class="hljs-symbol">`email`</span> varchar(<span class="hljs-number">256</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,<br>  <span class="hljs-symbol">`password`</span> varchar(<span class="hljs-number">256</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,<br>  <span class="hljs-symbol">`name`</span> varchar(<span class="hljs-number">256</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,<br>  <span class="hljs-symbol">`age`</span> int <span class="hljs-keyword">NOT</span> <span class="hljs-literal">NULL</span>,<br>  <span class="hljs-keyword">PRIMARY</span> <span class="hljs-keyword">KEY</span> (<span class="hljs-symbol">`member_id`</span>),<br>  <span class="hljs-keyword">UNIQUE</span> <span class="hljs-keyword">KEY</span> <span class="hljs-symbol">`email`</span> (<span class="hljs-symbol">`email`</span>)<br>)<br><br></code></pre></td></tr></table></figure><h2 id="pom"><a href="#pom" class="headerlink" title="pom"></a>pom</h2><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;&lt;http://maven.apache.org/POM/4.0.0&gt;&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;&lt;http://www.w3.org/2001/XMLSchema-instance&gt;&quot;</span></span></span><br><span class="hljs-tag"><span class="language-xml"><span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;&lt;http://maven.apache.org/POM/4.0.0&gt; &lt;https://maven.apache.org/xsd/maven-4.0.0.xsd&gt;&quot;</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.1.10<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span> /&gt;</span> <span class="hljs-comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.example.redis_demo<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>demo<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>demo<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span>Demo project for Spring Boot<span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>17<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">spring-ai.version</span>&gt;</span>0.8.1<span class="hljs-tag">&lt;/<span class="hljs-name">spring-ai.version</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.33<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-redis-reactive<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>redis.clients<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jedis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-comment">&lt;!-- &lt;dependency&gt;</span></span><br><span class="hljs-comment"><span class="language-xml">&lt;groupId&gt;org.springframework.ai&lt;/groupId&gt;</span></span><br><span class="hljs-comment"><span class="language-xml">&lt;artifactId&gt;spring-ai-redis-spring-boot-starter&lt;/artifactId&gt;</span></span><br><span class="hljs-comment"><span class="language-xml">&lt;/dependency&gt; --&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.18.30<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-devtools<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-comment">&lt;!-- &lt;dependencyManagement&gt;</span></span><br><span class="hljs-comment"><span class="language-xml">&lt;dependencies&gt;</span></span><br><span class="hljs-comment"><span class="language-xml">&lt;dependency&gt;</span></span><br><span class="hljs-comment"><span class="language-xml">&lt;groupId&gt;org.springframework.ai&lt;/groupId&gt;</span></span><br><span class="hljs-comment"><span class="language-xml">&lt;artifactId&gt;spring-ai-bom&lt;/artifactId&gt;</span></span><br><span class="hljs-comment"><span class="language-xml">&lt;version&gt;$</span></span><span class="hljs-template-variable">&#123;spring-ai.version&#125;</span><span class="language-xml"><span class="hljs-comment">&lt;/version&gt;</span></span><br><span class="hljs-comment"><span class="language-xml">&lt;type&gt;pom&lt;/type&gt;</span></span><br><span class="hljs-comment"><span class="language-xml">&lt;scope&gt;import&lt;/scope&gt;</span></span><br><span class="hljs-comment"><span class="language-xml">&lt;/dependency&gt;</span></span><br><span class="hljs-comment"><span class="language-xml">&lt;/dependencies&gt;</span></span><br><span class="hljs-comment"><span class="language-xml">&lt;/dependencyManagement&gt; --&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">image</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">builder</span>&gt;</span>paketobuildpacks/builder-jammy-base:latest<span class="hljs-tag">&lt;/<span class="hljs-name">builder</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">image</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">repositories</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">repository</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>spring-milestones<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>Spring Milestones<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>&lt;https://repo.spring.io/milestone&gt;<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">snapshots</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">enabled</span>&gt;</span>false<span class="hljs-tag">&lt;/<span class="hljs-name">enabled</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">snapshots</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">repository</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">repositories</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span></span><br><span class="language-xml"></span><br></code></pre></td></tr></table></figure><h2 id="config"><a href="#config" class="headerlink" title="config"></a>config</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs typescript">package com.<span class="hljs-property">example</span>.<span class="hljs-property">redis_demo</span>.<span class="hljs-property">demo</span>.<span class="hljs-property">config</span>;<br><br><span class="hljs-keyword">import</span> java.<span class="hljs-property">lang</span>.<span class="hljs-property">reflect</span>.<span class="hljs-property">Method</span>;<br><span class="hljs-keyword">import</span> java.<span class="hljs-property">time</span>.<span class="hljs-property">Duration</span>;<br><br><span class="hljs-keyword">import</span> org.<span class="hljs-property">springframework</span>.<span class="hljs-property">beans</span>.<span class="hljs-property">factory</span>.<span class="hljs-property">annotation</span>.<span class="hljs-property">Value</span>;<br><span class="hljs-keyword">import</span> org.<span class="hljs-property">springframework</span>.<span class="hljs-property">cache</span>.<span class="hljs-property">CacheManager</span>;<br><span class="hljs-keyword">import</span> org.<span class="hljs-property">springframework</span>.<span class="hljs-property">cache</span>.<span class="hljs-property">annotation</span>.<span class="hljs-property">CachingConfigurerSupport</span>;<br><span class="hljs-keyword">import</span> org.<span class="hljs-property">springframework</span>.<span class="hljs-property">cache</span>.<span class="hljs-property">annotation</span>.<span class="hljs-property">EnableCaching</span>;<br><span class="hljs-keyword">import</span> org.<span class="hljs-property">springframework</span>.<span class="hljs-property">cache</span>.<span class="hljs-property">interceptor</span>.<span class="hljs-property">KeyGenerator</span>;<br><span class="hljs-keyword">import</span> org.<span class="hljs-property">springframework</span>.<span class="hljs-property">context</span>.<span class="hljs-property">annotation</span>.<span class="hljs-property">Bean</span>;<br><span class="hljs-keyword">import</span> org.<span class="hljs-property">springframework</span>.<span class="hljs-property">context</span>.<span class="hljs-property">annotation</span>.<span class="hljs-property">Configuration</span>;<br><span class="hljs-keyword">import</span> org.<span class="hljs-property">springframework</span>.<span class="hljs-property">data</span>.<span class="hljs-property">redis</span>.<span class="hljs-property">cache</span>.<span class="hljs-property">RedisCacheConfiguration</span>;<br><span class="hljs-keyword">import</span> org.<span class="hljs-property">springframework</span>.<span class="hljs-property">data</span>.<span class="hljs-property">redis</span>.<span class="hljs-property">cache</span>.<span class="hljs-property">RedisCacheManager</span>;<br><span class="hljs-keyword">import</span> org.<span class="hljs-property">springframework</span>.<span class="hljs-property">data</span>.<span class="hljs-property">redis</span>.<span class="hljs-property">cache</span>.<span class="hljs-property">RedisCacheWriter</span>;<br><span class="hljs-keyword">import</span> org.<span class="hljs-property">springframework</span>.<span class="hljs-property">data</span>.<span class="hljs-property">redis</span>.<span class="hljs-property">connection</span>.<span class="hljs-property">RedisConnectionFactory</span>;<br><span class="hljs-keyword">import</span> org.<span class="hljs-property">springframework</span>.<span class="hljs-property">data</span>.<span class="hljs-property">redis</span>.<span class="hljs-property">connection</span>.<span class="hljs-property">jedis</span>.<span class="hljs-property">JedisConnectionFactory</span>;<br><span class="hljs-keyword">import</span> org.<span class="hljs-property">springframework</span>.<span class="hljs-property">data</span>.<span class="hljs-property">redis</span>.<span class="hljs-property">core</span>.<span class="hljs-property">RedisTemplate</span>;<br><span class="hljs-keyword">import</span> org.<span class="hljs-property">springframework</span>.<span class="hljs-property">data</span>.<span class="hljs-property">redis</span>.<span class="hljs-property">serializer</span>.<span class="hljs-property">GenericJackson2JsonRedisSerializer</span>;<br><span class="hljs-keyword">import</span> org.<span class="hljs-property">springframework</span>.<span class="hljs-property">data</span>.<span class="hljs-property">redis</span>.<span class="hljs-property">serializer</span>.<span class="hljs-property">RedisSerializationContext</span>;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableCaching</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RedisConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">CachingConfigurerSupport</span> &#123;<br><br><span class="hljs-meta">@Value</span>(<span class="hljs-string">&quot;$&#123;spring.redis.port&#125;&quot;</span>)<br><span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span> port;<br><br><span class="hljs-meta">@Value</span>(<span class="hljs-string">&quot;$&#123;spring.redis.password&#125;&quot;</span>)<br><span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span> password;<br><br><span class="hljs-meta">@Value</span>(<span class="hljs-string">&quot;$&#123;spring.redis.host&#125;&quot;</span>)<br><span class="hljs-keyword">private</span> <span class="hljs-title class_">String</span> host;<br><br><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> <span class="hljs-title class_">JedisConnectionFactory</span> <span class="hljs-title function_">redisConnectionFactory</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-title class_">JedisConnectionFactory</span> jedisConnectionFactory = <span class="hljs-keyword">new</span> <span class="hljs-title class_">JedisConnectionFactory</span>();<br><span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>(<span class="hljs-string">&quot;port: &quot;</span> + port);<br>jedisConnectionFactory.<span class="hljs-title function_">setPort</span>(<span class="hljs-title class_">Integer</span>.<span class="hljs-built_in">parseInt</span>(port));<br>jedisConnectionFactory.<span class="hljs-title function_">setHostName</span>(host);<br>jedisConnectionFactory.<span class="hljs-title function_">setPassword</span>(password);<br><span class="hljs-keyword">return</span> jedisConnectionFactory;<br>&#125;<br><br><span class="hljs-comment">// key值命名</span><br><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> <span class="hljs-title class_">KeyGenerator</span> <span class="hljs-title function_">wiselyKeyGenerator</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">KeyGenerator</span>() &#123;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-title class_">Object</span> <span class="hljs-title function_">generate</span>(<span class="hljs-params"><span class="hljs-title class_">Object</span> target, <span class="hljs-title class_">Method</span> method, <span class="hljs-title class_">Object</span>... params</span>) &#123;<br>   <span class="hljs-title class_">StringBuilder</span> sb = <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>               sb.<span class="hljs-title function_">append</span>(target.<span class="hljs-title function_">getClass</span>().<span class="hljs-title function_">getName</span>());<br>sb.<span class="hljs-title function_">append</span>(method.<span class="hljs-title function_">getName</span>());<br><span class="hljs-keyword">for</span> (<span class="hljs-title class_">Object</span> obj : params) &#123;<br>sb.<span class="hljs-title function_">append</span>(obj.<span class="hljs-title function_">toString</span>());<br>&#125;<br><br><span class="hljs-keyword">return</span> sb.<span class="hljs-title function_">toString</span>();<br>&#125;<br>&#125;;<br>&#125;<br><br><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> <span class="hljs-title class_">RedisTemplate</span>&lt;<span class="hljs-title class_">String</span>, <span class="hljs-title class_">String</span>&gt; <span class="hljs-title function_">redisTemplate</span>(<span class="hljs-params"><span class="hljs-title class_">RedisConnectionFactory</span> factory</span>) &#123;<br><span class="hljs-title class_">RedisTemplate</span>&lt;<span class="hljs-title class_">String</span>, <span class="hljs-title class_">String</span>&gt; redisTemplate = <span class="hljs-keyword">new</span> <span class="hljs-title class_">RedisTemplate</span>&lt;<span class="hljs-title class_">String</span>, <span class="hljs-title class_">String</span>&gt;();<br>redisTemplate.<span class="hljs-title function_">setConnectionFactory</span>(factory);<br><span class="hljs-keyword">return</span> redisTemplate;<br>&#125;<br><br><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> <span class="hljs-title class_">CacheManager</span> <span class="hljs-title function_">cacheManager</span>(<span class="hljs-params"><span class="hljs-title class_">RedisConnectionFactory</span> factory</span>) &#123;<br><br><span class="hljs-title class_">RedisSerializationContext</span>.<span class="hljs-property">SerializationPair</span>&lt;<span class="hljs-title class_">Object</span>&gt; pair = <span class="hljs-title class_">RedisSerializationContext</span>.<span class="hljs-property">SerializationPair</span><br>.<span class="hljs-title function_">fromSerializer</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">GenericJackson2JsonRedisSerializer</span>());<br><span class="hljs-title class_">RedisCacheConfiguration</span> defaultCacheConfig = <span class="hljs-title class_">RedisCacheConfiguration</span>.<span class="hljs-title function_">defaultCacheConfig</span>()<br>.<span class="hljs-title function_">serializeValuesWith</span>(pair) <span class="hljs-comment">// 序列化方式</span><br>.<span class="hljs-title function_">entryTtl</span>(<span class="hljs-title class_">Duration</span>.<span class="hljs-title function_">ofHours</span>(<span class="hljs-number">1</span>)); <span class="hljs-comment">// 過期時間</span><br><br><span class="hljs-keyword">return</span> <span class="hljs-title class_">RedisCacheManager</span>.<span class="hljs-title function_">builder</span>(<span class="hljs-title class_">RedisCacheWriter</span>.<span class="hljs-title function_">nonLockingRedisCacheWriter</span>(factory))<br>.<span class="hljs-title function_">cacheDefaults</span>(defaultCacheConfig).<span class="hljs-title function_">build</span>();<br><br>&#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="entity"><a href="#entity" class="headerlink" title="entity"></a>entity</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">package</span> com.example.redis_demo.demo.entity;<br><br><br><span class="hljs-keyword">import</span> jakarta.persistence.Column;<br><span class="hljs-keyword">import</span> jakarta.persistence.Entity;<br><span class="hljs-keyword">import</span> jakarta.persistence.Id;<br><span class="hljs-keyword">import</span> jakarta.persistence.Table;<br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-meta">@Entity</span><br><span class="hljs-meta">@Table(name = <span class="hljs-string">&quot;member&quot;</span>)</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MemberEntity</span> &#123;<br><br>    <span class="hljs-meta">@Id</span><br>    <span class="hljs-meta">@Column(name = <span class="hljs-string">&quot;member_id&quot;</span>)</span><br>    <span class="hljs-keyword">private</span> Integer memberId;<br><br>    <span class="hljs-meta">@Column(name = <span class="hljs-string">&quot;email&quot;</span>)</span><br>    <span class="hljs-keyword">private</span> String email;<br><br>    <span class="hljs-meta">@Column(name = <span class="hljs-string">&quot;password&quot;</span>)</span><br>    <span class="hljs-keyword">private</span> String password;<br><br>    <span class="hljs-meta">@Column(name = <span class="hljs-string">&quot;name&quot;</span>)</span><br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-meta">@Column(name = <span class="hljs-string">&quot;age&quot;</span>)</span><br>    <span class="hljs-keyword">private</span> Integer age;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h2 id="repository"><a href="#repository" class="headerlink" title="repository"></a>repository</h2><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">package com.example.redis_demo.demo.repository;<br><br><span class="hljs-keyword">import</span> org.springframework.data.jpa.repository.JpaRepository;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Repository;<br><br><span class="hljs-keyword">import</span> com.example.redis_demo.demo.entity.MemberEntity;<br><br>@Repository<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-symbol">MemberRepository</span> <span class="hljs-symbol">extends</span> <span class="hljs-symbol">JpaRepository</span>&lt;<span class="hljs-symbol">MemberEntity</span>, <span class="hljs-symbol">Integer</span>&gt;&#123;<br><br>&#125;<br><br><br></code></pre></td></tr></table></figure><h2 id="service"><a href="#service" class="headerlink" title="service"></a>service</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.redis_demo.demo.service;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">import</span> com.example.redis_demo.demo.entity.MemberEntity;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">MemberService</span> &#123;<br>    List&lt;MemberEntity&gt; <span class="hljs-title function_">findAllMember</span><span class="hljs-params">()</span>;<br>    MemberEntity <span class="hljs-title function_">findById</span><span class="hljs-params">(Integer memberId)</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">clearAllUserCache</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">clear</span><span class="hljs-params">(Integer memberId)</span>;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h3 id="impl"><a href="#impl" class="headerlink" title="impl"></a>impl</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">package</span> com.example.redis_demo.demo.service.impl;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Optional;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.<span class="hljs-keyword">annotation</span>.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.cache.<span class="hljs-keyword">annotation</span>.CacheConfig;<br><span class="hljs-keyword">import</span> org.springframework.cache.<span class="hljs-keyword">annotation</span>.CacheEvict;<br><span class="hljs-keyword">import</span> org.springframework.cache.<span class="hljs-keyword">annotation</span>.Cacheable;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Service;<br><br><span class="hljs-keyword">import</span> com.example.redis_demo.demo.entity.MemberEntity;<br><span class="hljs-keyword">import</span> com.example.redis_demo.demo.repository.MemberRepository;<br><span class="hljs-keyword">import</span> com.example.redis_demo.demo.service.MemberService;<br><br><span class="hljs-meta">@Service</span><br><span class="hljs-meta">@CacheConfig(cacheNames = <span class="hljs-string">&quot;MemberService&quot;</span>)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MemberServiceImpl</span> <span class="hljs-title">implements</span> <span class="hljs-title">MemberService</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> MemberRepository memberRepository;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 執行時,將清除value = getAllUsers cache</span><br><span class="hljs-comment">     * 【cacheNames = &quot;userService&quot;】</span><br><span class="hljs-comment">     * 也可指定清除的key 【<span class="hljs-doctag">@CacheEvict</span>(value=&quot;abc&quot;)】</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-meta">@CacheEvict(value = <span class="hljs-string">&quot;findAllMember&quot;</span>, allEntries = true)</span><br>    <span class="hljs-keyword">public</span> void clearAllUserCache() &#123;<br><br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * cacheNames 與 value 定義一样，若設置了 value 的值，cacheNames 配置就無效。&lt;br&gt;</span><br><span class="hljs-comment">     * 使用 keyGenerator ，注意是否在config中定義好。</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-meta">@Cacheable(value = <span class="hljs-string">&quot;findAllMember&quot;</span>, keyGenerator = <span class="hljs-string">&quot;wiselyKeyGenerator&quot;</span>)</span><br>    <span class="hljs-keyword">public</span> List&lt;MemberEntity&gt; findAllMember() &#123;<br>        List&lt;MemberEntity&gt; membList = memberRepository.findAll();<br>        <span class="hljs-keyword">return</span> membList;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * key =&quot;#p0&quot; 表示已第一個參數作為key</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-meta">@Cacheable(value = <span class="hljs-string">&quot;redis&quot;</span>, key = <span class="hljs-string">&quot;#p0&quot;</span>)</span><br>    <span class="hljs-keyword">public</span> MemberEntity findById(Integer memberId) &#123;<br>        Optional&lt;MemberEntity&gt; result = memberRepository.findById(memberId);<br>        <span class="hljs-keyword">return</span> result.orElseThrow();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-meta">@CacheEvict(value = <span class="hljs-string">&quot;redis&quot;</span>, key = <span class="hljs-string">&quot;#p0&quot;</span>)</span><br>    <span class="hljs-keyword">public</span> void clear(Integer memberId) &#123;<br><br>    &#125;<br><br>&#125;<br><br><br></code></pre></td></tr></table></figure><h2 id="controller"><a href="#controller" class="headerlink" title="controller"></a>controller</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">package</span> com.example.redis_demo.demo.controller;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.<span class="hljs-keyword">annotation</span>.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.<span class="hljs-keyword">annotation</span>.RestController;<br><br><span class="hljs-keyword">import</span> com.example.redis_demo.demo.entity.MemberEntity;<br><span class="hljs-keyword">import</span> com.example.redis_demo.demo.service.MemberService;<br><br><span class="hljs-keyword">import</span> org.springframework.web.bind.<span class="hljs-keyword">annotation</span>.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.<span class="hljs-keyword">annotation</span>.PostMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.<span class="hljs-keyword">annotation</span>.RequestBody;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.<span class="hljs-keyword">annotation</span>.RequestParam;<br><br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MemberController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> MemberService memberService;<br><br>    <span class="hljs-meta">@PostMapping(<span class="hljs-string">&quot;/getAll&quot;</span>)</span><br>    <span class="hljs-keyword">public</span> List&lt;MemberEntity&gt; getAllMember() &#123;<br>        <span class="hljs-keyword">return</span> memberService.findAllMember();<br>    &#125;<br><br>    <span class="hljs-meta">@GetMapping(<span class="hljs-string">&quot;/getById&quot;</span>)</span><br>    <span class="hljs-keyword">public</span> MemberEntity getMember(<span class="hljs-meta">@RequestParam</span> Integer memberId) &#123;<br>        <span class="hljs-keyword">return</span> memberService.findById(memberId);<br>    &#125;<br><br>    <span class="hljs-meta">@PostMapping(<span class="hljs-string">&quot;/clearAll&quot;</span>)</span><br>    <span class="hljs-keyword">public</span> void clearAllUserCache() &#123;<br>        memberService.clearAllUserCache();<br>    &#125;<br><br>    <span class="hljs-meta">@GetMapping(<span class="hljs-string">&quot;/clearById&quot;</span>)</span><br>    <span class="hljs-keyword">public</span> void clear(<span class="hljs-meta">@RequestParam</span> Integer memberId) &#123;<br>        memberService.clear(memberId);<br>    &#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h1 id="結果"><a href="#結果" class="headerlink" title="結果"></a>結果</h1><p>使用postman打getAll</p><p><img src="/./image/Spring_Cache/110e09e7-188c-8143-8541-f05ee931c51f.webp" alt="Image"></p><p>console會出現jpql</p><p><img src="/./image/Spring_Cache/110e09e7-188c-81ed-8ba3-c8cfd0a38a52.webp" alt="Image"></p><p>redis container內會顯示新增的key</p><p><img src="/./image/Spring_Cache/110e09e7-188c-8184-b30c-e8c2a4477710.webp" alt="Image"></p><p><img src="/./image/Spring_Cache/110e09e7-188c-81af-b226-c9b133d6aee2.webp" alt="Image"></p><p>此時再用postman打一次時console沒有顯示jpql，<br>表示是從redis中撈取，回應速度也變快了，驗證了cache機制</p><p><img src="/./image/Spring_Cache/110e09e7-188c-816c-ab46-c36b2e7f2f1b.webp" alt="Image"></p><p>使用postman打刪除cache</p><p><img src="/./image/Spring_Cache/110e09e7-188c-8174-b50b-ee45a60a0cac.webp" alt="Image"></p><p>redis container內就看不到該筆key了</p><p><img src="/./image/Spring_Cache/110e09e7-188c-8112-88ec-cdd6cf36fe84.webp" alt="Image"></p>]]></content>
    
    
    <categories>
      
      <category>Spring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring Cache</tag>
      
      <tag>Redis</tag>
      
      <tag>Spring Boot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ansible AWX RestAPI</title>
    <link href="/2024/08/26/Ansible%20AWX%20RestAPI/"/>
    <url>/2024/08/26/Ansible%20AWX%20RestAPI/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>AWX提供了RestAPI給開發者使用，開發者可以使用RestAPI開發更客製化的功能。AWX可以玩的API有非常多，這邊介紹筆者工作上用到的幾個API，並實作使用Spring Boot程式串接AWX RestAPI去啟動一個playbook。</p><p>更多api資訊可參考官方文件:</p><p><a href="https://ansible.readthedocs.io/projects/awx/en/latest/rest_api/api_ref.html">https://ansible.readthedocs.io/projects/awx/en/latest/rest_api&#x2F;api_ref.html</a></p><h1 id="API-介紹"><a href="#API-介紹" class="headerlink" title="API 介紹"></a>API 介紹</h1><p>注意: 有些在操作一些AWX API時需要攜帶API TOKEN</p><h2 id="Get-API-Token"><a href="#Get-API-Token" class="headerlink" title="Get API Token"></a>Get API Token</h2><p><code>POST api/v2/tokens</code></p><p> 取得Token</p><p><img src="/./image/Ansible_AWX_RestAPI/ddb680cb-2bf4-4432-9fd0-4d6a71de3770.webp" alt="Image"></p><h2 id="PING"><a href="#PING" class="headerlink" title="PING"></a>PING</h2><p><code>GET /api/v2/ping/</code></p><h3 id="用途"><a href="#用途" class="headerlink" title="用途:"></a>用途:</h3><p>獲取AWX Instance上的基本資訊</p><h3 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h3><p>Response:</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs prolog">&#123;<br>    <span class="hljs-string">&quot;ha&quot;</span>: false,<br>    <span class="hljs-string">&quot;version&quot;</span>: <span class="hljs-string">&quot;24.6.1&quot;</span>,<br>    <span class="hljs-string">&quot;active_node&quot;</span>: <span class="hljs-string">&quot;awx-demo-web-fdf7554d5-fx7wj&quot;</span>,<br>    <span class="hljs-string">&quot;install_uuid&quot;</span>: <span class="hljs-string">&quot;14855207-b3b0-452d-b9fb-2867caae9749&quot;</span>,<br>    <span class="hljs-string">&quot;instances&quot;</span>: [<br>        &#123;<br>            <span class="hljs-string">&quot;node&quot;</span>: <span class="hljs-string">&quot;awx-demo-task-8676866c49-l5l75&quot;</span>,<br>            <span class="hljs-string">&quot;node_type&quot;</span>: <span class="hljs-string">&quot;control&quot;</span>,<br>            <span class="hljs-string">&quot;uuid&quot;</span>: <span class="hljs-string">&quot;15d8fa42-6819-42d7-9bcb-45f24826faa5&quot;</span>,<br>            <span class="hljs-string">&quot;heartbeat&quot;</span>: <span class="hljs-string">&quot;2024-08-14T08:19:09.573725Z&quot;</span>,<br>            <span class="hljs-string">&quot;capacity&quot;</span>: <span class="hljs-number">77</span>,<br>            <span class="hljs-string">&quot;version&quot;</span>: <span class="hljs-string">&quot;24.6.1&quot;</span><br>        &#125;<br>    ],<br>    <span class="hljs-string">&quot;instance_groups&quot;</span>: [<br>        &#123;<br>            <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;controlplane&quot;</span>,<br>            <span class="hljs-string">&quot;capacity&quot;</span>: <span class="hljs-number">77</span>,<br>            <span class="hljs-string">&quot;instances&quot;</span>: [<br>                <span class="hljs-string">&quot;awx-demo-task-8676866c49-l5l75&quot;</span><br>            ]<br>        &#125;,<br>        &#123;<br>            <span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;default&quot;</span>,<br>            <span class="hljs-string">&quot;capacity&quot;</span>: <span class="hljs-number">0</span>,<br>            <span class="hljs-string">&quot;instances&quot;</span>: []<br>        &#125;<br>    ]<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="instances"><a href="#instances" class="headerlink" title="instances"></a>instances</h3><p><img src="/./image/Ansible_AWX_RestAPI/24e29787-46a0-40cf-97c4-49fec592572d.webp" alt="Image"></p><h3 id="instance-groups"><a href="#instance-groups" class="headerlink" title="instance_groups"></a>instance_groups</h3><p><img src="/./image/Ansible_AWX_RestAPI/5abff82c-785f-4cc8-98b0-408dd1b8630c.webp" alt="Image"></p><p><img src="/./image/Ansible_AWX_RestAPI/50373c30-f84a-44e2-9c41-5bcbf0ce9e09.webp" alt="Image"></p><h2 id="job-templates"><a href="#job-templates" class="headerlink" title="job_templates"></a>job_templates</h2><p><code>GET ``/api/v2/job_templates/</code></p><p>需攜帶API Token</p><h3 id="用途-1"><a href="#用途-1" class="headerlink" title="用途:"></a>用途:</h3><p>獲取所有的template資訊，並且可透過parameter達到排序、分頁、搜尋功能</p><h3 id="排序"><a href="#排序" class="headerlink" title="排序:"></a>排序:</h3><p><img src="/./image/Ansible_AWX_RestAPI/a6ae6598-800e-4d1f-b1ce-ab94fe562844.webp" alt="Image"></p><h3 id="分頁"><a href="#分頁" class="headerlink" title="分頁"></a>分頁</h3><p><img src="/./image/Ansible_AWX_RestAPI/08756eb8-0cd1-46d2-8eb3-1aff6d7edf6a.webp" alt="Image"></p><h3 id="搜尋"><a href="#搜尋" class="headerlink" title="搜尋"></a>搜尋</h3><p><img src="/./image/Ansible_AWX_RestAPI/5ebba959-8eb0-4e47-8274-66bae98ba65f.webp" alt="Image"></p><h3 id="Postman範例"><a href="#Postman範例" class="headerlink" title="Postman範例"></a>Postman範例</h3><p><img src="/./image/Ansible_AWX_RestAPI/6e3eac92-4f4e-4ed6-bb76-3e9e9f3cf736.webp" alt="Image"></p><h2 id="Launch-template"><a href="#Launch-template" class="headerlink" title="Launch template"></a>Launch template</h2><p><code>POST /api/v2/job_templates/&#123;id&#125;/launch/</code></p><p>需攜帶API Token</p><h3 id="用途-2"><a href="#用途-2" class="headerlink" title="用途:"></a>用途:</h3><p>使用template id遠端trigger Job template，並且Response Body會Return相對應的Job Id與Job Info</p><h3 id="Postman範例-1"><a href="#Postman範例-1" class="headerlink" title="Postman範例"></a>Postman範例</h3><p><img src="/./image/Ansible_AWX_RestAPI/629f99ed-888b-4151-94cc-947f8ebbe0c0.webp" alt="Image"></p><h2 id="Get-Job-By-Job-Id"><a href="#Get-Job-By-Job-Id" class="headerlink" title="Get Job By Job Id"></a>Get Job By Job Id</h2><p><code>GET ``/api/v2/jobs/&#123;id&#125;/</code></p><p>需攜帶API Token</p><h3 id="用途-3"><a href="#用途-3" class="headerlink" title="用途:"></a>用途:</h3><p>使用Job Id獲得Job的相關資訊，包含Trigger時間、Job狀態(失敗、成功、Pending)等資訊</p><h3 id="Postman範例-2"><a href="#Postman範例-2" class="headerlink" title="Postman範例"></a>Postman範例</h3><p><img src="/./image/Ansible_AWX_RestAPI/19a20db8-190c-42d9-86dc-db66e4b1d99b.webp" alt="Image"></p><h2 id="Get-Job-Stdout-By-JobId"><a href="#Get-Job-Stdout-By-JobId" class="headerlink" title="Get Job Stdout By JobId"></a>Get Job Stdout By JobId</h2><p><code>GET ``/api/v2/jobs/&#123;id&#125;/stdout/</code></p><p>需攜帶API Token</p><h3 id="用途-4"><a href="#用途-4" class="headerlink" title="用途:"></a>用途:</h3><p>獲取Job相關輸出訊息，預設Return會是html格式，可依parameter將Return format為txt、json格式</p><p><img src="/./image/Ansible_AWX_RestAPI/f7392005-10c6-4748-bc00-d8b74ee31747.webp" alt="Image"></p><h3 id="Postman範例-3"><a href="#Postman範例-3" class="headerlink" title="Postman範例"></a>Postman範例</h3><p><img src="/./image/Ansible_AWX_RestAPI/405f208d-bfaa-4b23-8dbd-fb1319ccd865.webp" alt="Image"></p><h2 id="Get-Jobs"><a href="#Get-Jobs" class="headerlink" title="Get Jobs"></a>Get Jobs</h2><p><code>GET ``/api/v2/jobs/</code></p><p>需攜帶API Token</p><h3 id="用途-5"><a href="#用途-5" class="headerlink" title="用途:"></a>用途:</h3><p>獲取所有Jobs的相關資訊，並且可透過parameter達到排序、分頁、搜尋功能</p><p><img src="/./image/Ansible_AWX_RestAPI/1ac99a56-8a84-407a-a80e-9b618b004e33.webp" alt="Image"></p><p><img src="/./image/Ansible_AWX_RestAPI/ebeae388-ddf2-4e35-8895-8892226cf2a4.webp" alt="Image"></p><p><img src="/./image/Ansible_AWX_RestAPI/840edfb4-425b-4cd8-ad0a-7807e4493abb.webp" alt="Image"></p><h3 id="Postman範例-4"><a href="#Postman範例-4" class="headerlink" title="Postman範例"></a>Postman範例</h3><p><img src="/./image/Ansible_AWX_RestAPI/5b6c93d7-feb3-4774-9334-320d19e76848.webp" alt="Image"></p><h1 id="Spring-Boot-實作"><a href="#Spring-Boot-實作" class="headerlink" title="Spring Boot 實作"></a>Spring Boot 實作</h1><h2 id="controller"><a href="#controller" class="headerlink" title="controller"></a>controller</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.demo.controller;<br><br><span class="hljs-keyword">import</span> ch.qos.logback.core.util.StringUtil;<br><span class="hljs-keyword">import</span> com.example.demo.dto.Job;<br><span class="hljs-keyword">import</span> com.example.demo.dto.JobTemplates;<br><span class="hljs-keyword">import</span> com.example.demo.dto.Token;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;<br><span class="hljs-keyword">import</span> org.springframework.http.*;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.*;<br><span class="hljs-keyword">import</span> org.springframework.web.client.RestTemplate;<br><br><span class="hljs-keyword">import</span> java.util.Objects;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AwxController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> RestTemplate restTemplate;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;aws.api.v2.uri&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String awxApiUri;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/launchTemplate&quot;)</span><br>    <span class="hljs-keyword">public</span> ResponseEntity&lt;Job&gt; <span class="hljs-title function_">launchTemplate</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam</span> Integer id)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> awxApiUri + <span class="hljs-string">&quot;job_templates/&quot;</span> + id + <span class="hljs-string">&quot;/launch/&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> getToken();<br>        <span class="hljs-type">HttpHeaders</span> <span class="hljs-variable">httpHeaders</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpHeaders</span>();<br>        httpHeaders.setContentType(MediaType.APPLICATION_JSON);<br>        httpHeaders.add(<span class="hljs-string">&quot;Authorization&quot;</span>, <span class="hljs-string">&quot;Bearer &quot;</span> + token);<br><br>        ResponseEntity&lt;Job&gt; response = restTemplate.exchange(url, HttpMethod.POST, <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpEntity</span>&lt;&gt;(httpHeaders), Job.class);<br>        <span class="hljs-type">Job</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> Objects.requireNonNull(response.getBody());<br><br>        <span class="hljs-keyword">return</span> ResponseEntity.ok(result);<br>    &#125;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/getJobTemplates&quot;)</span><br>    <span class="hljs-keyword">public</span> ResponseEntity&lt;JobTemplates&gt; <span class="hljs-title function_">getJobTemplates</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> awxApiUri + <span class="hljs-string">&quot;/job_templates/&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> getToken();<br>        <span class="hljs-type">HttpHeaders</span> <span class="hljs-variable">httpHeaders</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpHeaders</span>();<br>        httpHeaders.add(<span class="hljs-string">&quot;Authorization&quot;</span>, <span class="hljs-string">&quot;Bearer &quot;</span> + token);<br><br>        ResponseEntity&lt;JobTemplates&gt; response = restTemplate.exchange(url, HttpMethod.GET, <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpEntity</span>&lt;&gt;(httpHeaders), JobTemplates.class);<br><br>        <span class="hljs-type">JobTemplates</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> Objects.requireNonNull(response.getBody());<br><br>        <span class="hljs-keyword">return</span> ResponseEntity.ok(result);<br>    &#125;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/getJobById&quot;)</span><br>    <span class="hljs-keyword">public</span> ResponseEntity&lt;Job&gt; <span class="hljs-title function_">getJobById</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam</span> Integer id)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> awxApiUri + <span class="hljs-string">&quot;jobs/&quot;</span> + id;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> getToken();<br>        <span class="hljs-type">HttpHeaders</span> <span class="hljs-variable">httpHeaders</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpHeaders</span>();<br>        httpHeaders.add(<span class="hljs-string">&quot;Authorization&quot;</span>, <span class="hljs-string">&quot;Bearer &quot;</span> + token);<br><br>        ResponseEntity&lt;Job&gt; response = restTemplate.exchange(url, HttpMethod.GET, <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpEntity</span>&lt;&gt;(httpHeaders), Job.class);<br><br>        <span class="hljs-type">Job</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> Objects.requireNonNull(response.getBody());<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">stdout</span> <span class="hljs-operator">=</span> getJobStd(id);<br><br>        <span class="hljs-keyword">if</span> (StringUtil.notNullNorEmpty(stdout)) &#123;<br>            result.setStdResult(stdout);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> ResponseEntity.ok(result);<br>    &#125;<br><br>    <span class="hljs-meta">@GetMapping(&quot;/getJobStd&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getJobStd</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam</span> Integer id)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> awxApiUri + <span class="hljs-string">&quot;jobs/&quot;</span> + id + <span class="hljs-string">&quot;/stdout?format=txt&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> getToken();<br>        <span class="hljs-type">HttpHeaders</span> <span class="hljs-variable">httpHeaders</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpHeaders</span>();<br>        httpHeaders.add(<span class="hljs-string">&quot;Authorization&quot;</span>, <span class="hljs-string">&quot;Bearer &quot;</span> + token);<br><br>        ResponseEntity&lt;String&gt; response = restTemplate.exchange(url, HttpMethod.GET, <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpEntity</span>&lt;&gt;(httpHeaders), String.class);<br><br>        <span class="hljs-keyword">return</span> response.getBody();<br>    &#125;<br><br><br>    <span class="hljs-meta">@PostMapping(&quot;/getToken&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getToken</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> awxApiUri + <span class="hljs-string">&quot;tokens/&quot;</span>;<br>        <span class="hljs-type">HttpHeaders</span> <span class="hljs-variable">httpHeaders</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpHeaders</span>();<br>        httpHeaders.setContentType(MediaType.APPLICATION_JSON);<br>        httpHeaders.add(<span class="hljs-string">&quot;Authorization&quot;</span>, <span class="hljs-string">&quot;Basic &quot;</span> + <span class="hljs-string">&quot;YWRtaW46YWRtaW4=&quot;</span>);<br><br>        ResponseEntity&lt;Token&gt; response = restTemplate.exchange(url, HttpMethod.POST, <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpEntity</span>&lt;&gt;(httpHeaders), Token.class);<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">token</span> <span class="hljs-operator">=</span> Objects.requireNonNull(response.getBody()).getToken();<br><br>        <span class="hljs-keyword">return</span> token;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="dto"><a href="#dto" class="headerlink" title="dto"></a>dto</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">package</span> com.example.demo.dto;<br><br><span class="hljs-keyword">import</span> com.fasterxml.jackson.<span class="hljs-keyword">annotation</span>.JsonInclude;<br><span class="hljs-keyword">import</span> com.fasterxml.jackson.<span class="hljs-keyword">annotation</span>.JsonProperty;<br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-keyword">import</span> java.time.LocalDateTime;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@JsonInclude(JsonInclude.Include.NON_NULL)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Job</span> &#123;<br><br>    <span class="hljs-meta">@JsonProperty(<span class="hljs-string">&quot;id&quot;</span>)</span><br>    <span class="hljs-keyword">private</span> Integer id;<br><br>    <span class="hljs-meta">@JsonProperty(<span class="hljs-string">&quot;job&quot;</span>)</span><br>    <span class="hljs-keyword">private</span> Integer jobId;<br><br>    <span class="hljs-meta">@JsonProperty(<span class="hljs-string">&quot;status&quot;</span>)</span><br>    <span class="hljs-keyword">private</span> String status;<br><br>    <span class="hljs-meta">@JsonProperty(<span class="hljs-string">&quot;created&quot;</span>)</span><br>    <span class="hljs-keyword">private</span> LocalDateTime created;<br><br>    <span class="hljs-meta">@JsonProperty(<span class="hljs-string">&quot;modified&quot;</span>)</span><br>    <span class="hljs-keyword">private</span> LocalDateTime modified;<br><br>    <span class="hljs-meta">@JsonProperty(<span class="hljs-string">&quot;stdout&quot;</span>)</span><br>    <span class="hljs-keyword">private</span> String stdResult;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">package</span> com.example.demo.dto;<br><br><span class="hljs-keyword">import</span> com.fasterxml.jackson.<span class="hljs-keyword">annotation</span>.JsonProperty;<br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JobTemplates</span> &#123;<br><br>    <span class="hljs-meta">@JsonProperty(<span class="hljs-string">&quot;count&quot;</span>)</span><br>    <span class="hljs-keyword">private</span> Integer count;<br><br>    <span class="hljs-meta">@JsonProperty(<span class="hljs-string">&quot;results&quot;</span>)</span><br>    <span class="hljs-keyword">private</span> List&lt;Template&gt; results;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">package</span> com.example.demo.dto;<br><br><span class="hljs-keyword">import</span> com.fasterxml.jackson.<span class="hljs-keyword">annotation</span>.JsonProperty;<br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-keyword">import</span> java.time.LocalDateTime;<br><span class="hljs-keyword">import</span> java.util.Locale;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Template</span> &#123;<br>    <span class="hljs-meta">@JsonProperty(<span class="hljs-string">&quot;id&quot;</span>)</span><br>    <span class="hljs-keyword">private</span> Integer id;<br><br>    <span class="hljs-meta">@JsonProperty(<span class="hljs-string">&quot;type&quot;</span>)</span><br>    <span class="hljs-keyword">private</span> String type;<br><br>    <span class="hljs-meta">@JsonProperty(<span class="hljs-string">&quot;created&quot;</span>)</span><br>    <span class="hljs-keyword">private</span> LocalDateTime created;<br><br>    <span class="hljs-meta">@JsonProperty(<span class="hljs-string">&quot;modified&quot;</span>)</span><br>    <span class="hljs-keyword">private</span> LocalDateTime modified;<br><br>    <span class="hljs-meta">@JsonProperty(<span class="hljs-string">&quot;last_job_run&quot;</span>)</span><br>    <span class="hljs-keyword">private</span> LocalDateTime lastJobRun;<br><br>    <span class="hljs-meta">@JsonProperty(<span class="hljs-string">&quot;name&quot;</span>)</span><br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-meta">@JsonProperty(<span class="hljs-string">&quot;playbook&quot;</span>)</span><br>    <span class="hljs-keyword">private</span> String playbook;<br><br>    <span class="hljs-meta">@JsonProperty(<span class="hljs-string">&quot;status&quot;</span>)</span><br>    <span class="hljs-keyword">private</span> String status;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">package</span> com.example.demo.dto;<br><br><span class="hljs-keyword">import</span> com.fasterxml.jackson.<span class="hljs-keyword">annotation</span>.JsonProperty;<br><span class="hljs-keyword">import</span> lombok.Data;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Token</span> &#123;<br><br>    <span class="hljs-meta">@JsonProperty(<span class="hljs-string">&quot;token&quot;</span>)</span><br>    <span class="hljs-keyword">private</span> String token;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Ansible</category>
      
    </categories>
    
    
    <tags>
      
      <tag>AWX</tag>
      
      <tag>K8S</tag>
      
      <tag>RestAPI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>實現Token Based的Single Sign On(SSO)</title>
    <link href="/2024/08/18/%E5%AF%A6%E7%8F%BEToken%20Based%E7%9A%84Single%20Sign%20On(SSO)/"/>
    <url>/2024/08/18/%E5%AF%A6%E7%8F%BEToken%20Based%E7%9A%84Single%20Sign%20On(SSO)/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在之前我們已經實現過使用Session Based的SSO，本篇我們來實作使用Token Based的SSO</p><h1 id="架構圖"><a href="#架構圖" class="headerlink" title="架構圖"></a>架構圖</h1><p><img src="/./image/%E5%AF%A6%E7%8F%BEToken_Based%E7%9A%84Single_Sign_On(SSO)/f719d8b8-2089-492b-84c6-058879469740.webp" alt="Image"></p><p>說明:</p><p>Web Client向Keycloak end-point<code> &#123;&#123;server&#125;&#125;/realms/&#123;&#123;realm&#125;&#125;/protocol/openid-connect/token</code>獲取access-token，並將access-token放入request header去訪問Spring Boot Application。Spring Boot Application會去向Keycloak驗證access-token的合法性，成功認證後就能讓Client端存取服務。</p><h1 id="實作"><a href="#實作" class="headerlink" title="實作"></a>實作</h1><h1 id="Keycloak"><a href="#Keycloak" class="headerlink" title="Keycloak"></a>Keycloak</h1><p><img src="/./image/%E5%AF%A6%E7%8F%BEToken_Based%E7%9A%84Single_Sign_On(SSO)/a608522c-2820-4d23-a68e-d11fdb3d7b7b.webp" alt="Image"></p><h1 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh-Hant-TW&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;authLink&quot;</span>&gt;</span>登入驗證<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;responseDisplay&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span> <span class="hljs-comment">&lt;!-- 用來顯示回應的區塊 --&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;authLink&quot;</span>).<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;click&quot;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">event</span>) &#123;</span><br><span class="language-javascript">        event.<span class="hljs-title function_">preventDefault</span>();  <span class="hljs-comment">// 防止預設行為</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-title function_">fetch</span>(<span class="hljs-string">&quot;http://localhost:8080/realms/demo/protocol/openid-connect/token&quot;</span>, &#123;</span><br><span class="language-javascript">            <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;POST&quot;</span>,</span><br><span class="language-javascript">              <span class="hljs-attr">headers</span>: &#123;</span><br><span class="language-javascript">                <span class="hljs-string">&quot;Content-Type&quot;</span>: <span class="hljs-string">&quot;application/x-www-form-urlencoded&quot;</span></span><br><span class="language-javascript">            &#125;,</span><br><span class="language-javascript">            <span class="hljs-attr">body</span>: <span class="hljs-keyword">new</span> <span class="hljs-title class_">URLSearchParams</span>(&#123;</span><br><span class="language-javascript">           <span class="hljs-string">&quot;Content-Type&quot;</span>: <span class="hljs-string">&quot;application/x-www-form-urlencoded&quot;</span>,</span><br><span class="language-javascript">                <span class="hljs-string">&quot;client_id&quot;</span>: <span class="hljs-string">&quot;token_base&quot;</span>,</span><br><span class="language-javascript">                <span class="hljs-string">&quot;client_secret&quot;</span>: <span class="hljs-string">&quot;A8GNy8ZfajJEIFqlfuC1coNVt7jdnkLj&quot;</span>,</span><br><span class="language-javascript">                <span class="hljs-string">&quot;grant_type&quot;</span>: <span class="hljs-string">&quot;password&quot;</span>,</span><br><span class="language-javascript">                <span class="hljs-string">&quot;username&quot;</span>: <span class="hljs-string">&quot;user1&quot;</span>,</span><br><span class="language-javascript">                <span class="hljs-string">&quot;password&quot;</span>: <span class="hljs-string">&quot;user1&quot;</span>,</span><br><span class="language-javascript">                <span class="hljs-string">&quot;scope&quot;</span>: <span class="hljs-string">&quot;openid&quot;</span></span><br><span class="language-javascript">            &#125;)</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">     .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> response.<span class="hljs-title function_">json</span>())  <span class="hljs-comment">// 解析回應為 JSON</span></span><br><span class="language-javascript">        .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> &#123;</span><br><span class="language-javascript">            <span class="hljs-keyword">if</span> (data.<span class="hljs-property">access_token</span>) &#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;獲取 access_token 成功&quot;</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">                <span class="hljs-comment">// 使用 access_token 作為 Bearer Token 發送 GET 請求</span></span><br><span class="language-javascript">                <span class="hljs-title function_">fetch</span>(<span class="hljs-string">&quot;http://localhost:8081/checkLogin&quot;</span>, &#123;</span><br><span class="language-javascript">                    <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;GET&quot;</span>,</span><br><span class="language-javascript">                    <span class="hljs-attr">headers</span>: &#123;</span><br><span class="language-javascript">                        <span class="hljs-string">&quot;Authorization&quot;</span>: <span class="hljs-string">&quot;Bearer &quot;</span> + data.<span class="hljs-property">access_token</span></span><br><span class="language-javascript">                    &#125;</span><br><span class="language-javascript">                &#125;)</span><br><span class="language-javascript">                .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> response.<span class="hljs-title function_">text</span>())  <span class="hljs-comment">// 解析第二個回應為純文字</span></span><br><span class="language-javascript">                .<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> &#123;</span><br><span class="language-javascript">                    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;驗證請求成功&quot;</span>);</span><br><span class="language-javascript">                    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;responseDisplay&quot;</span>).<span class="hljs-property">innerText</span> = data; <span class="hljs-comment">// 顯示驗證回應</span></span><br><span class="language-javascript">                &#125;)</span><br><span class="language-javascript">                .<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> &#123;</span><br><span class="language-javascript">                    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&quot;錯誤:&quot;</span>, error);</span><br><span class="language-javascript">                    <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;responseDisplay&quot;</span>).<span class="hljs-property">innerText</span> = <span class="hljs-string">&quot;錯誤: &quot;</span> + error;</span><br><span class="language-javascript">                &#125;);</span><br><span class="language-javascript">            &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="language-javascript">                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;獲取 access_token 失敗&quot;</span>);</span><br><span class="language-javascript">                <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;responseDisplay&quot;</span>).<span class="hljs-property">innerText</span> = <span class="hljs-string">&quot;獲取 access_token 失敗&quot;</span>;</span><br><span class="language-javascript">            &#125;</span><br><span class="language-javascript">        &#125;)</span><br><span class="language-javascript">        .<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> &#123;</span><br><span class="language-javascript">            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">error</span>(<span class="hljs-string">&quot;錯誤:&quot;</span>, error);</span><br><span class="language-javascript">            <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;responseDisplay&quot;</span>).<span class="hljs-property">innerText</span> = <span class="hljs-string">&quot;錯誤: &quot;</span> + error;</span><br><span class="language-javascript">        &#125;);</span><br><span class="language-javascript">    &#125;);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="Spring-Security"><a href="#Spring-Security" class="headerlink" title="Spring Security"></a>Spring Security</h1><h2 id="config"><a href="#config" class="headerlink" title="config"></a>config</h2><h3 id="JwtConverter"><a href="#JwtConverter" class="headerlink" title="JwtConverter"></a>JwtConverter</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.demo_oauth.config;<br><br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.security.oauth2.server.resource.authentication.JwtAuthenticationConverter;<br><span class="hljs-keyword">import</span> org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JwtConverter</span> &#123;<br><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> JwtAuthenticationConverter <span class="hljs-title function_">jwtAuthenticationConverter</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">JwtGrantedAuthoritiesConverter</span> <span class="hljs-variable">grantedAuthoritiesConverter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JwtGrantedAuthoritiesConverter</span>();<br><span class="hljs-comment">// 變更權限前綴為 ROLE_ ， Keycloak 預設權限前綴為 SCOPE_ 這在使用hasRole() 會出現問題</span><br>grantedAuthoritiesConverter.setAuthorityPrefix(<span class="hljs-string">&quot;ROLE_&quot;</span>);<br><br>    <span class="hljs-type">JwtAuthenticationConverter</span> <span class="hljs-variable">jwtAuthenticationConverter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JwtAuthenticationConverter</span>();<br>    jwtAuthenticationConverter.setJwtGrantedAuthoritiesConverter(grantedAuthoritiesConverter);<br>    <span class="hljs-keyword">return</span> jwtAuthenticationConverter;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="SecurityConfig"><a href="#SecurityConfig" class="headerlink" title="SecurityConfig"></a>SecurityConfig</h3><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><code class="hljs livescript">package com.example.demo_oauth.config;<br><br><br><span class="hljs-keyword">import</span> org.apache.hc.client5.http.classic.HttpClient;<br><span class="hljs-keyword">import</span> org.apache.hc.client5.http.impl.classic.HttpClients;<br><span class="hljs-keyword">import</span> org.apache.hc.client5.http.impl.io.PoolingHttpClientConnectionManagerBuilder;<br><span class="hljs-keyword">import</span> org.apache.hc.client5.http.io.HttpClientConnectionManager;<br><span class="hljs-keyword">import</span> org.apache.hc.client5.http.ssl.SSLConnectionSocketFactory;<br><span class="hljs-keyword">import</span> org.apache.hc.client5.http.ssl.SSLConnectionSocketFactoryBuilder;<br><span class="hljs-keyword">import</span> org.apache.hc.client5.http.ssl.TrustAllStrategy;<br><span class="hljs-keyword">import</span> org.apache.hc.core5.ssl.SSLContexts;<br><br><span class="hljs-keyword">import</span> java.security.KeyManagementException;<br><span class="hljs-keyword">import</span> java.security.KeyStoreException;<br><span class="hljs-keyword">import</span> java.security.NoSuchAlgorithmException;<br><br><span class="hljs-keyword">import</span> javax.net.ssl.SSLContext;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.http.client.ClientHttpRequestFactory;<br><span class="hljs-keyword">import</span> org.springframework.http.client.HttpComponentsClientHttpRequestFactory;<br><span class="hljs-keyword">import</span> org.springframework.security.config.Customizer;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;<br><span class="hljs-keyword">import</span> org.springframework.security.oauth2.jwt.JwtDecoder;<br><span class="hljs-keyword">import</span> org.springframework.security.oauth2.jwt.NimbusJwtDecoder;<br><span class="hljs-keyword">import</span> org.springframework.security.oauth2.server.resource.authentication.JwtAuthenticationConverter;<br><span class="hljs-keyword">import</span> org.springframework.security.web.SecurityFilterChain;<br><span class="hljs-keyword">import</span> org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint;<br><span class="hljs-keyword">import</span> org.springframework.web.client.RestTemplate;<br><span class="hljs-keyword">import</span> org.springframework.web.cors.CorsConfiguration;<br><span class="hljs-keyword">import</span> org.springframework.web.cors.CorsConfigurationSource;<br><span class="hljs-keyword">import</span> org.springframework.web.cors.UrlBasedCorsConfigurationSource;<br><br>@Configuration<br>@EnableMethodSecurity<br>@EnableWebSecurity<br>public <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityConfig</span> &#123;<br><br>    @Value(<span class="hljs-string">&quot;$&#123;spring.security.oauth2.client.provider.keycloak.issuer-uri&#125;&quot;</span>)<br>    private <span class="hljs-built_in">String</span> issuerUri;<br><br>    @Autowired<br>    private JwtAuthenticationConverter jwtAuthenticationConverter;<br><br>    @Bean<br>    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception &#123;<br>        http.csrf(csrf -&gt; csrf.disable())<br>                .cors(cors -&gt; cors.configurationSource(corsConfigurationSource()));<br><br>        http.authorizeHttpRequests(authorize -&gt; authorize.anyRequest().authenticated())<br>                .oauth2ResourceServer<span class="hljs-function"><span class="hljs-params">((oauth2) -&gt; oauth2.jwt(jwt -&gt; jwt.decoder(jwtDecoder()).jwtAuthenticationConverter(jwtAuthenticationConverter)))</span>; // 使用<span class="hljs-title">jwtDecoder</span>向<span class="hljs-title">Author</span> <span class="hljs-title">Server</span>驗證<span class="hljs-title">Accesstion</span>，並使用自定義的<span class="hljs-title">jwtConverter</span>，<span class="hljs-title">jwt</span> <span class="hljs-title">decode</span>後將權限收集進<span class="hljs-title">Collection</span>&lt;? <span class="hljs-title">extends</span> <span class="hljs-title">GrantedAuthority</span>&gt;中</span><br><span class="hljs-function"></span><br><span class="hljs-function">        <span class="hljs-title">return</span> <span class="hljs-title">http</span>.<span class="hljs-title">build</span><span class="hljs-params">()</span>;</span><br><span class="hljs-function">    &#125;</span><br><span class="hljs-function"></span><br><span class="hljs-function">    <span class="hljs-title">private</span> <span class="hljs-title">JwtDecoder</span> <span class="hljs-title">jwtDecoder</span><span class="hljs-params">()</span> &#123;</span><br><span class="hljs-function">        <span class="hljs-title">RestTemplate</span> <span class="hljs-title">restTemplate</span> = <span class="hljs-title">new</span> <span class="hljs-title">RestTemplate</span><span class="hljs-params">()</span>;</span><br><span class="hljs-function">        <span class="hljs-title">restTemplate</span>.<span class="hljs-title">setRequestFactory</span><span class="hljs-params">(trustAllClientHttpRequestFactory())</span>;</span><br><span class="hljs-function"></span><br><span class="hljs-function">        <span class="hljs-title">return</span> <span class="hljs-title">NimbusJwtDecoder</span>.<span class="hljs-title">withIssuerLocation</span><span class="hljs-params">(issuerUri)</span>.<span class="hljs-title">restOperations</span><span class="hljs-params">(restTemplate)</span>.<span class="hljs-title">build</span><span class="hljs-params">()</span>;</span><br><span class="hljs-function">    &#125;</span><br><span class="hljs-function"></span><br><span class="hljs-function">    <span class="hljs-title">private</span> <span class="hljs-title">ClientHttpRequestFactory</span> <span class="hljs-title">trustAllClientHttpRequestFactory</span><span class="hljs-params">()</span> &#123;</span><br><span class="hljs-function">        <span class="hljs-title">SSLContext</span> <span class="hljs-title">sslcontext</span> = <span class="hljs-title">null</span>;</span><br><span class="hljs-function">        <span class="hljs-title">try</span> &#123;</span><br><span class="hljs-function">            <span class="hljs-title">sslcontext</span> = <span class="hljs-title">SSLContexts</span>.<span class="hljs-title">custom</span><span class="hljs-params">()</span>.<span class="hljs-title">loadTrustMaterial</span><span class="hljs-params">(<span class="hljs-literal">null</span>, <span class="hljs-keyword">new</span> TrustAllStrategy())</span>.<span class="hljs-title">build</span><span class="hljs-params">()</span>;</span><br><span class="hljs-function">        &#125; <span class="hljs-title">catch</span> <span class="hljs-params">(KeyManagementException | NoSuchAlgorithmException | KeyStoreException e)</span> &#123;</span><br><span class="hljs-function">            <span class="hljs-title">e</span>.<span class="hljs-title">printStackTrace</span><span class="hljs-params">()</span>;</span><br><span class="hljs-function">        &#125;</span><br><span class="hljs-function">        <span class="hljs-title">SSLConnectionSocketFactory</span> <span class="hljs-title">sslSocketFactory</span> = <span class="hljs-title">SSLConnectionSocketFactoryBuilder</span>.<span class="hljs-title">create</span><span class="hljs-params">()</span>.<span class="hljs-title">setSslContext</span><span class="hljs-params">(sslcontext)</span>.<span class="hljs-title">build</span><span class="hljs-params">()</span>;</span><br><span class="hljs-function">        <span class="hljs-title">HttpClientConnectionManager</span> <span class="hljs-title">connectionManager</span> = <span class="hljs-title">PoolingHttpClientConnectionManagerBuilder</span>.<span class="hljs-title">create</span><span class="hljs-params">()</span>.<span class="hljs-title">setSSLSocketFactory</span><span class="hljs-params">(sslSocketFactory)</span>.<span class="hljs-title">build</span><span class="hljs-params">()</span>;</span><br><span class="hljs-function">        <span class="hljs-title">HttpClient</span> <span class="hljs-title">httlClient</span> = <span class="hljs-title">HttpClients</span>.<span class="hljs-title">custom</span><span class="hljs-params">()</span>.<span class="hljs-title">setConnectionManager</span><span class="hljs-params">(connectionManager)</span>.<span class="hljs-title">evictExpiredConnections</span><span class="hljs-params">()</span>.<span class="hljs-title">build</span><span class="hljs-params">()</span>;</span><br><span class="hljs-function"></span><br><span class="hljs-function">        <span class="hljs-title">ClientHttpRequestFactory</span> <span class="hljs-title">clientHttpRequestFactory</span> = <span class="hljs-title">new</span> <span class="hljs-title">HttpComponentsClientHttpRequestFactory</span><span class="hljs-params">(httlClient)</span>;</span><br><span class="hljs-function">        <span class="hljs-title">return</span> <span class="hljs-title">clientHttpRequestFactory</span>;</span><br><span class="hljs-function">    &#125;</span><br><span class="hljs-function"></span><br><span class="hljs-function">    @<span class="hljs-title">Bean</span></span><br><span class="hljs-function">    <span class="hljs-title">CorsConfigurationSource</span> <span class="hljs-title">corsConfigurationSource</span><span class="hljs-params">()</span> &#123;</span><br><span class="hljs-function">        <span class="hljs-title">CorsConfiguration</span> <span class="hljs-title">config</span> = <span class="hljs-title">new</span> <span class="hljs-title">CorsConfiguration</span><span class="hljs-params">()</span>;</span><br><span class="hljs-function"></span><br><span class="hljs-function">        <span class="hljs-title">config</span>.<span class="hljs-title">addAllowedHeader</span><span class="hljs-params">(<span class="hljs-string">&quot;*&quot;</span>)</span>;</span><br><span class="hljs-function">        <span class="hljs-title">config</span>.<span class="hljs-title">addAllowedMethod</span><span class="hljs-params">(<span class="hljs-string">&quot;*&quot;</span>)</span>;</span><br><span class="hljs-function">        <span class="hljs-title">config</span>.<span class="hljs-title">addAllowedOriginPattern</span><span class="hljs-params">(<span class="hljs-string">&quot;*&quot;</span>)</span>;</span><br><span class="hljs-function">        <span class="hljs-title">config</span>.<span class="hljs-title">setAllowCredentials</span><span class="hljs-params">(<span class="hljs-literal">true</span>)</span>;</span><br><span class="hljs-function">        <span class="hljs-title">config</span>.<span class="hljs-title">addExposedHeader</span><span class="hljs-params">(<span class="hljs-string">&quot;*&quot;</span>)</span>;</span><br><span class="hljs-function">        <span class="hljs-title">config</span>.<span class="hljs-title">setMaxAge</span><span class="hljs-params">(<span class="hljs-number">1800</span>L)</span>;</span><br><span class="hljs-function"></span><br><span class="hljs-function">        <span class="hljs-title">UrlBasedCorsConfigurationSource</span> <span class="hljs-title">source</span> = <span class="hljs-title">new</span> <span class="hljs-title">UrlBasedCorsConfigurationSource</span><span class="hljs-params">()</span>;</span><br><span class="hljs-function">        <span class="hljs-title">source</span>.<span class="hljs-title">registerCorsConfiguration</span><span class="hljs-params">(<span class="hljs-string">&quot;/**&quot;</span>, config)</span>;</span><br><span class="hljs-function"></span><br><span class="hljs-function">        <span class="hljs-title">return</span> <span class="hljs-title">source</span>;</span><br><span class="hljs-function">    &#125;</span><br><span class="hljs-function">&#125;</span><br><span class="hljs-function"></span><br></code></pre></td></tr></table></figure><h2 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h2><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">package</span> com.example.demo_oauth.controller;<br><br><span class="hljs-keyword">import</span> java.util.Collection;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.<span class="hljs-keyword">annotation</span>.Value;<br><span class="hljs-keyword">import</span> org.springframework.http.ResponseEntity;<br><span class="hljs-keyword">import</span> org.springframework.security.access.prepost.PreAuthorize;<br><span class="hljs-keyword">import</span> org.springframework.security.core.Authentication;<br><span class="hljs-keyword">import</span> org.springframework.security.core.GrantedAuthority;<br><span class="hljs-keyword">import</span> org.springframework.security.core.context.SecurityContextHolder;<br><span class="hljs-keyword">import</span> org.springframework.security.oauth2.client.authentication.OAuth2AuthenticationToken;<br><span class="hljs-keyword">import</span> org.springframework.security.oauth2.core.oidc.user.DefaultOidcUser;<br><span class="hljs-keyword">import</span> org.springframework.security.oauth2.core.user.OAuth2User;<br><span class="hljs-keyword">import</span> org.springframework.security.oauth2.jwt.Jwt;<br><span class="hljs-keyword">import</span> org.springframework.security.oauth2.server.resource.authentication.JwtAuthenticationToken;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.<span class="hljs-keyword">annotation</span>.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.<span class="hljs-keyword">annotation</span>.PostMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.<span class="hljs-keyword">annotation</span>.RestController;<br><span class="hljs-keyword">import</span> org.springframework.web.servlet.view.RedirectView;<br><br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">loginController</span> &#123;<br><br><span class="hljs-meta">@Value(<span class="hljs-string">&quot;<span class="hljs-subst">$&#123;spring.security.oauth2.client.registration.keycloak.redirect-uri&#125;</span>&quot;</span>)</span><br><span class="hljs-keyword">private</span> String authUri;<br><br><span class="hljs-meta">@GetMapping(<span class="hljs-string">&quot;/checkLogin&quot;</span>)</span><br><span class="hljs-keyword">public</span> ResponseEntity&lt;String&gt; checkLogin() &#123;<br>OAuth2User oAuth2User;<br>DefaultOidcUser defaultOidcUser;<br>Authentication authentication = SecurityContextHolder.getContext().getAuthentication();<br><span class="hljs-keyword">if</span> (authentication instanceof OAuth2AuthenticationToken) &#123;<br>defaultOidcUser = (DefaultOidcUser) SecurityContextHolder.getContext().getAuthentication().getPrincipal();<br><span class="hljs-keyword">if</span> (defaultOidcUser != <span class="hljs-literal">null</span>) &#123;<br>System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;Login Success !!&quot;</span>);<br>System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;User Id is: &quot;</span> + defaultOidcUser.getUserInfo().getClaim(<span class="hljs-string">&quot;preferred_username&quot;</span>));<br>defaultOidcUser.getAuthorities().forEach(role -&gt; &#123;System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot; role : &quot;</span> + role);&#125;);<br>Map&lt;String, Object&gt; realm = defaultOidcUser.getClaimAsMap(<span class="hljs-string">&quot;resource_access&quot;</span>);<br><br><span class="hljs-keyword">return</span> ResponseEntity.ok(<span class="hljs-string">&quot;Login Success by using OIDC flow !! User Id is : &quot;</span> + defaultOidcUser.getUserInfo().getClaim(<span class="hljs-string">&quot;preferred_username&quot;</span>));<br>&#125;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (authentication instanceof JwtAuthenticationToken) &#123;<br>Jwt jwt = (Jwt) authentication.getPrincipal();<br>Collection&lt;? extends GrantedAuthority&gt; authorties = SecurityContextHolder.getContext().getAuthentication().getAuthorities();<br><span class="hljs-keyword">if</span> (jwt != <span class="hljs-literal">null</span> &amp;&amp; authorties != <span class="hljs-literal">null</span>) &#123;<br>String userName = jwt.getClaim(<span class="hljs-string">&quot;preferred_username&quot;</span>);<br>System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;Login Success !!&quot;</span>);<br>System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;User name is : &quot;</span> + userName);<br>System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;User&#x27;s authorities is : &quot;</span>+ authorties);<br><br><span class="hljs-keyword">return</span> ResponseEntity.ok(<span class="hljs-string">&quot;Login Success by using access token !! User name is : &quot;</span> + userName);<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">return</span> ResponseEntity.ok(<span class="hljs-string">&quot;Login failed .&quot;</span>);<br>&#125;<br><br><span class="hljs-meta">@GetMapping(<span class="hljs-string">&quot;/loginSuccess&quot;</span>)</span><br><span class="hljs-keyword">public</span> Collection&lt;?&gt; loginSuccess(Authentication authentication) &#123;<br>Collection&lt;? extends GrantedAuthority&gt; authorties = authentication.getAuthorities();<br><span class="hljs-keyword">return</span> authorties;<br>&#125;<br><br><span class="hljs-meta">@GetMapping(<span class="hljs-string">&quot;/hasAuthority&quot;</span>)</span><br><span class="hljs-meta">@PreAuthorize(<span class="hljs-string">&quot;hasAuthority(&#x27;ROLE_profile&#x27;)&quot;</span>)</span><br><span class="hljs-keyword">public</span> ResponseEntity&lt;String&gt; admin() &#123;<br>System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;Client has authority: ROLE_profile&quot;</span>);<br>    <span class="hljs-keyword">return</span> ResponseEntity.ok(<span class="hljs-string">&quot;Client has authority: ROLE_profile&quot;</span>);<br>&#125;<br><br><span class="hljs-meta">@GetMapping(<span class="hljs-string">&quot;/userLogin&quot;</span>)</span><br><span class="hljs-keyword">public</span> RedirectView login() &#123;<br>System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;user login&quot;</span>);<br>RedirectView redirectView = new RedirectView();<br>redirectView.setUrl(authUri);<br><span class="hljs-keyword">return</span> redirectView;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="application-properties"><a href="#application-properties" class="headerlink" title="application properties"></a>application properties</h2><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">server.port</span>=<span class="hljs-number">8081</span><br><br><span class="hljs-comment"># OAuth2 Client settings</span><br><span class="hljs-attr">base.url</span>=http://localhost:<span class="hljs-number">8080</span><br><span class="hljs-attr">successful.redirect.url</span>=http://localhost:<span class="hljs-number">8081</span>/loginSuccess<br><span class="hljs-attr">spring.security.oauth2.client.registration.keycloak.client-id</span>=token_base<br><span class="hljs-attr">spring.security.oauth2.client.registration.keycloak.client-secret</span>=A8GNy8ZfajJEIFqlfuC1coNVt7jdnkLj<br><span class="hljs-attr">spring.security.oauth2.client.registration.keycloak.authorization-grant-type</span>=authorization_code<br><br><span class="hljs-comment"># Spring Security oauth2 Endpoint</span><br><span class="hljs-attr">spring.security.oauth2.client.registration.keycloak.redirect-uri</span>=http://localhost:<span class="hljs-number">8081</span>/login/oauth2/code/keycloak<br><span class="hljs-attr">spring.security.oauth2.client.registration.keycloak.scope</span>=email,profile,openid<br><br><span class="hljs-comment">## OAuth2 Provider settings for Keycloak</span><br><span class="hljs-attr">spring.security.oauth2.client.provider.keycloak.authorization-uri</span>=<span class="hljs-variable">$&#123;base.url&#125;</span>/realms/demo/protocol/openid-connect/auth<br><span class="hljs-attr">spring.security.oauth2.client.provider.keycloak.token-uri</span>=<span class="hljs-variable">$&#123;base.url&#125;</span>/realms/demo/protocol/openid-connect/token<br><span class="hljs-attr">spring.security.oauth2.client.provider.keycloak.user-info-uri</span>=<span class="hljs-variable">$&#123;base.url&#125;</span>/realms/demo/protocol/openid-connect/userinfo<br><span class="hljs-attr">spring.security.oauth2.client.provider.keycloak.user-name-attribute</span>=preferred_username<br><span class="hljs-attr">spring.security.oauth2.client.provider.keycloak.issuer-uri</span>=<span class="hljs-variable">$&#123;base.url&#125;</span>/realms/demo<br><span class="hljs-attr">spring.security.oauth2.client.provider.keycloak.jwk-set-uri</span>=<span class="hljs-variable">$&#123;base.url&#125;</span>/realms/demo/protocol/openid-connect/certs<br><span class="hljs-attr">spring.security.oauth2.resourceserver.jwt.jwk-set-uri</span>=<span class="hljs-variable">$&#123;base.url&#125;</span>/realms/demo/protocol/openid-connect/certs<br><br></code></pre></td></tr></table></figure><h2 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.2.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span> /&gt;</span> <span class="hljs-comment">&lt;!-- lookup parent from repository --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.example<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>demo_oauth<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>demo_oauth<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span>Demo project for Spring Boot<span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>17<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-oauth2-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.security<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-security-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-oauth2-resource-server<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.httpcomponents.client5<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>httpclient5-fluent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">excludes</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">exclude</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">exclude</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">excludes</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h1 id="驗證"><a href="#驗證" class="headerlink" title="驗證"></a>驗證</h1><p>我們在client開發者模式中可以看到，client向keycloak拿到了access-token。</p><p>client再將access-token放入header中的Authorization且Auth type為Bearer Token，訪問Spring Boot Application。</p><p>Spring Boot Application向keycloak認證了access-token後，讓client存取api服務。</p><h2 id="WEB-1"><a href="#WEB-1" class="headerlink" title="WEB"></a>WEB</h2><p><img src="/./image/%E5%AF%A6%E7%8F%BEToken_Based%E7%9A%84Single_Sign_On(SSO)/8909fd3d-c553-4776-af9d-25a5d5cb783e.webp" alt="Image"></p><h2 id="Spring-Boot-console"><a href="#Spring-Boot-console" class="headerlink" title="Spring Boot console"></a>Spring Boot console</h2><p><img src="/./image/%E5%AF%A6%E7%8F%BEToken_Based%E7%9A%84Single_Sign_On(SSO)/c906f140-7ad3-4fd5-9c0d-f5440633255d.webp" alt="Image"></p><h2 id="Keycloak-1"><a href="#Keycloak-1" class="headerlink" title="Keycloak"></a>Keycloak</h2><p><img src="/./image/%E5%AF%A6%E7%8F%BEToken_Based%E7%9A%84Single_Sign_On(SSO)/a38cf6e6-6a62-4fa5-b738-96473ad43728.webp" alt="Image"></p><h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>本篇我們實作了Token Based的SSO，Access-token就像一張一票玩到底的通行證一樣，讓使用者可以只輸入一次帳號密碼，就可以存取所有的服務，很適合用在企業的內部系統當中。</p>]]></content>
    
    
    <categories>
      
      <category>Spring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring Boot</tag>
      
      <tag>Spring Security</tag>
      
      <tag>Keyclaok</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring-Session With Redis 達到Session 集中式處理</title>
    <link href="/2024/08/12/Spring-Session%20With%20Redis%20%E9%81%94%E5%88%B0Session%20%E9%9B%86%E4%B8%AD%E5%BC%8F%E8%99%95%E7%90%86/"/>
    <url>/2024/08/12/Spring-Session%20With%20Redis%20%E9%81%94%E5%88%B0Session%20%E9%9B%86%E4%B8%AD%E5%BC%8F%E8%99%95%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言:"></a>前言:</h1><p>我們都知道session是放在application端，當application 中斷&#x2F;重啟時或是browser關閉&#x2F;登出時，session就會消失。筆者工作上是使用Keycloak做為Authenticaion server，並採取以下常見的架構。</p><p><img src="/./image/Spring-Session_With_Redis_%E9%81%94%E5%88%B0Session_%E9%9B%86%E4%B8%AD%E5%BC%8F%E8%99%95%E7%90%86/2654cfb0-c527-4c64-99e5-3473cb1dcf30.webp" alt="Image"></p><p>由於Nginx預設附載平衡機制是使用(round robin)，會導致一種情境: 當使用者透過Tomcat 1登入Server後獲得一組session，但是因為附載平衡而導到Tomcat 2。這時因為Tomcat 2中沒有Tomcat 1的session而導致認證失敗(401)。這就是經典的Session分布式一致性 問題。</p><h1 id="解決辦法-Session-集中式處理"><a href="#解決辦法-Session-集中式處理" class="headerlink" title="解決辦法 - Session 集中式處理"></a>解決辦法 - Session 集中式處理</h1><p>使用Spring Session 將Application傳給前端的session先儲存到Redis當中，當前端只要帶著這個session去訪問Application，Application就會先去跟Redis確認session是否存在，若存在就會放行不需再次驗證，若不存在就會重新導到Keycloak進行認證。</p><p>這麼做除了可以解決Session分布式一致性問題 之外還有另外一個優點，及使Application重啟&#x2F;中斷也不會因為session消失，而導致使用者需要重新進行認證。</p><p><img src="/./image/Spring-Session_With_Redis_%E9%81%94%E5%88%B0Session_%E9%9B%86%E4%B8%AD%E5%BC%8F%E8%99%95%E7%90%86/59b558cd-adf4-4097-83ae-3b8491f0a685.webp" alt="Image"></p><p>除了Session 集中式處理還有其他三種處理方式，可參考:</p><p><a href="https://mp.weixin.qq.com/s?__biz=MzkzODE3OTI0Ng==&mid=2247490886&idx=1&sn=415756e141a6902e128fbfda0a935ad8&source=41#wechat_redirect">https://mp.weixin.qq.com/s?__biz&#x3D;MzkzODE3OTI0Ng&#x3D;&#x3D;&amp;mid&#x3D;2247490886&amp;idx&#x3D;1&amp;sn&#x3D;415756e141a6902e128fbfda0a935ad8&amp;source&#x3D;41#wechat_redirect</a></p><h1 id="實作說明"><a href="#實作說明" class="headerlink" title="實作說明"></a>實作說明</h1><p>Spring有提供Spring-Session來實現Session 集中式處理，Spring-Session的實現方式有兩種:</p><ol><li><p>在application.properties中加入spring-session設定</p></li><li><p>使用@EnableRedisHttpSession annotation</p></li></ol><p>以上兩種方式不能同時使用，@EnableRedisHttpSession設定的優先度大於pplication.properties</p><p>可參考官方文件:</p><p><a href="https://docs.spring.io/spring-session/reference/guides/boot-redis.html">https://docs.spring.io/spring-session/reference/guides/boot-redis.html</a> </p><p><a href="https://docs.spring.io/spring-session/reference/http-session.html#httpsession">https://docs.spring.io/spring-session/reference/http-session.html#httpsession</a> </p><h2 id="pom"><a href="#pom" class="headerlink" title="pom"></a>pom</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.session<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-session-data-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="1-使用application-properties"><a href="#1-使用application-properties" class="headerlink" title="1. 使用application.properties"></a>1. 使用application.properties</h1><h2 id="application-properties"><a href="#application-properties" class="headerlink" title="application.properties"></a>application.properties</h2><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-comment"># Session timeout. If a duration suffix is not specified, seconds is used.</span><br><span class="hljs-attr">server.servlet.session.timeout</span>=<span class="hljs-number">5</span>m<br><br><span class="hljs-comment"># Sessions flush mode.</span><br><span class="hljs-comment">#spring.session.redis.flush-mode=on_save</span><br><br><span class="hljs-comment"># Namespace for keys used to store sessions.</span><br><span class="hljs-attr">spring.session.redis.namespace</span>=spring:session<br></code></pre></td></tr></table></figure><h2 id="server-servlet-session"><a href="#server-servlet-session" class="headerlink" title="server.servlet.session"></a>server.servlet.session</h2><p>定義了 session 的過期時間，session過期時會redis的key也會expire。若時間單位沒有指定，則預設以秒(s)為單位。</p><h2 id="spring-session-redis-flush"><a href="#spring-session-redis-flush" class="headerlink" title="spring.session.redis.flush"></a>spring.session.redis.flush</h2><p>session flush mode 定義了 Spring Session 何時將 session 資訊寫入 Redis，常用的有兩種模式:</p><h3 id="on-save"><a href="#on-save" class="headerlink" title="on_save"></a>on_save</h3><p>只有在 session  update、save時，才會將 session 資訊同步寫入 Redis。</p><h3 id="immediate"><a href="#immediate" class="headerlink" title="immediate"></a>immediate</h3><p>每次 request 結束後立即將 session 資訊寫入 Redis，不管該 session 是否有變更。這保證了資料的一致性，但代價是增加了 Redis 的I&#x2F;O。</p><h2 id="spring-session-redis-namespace"><a href="#spring-session-redis-namespace" class="headerlink" title="spring.session.redis.namespace"></a>spring.session.redis.namespace</h2><p>定義 session 儲存於redis的 key 命名方式</p><h1 id="2-使用-EnableRedisHttpSession-annotation"><a href="#2-使用-EnableRedisHttpSession-annotation" class="headerlink" title="2. 使用@EnableRedisHttpSession annotation"></a>2. 使用@EnableRedisHttpSession annotation</h1><h2 id="RedisConfig"><a href="#RedisConfig" class="headerlink" title="RedisConfig"></a>RedisConfig</h2><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@Configuration</span><br><span class="hljs-variable">@EnableRedisHttpSession</span>(redisNamespace = <span class="hljs-string">&quot;test:session&quot;</span>)<br>public class RedisConfig &#123;<br><br>    <span class="hljs-variable">@Bean</span><br>    public LettuceConnectionFactory <span class="hljs-built_in">connectionFactory</span>() &#123;<br>        <span class="hljs-selector-tag">return</span> <span class="hljs-selector-tag">new</span> <span class="hljs-selector-tag">LettuceConnectionFactory</span>();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="驗證"><a href="#驗證" class="headerlink" title="驗證"></a>驗證</h1><h2 id="準備事項"><a href="#準備事項" class="headerlink" title="準備事項"></a>準備事項</h2><h3 id="html"><a href="#html" class="headerlink" title="html"></a>html</h3><p>這邊我先準備了另外一個Spring Boot程式，並在pom檔中加入thymeleaf dependency，</p><p>並使用8082 port啟動</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;zh-Hant-TW&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://localhost:8081/&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;authLink&quot;</span>&gt;</span>登入驗證<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/./image/Spring-Session_With_Redis_%E9%81%94%E5%88%B0Session_%E9%9B%86%E4%B8%AD%E5%BC%8F%E8%99%95%E7%90%86/ffef3b21-498e-4263-a09d-2e2813ea945b.webp" alt="Image"></p><h3 id="Spring-Security"><a href="#Spring-Security" class="headerlink" title="Spring Security"></a>Spring Security</h3><p>撰寫一支Spring Security程式，並使用8081 port啟動</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><code class="hljs livescript">package com.example.demo_oauth.config;<br><br><br><span class="hljs-keyword">import</span> org.apache.hc.client5.http.classic.HttpClient;<br><span class="hljs-keyword">import</span> org.apache.hc.client5.http.impl.classic.HttpClients;<br><span class="hljs-keyword">import</span> org.apache.hc.client5.http.impl.io.PoolingHttpClientConnectionManagerBuilder;<br><span class="hljs-keyword">import</span> org.apache.hc.client5.http.io.HttpClientConnectionManager;<br><span class="hljs-keyword">import</span> org.apache.hc.client5.http.ssl.SSLConnectionSocketFactory;<br><span class="hljs-keyword">import</span> org.apache.hc.client5.http.ssl.SSLConnectionSocketFactoryBuilder;<br><span class="hljs-keyword">import</span> org.apache.hc.client5.http.ssl.TrustAllStrategy;<br><span class="hljs-keyword">import</span> org.apache.hc.core5.ssl.SSLContexts;<br><br><span class="hljs-keyword">import</span> java.security.KeyManagementException;<br><span class="hljs-keyword">import</span> java.security.KeyStoreException;<br><span class="hljs-keyword">import</span> java.security.NoSuchAlgorithmException;<br><br><span class="hljs-keyword">import</span> javax.net.ssl.SSLContext;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.http.client.ClientHttpRequestFactory;<br><span class="hljs-keyword">import</span> org.springframework.http.client.HttpComponentsClientHttpRequestFactory;<br><span class="hljs-keyword">import</span> org.springframework.security.config.Customizer;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;<br><span class="hljs-keyword">import</span> org.springframework.security.oauth2.jwt.JwtDecoder;<br><span class="hljs-keyword">import</span> org.springframework.security.oauth2.jwt.NimbusJwtDecoder;<br><span class="hljs-keyword">import</span> org.springframework.security.oauth2.server.resource.authentication.JwtAuthenticationConverter;<br><span class="hljs-keyword">import</span> org.springframework.security.web.SecurityFilterChain;<br><span class="hljs-keyword">import</span> org.springframework.web.client.RestTemplate;<br><span class="hljs-keyword">import</span> org.springframework.web.cors.CorsConfiguration;<br><span class="hljs-keyword">import</span> org.springframework.web.cors.CorsConfigurationSource;<br><span class="hljs-keyword">import</span> org.springframework.web.cors.UrlBasedCorsConfigurationSource;<br><br>@Configuration<br>@EnableMethodSecurity<br>@EnableWebSecurity<br>public <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityConfig</span> &#123;<br><br>    @Value(<span class="hljs-string">&quot;$&#123;spring.security.oauth2.client.provider.keycloak.issuer-uri&#125;&quot;</span>)<br>    private <span class="hljs-built_in">String</span> issuerUri;<br><br>    @Autowired<br>    private JwtAuthenticationConverter jwtAuthenticationConverter;<br><br>    @Bean<br>    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception &#123;<br>        http.csrf(csrf -&gt; csrf.disable())<br>            .cors(cors -&gt; cors<br>                    .configurationSource(corsConfigurationSource()));<br><br>        http.authorizeHttpRequests(authorize -&gt; authorize.requestMatchers(<span class="hljs-string">&quot;/login&quot;</span>).permitAll().anyRequest().authenticated())<br><span class="hljs-regexp">//                .oauth2ResourceServer((oauth2) -&gt; oauth2.jwt(jwt -&gt; jwt.decoder(jwtDecoder()).jwtAuthenticationConverter(jwtAuthenticationConverter))) //</span> 使用jwtDecoder向Author Server驗證Accesstion，並使用自定義的jwtConverter，jwt decode後將權限收集進Collection&lt;? <span class="hljs-keyword">extends</span> GrantedAuthority&gt;中<br>                .oauth2ResourceServer<span class="hljs-function"><span class="hljs-params">((oauth2) -&gt; oauth2.jwt(jwt -&gt; jwt.decoder(jwtDecoder())))</span> // 驗證 <span class="hljs-title">access</span> <span class="hljs-title">token</span></span><br><span class="hljs-function">                .<span class="hljs-title">oauth2Login</span><span class="hljs-params">(Customizer.withDefaults())</span>; // 使用表單登入</span><br><span class="hljs-function"></span><br><span class="hljs-function">        <span class="hljs-title">http</span>.<span class="hljs-title">oauth2Login</span><span class="hljs-params">(oauth2 -&gt; oauth2.defaultSuccessUrl(<span class="hljs-string">&quot;/checkLogin&quot;</span>, <span class="hljs-literal">true</span>))</span>;</span><br><span class="hljs-function">        <span class="hljs-title">return</span> <span class="hljs-title">http</span>.<span class="hljs-title">build</span><span class="hljs-params">()</span>;</span><br><span class="hljs-function">    &#125;</span><br><span class="hljs-function"></span><br><span class="hljs-function">    <span class="hljs-title">private</span> <span class="hljs-title">JwtDecoder</span> <span class="hljs-title">jwtDecoder</span><span class="hljs-params">()</span> &#123;</span><br><span class="hljs-function">        <span class="hljs-title">RestTemplate</span> <span class="hljs-title">restTemplate</span> = <span class="hljs-title">new</span> <span class="hljs-title">RestTemplate</span><span class="hljs-params">()</span>;</span><br><span class="hljs-function">        <span class="hljs-title">restTemplate</span>.<span class="hljs-title">setRequestFactory</span><span class="hljs-params">(trustAllClientHttpRequestFactory())</span>;</span><br><span class="hljs-function"></span><br><span class="hljs-function">        <span class="hljs-title">return</span> <span class="hljs-title">NimbusJwtDecoder</span>.<span class="hljs-title">withIssuerLocation</span><span class="hljs-params">(issuerUri)</span>.<span class="hljs-title">restOperations</span><span class="hljs-params">(restTemplate)</span>.<span class="hljs-title">build</span><span class="hljs-params">()</span>;</span><br><span class="hljs-function">    &#125;</span><br><span class="hljs-function"></span><br><span class="hljs-function">    <span class="hljs-title">private</span> <span class="hljs-title">ClientHttpRequestFactory</span> <span class="hljs-title">trustAllClientHttpRequestFactory</span><span class="hljs-params">()</span> &#123;</span><br><span class="hljs-function">        <span class="hljs-title">SSLContext</span> <span class="hljs-title">sslcontext</span> = <span class="hljs-title">null</span>;</span><br><span class="hljs-function">        <span class="hljs-title">try</span> &#123;</span><br><span class="hljs-function">            <span class="hljs-title">sslcontext</span> = <span class="hljs-title">SSLContexts</span>.<span class="hljs-title">custom</span><span class="hljs-params">()</span>.<span class="hljs-title">loadTrustMaterial</span><span class="hljs-params">(<span class="hljs-literal">null</span>, <span class="hljs-keyword">new</span> TrustAllStrategy())</span>.<span class="hljs-title">build</span><span class="hljs-params">()</span>;</span><br><span class="hljs-function">        &#125; <span class="hljs-title">catch</span> <span class="hljs-params">(KeyManagementException | NoSuchAlgorithmException | KeyStoreException e)</span> &#123;</span><br><span class="hljs-function">            <span class="hljs-title">e</span>.<span class="hljs-title">printStackTrace</span><span class="hljs-params">()</span>;</span><br><span class="hljs-function">        &#125;</span><br><span class="hljs-function">        <span class="hljs-title">SSLConnectionSocketFactory</span> <span class="hljs-title">sslSocketFactory</span> = <span class="hljs-title">SSLConnectionSocketFactoryBuilder</span>.<span class="hljs-title">create</span><span class="hljs-params">()</span>.<span class="hljs-title">setSslContext</span><span class="hljs-params">(sslcontext)</span>.<span class="hljs-title">build</span><span class="hljs-params">()</span>;</span><br><span class="hljs-function">        <span class="hljs-title">HttpClientConnectionManager</span> <span class="hljs-title">connectionManager</span> = <span class="hljs-title">PoolingHttpClientConnectionManagerBuilder</span>.<span class="hljs-title">create</span><span class="hljs-params">()</span>.<span class="hljs-title">setSSLSocketFactory</span><span class="hljs-params">(sslSocketFactory)</span>.<span class="hljs-title">build</span><span class="hljs-params">()</span>;</span><br><span class="hljs-function">        <span class="hljs-title">HttpClient</span> <span class="hljs-title">httlClient</span> = <span class="hljs-title">HttpClients</span>.<span class="hljs-title">custom</span><span class="hljs-params">()</span>.<span class="hljs-title">setConnectionManager</span><span class="hljs-params">(connectionManager)</span>.<span class="hljs-title">evictExpiredConnections</span><span class="hljs-params">()</span>.<span class="hljs-title">build</span><span class="hljs-params">()</span>;</span><br><span class="hljs-function"></span><br><span class="hljs-function">        <span class="hljs-title">ClientHttpRequestFactory</span> <span class="hljs-title">clientHttpRequestFactory</span> = <span class="hljs-title">new</span> <span class="hljs-title">HttpComponentsClientHttpRequestFactory</span><span class="hljs-params">(httlClient)</span>;</span><br><span class="hljs-function">        <span class="hljs-title">return</span> <span class="hljs-title">clientHttpRequestFactory</span>;</span><br><span class="hljs-function">    &#125;</span><br><span class="hljs-function"></span><br><span class="hljs-function">    @<span class="hljs-title">Bean</span></span><br><span class="hljs-function">    <span class="hljs-title">CorsConfigurationSource</span> <span class="hljs-title">corsConfigurationSource</span><span class="hljs-params">()</span> &#123;</span><br><span class="hljs-function">        <span class="hljs-title">CorsConfiguration</span> <span class="hljs-title">config</span> = <span class="hljs-title">new</span> <span class="hljs-title">CorsConfiguration</span><span class="hljs-params">()</span>;</span><br><span class="hljs-function"></span><br><span class="hljs-function">        <span class="hljs-title">config</span>.<span class="hljs-title">addAllowedHeader</span><span class="hljs-params">(<span class="hljs-string">&quot;*&quot;</span>)</span>;</span><br><span class="hljs-function">        <span class="hljs-title">config</span>.<span class="hljs-title">addAllowedMethod</span><span class="hljs-params">(<span class="hljs-string">&quot;*&quot;</span>)</span>;</span><br><span class="hljs-function">        <span class="hljs-title">config</span>.<span class="hljs-title">addAllowedOriginPattern</span><span class="hljs-params">(<span class="hljs-string">&quot;*&quot;</span>)</span>;</span><br><span class="hljs-function">        <span class="hljs-title">config</span>.<span class="hljs-title">setAllowCredentials</span><span class="hljs-params">(<span class="hljs-literal">true</span>)</span>;</span><br><span class="hljs-function">        <span class="hljs-title">config</span>.<span class="hljs-title">addExposedHeader</span><span class="hljs-params">(<span class="hljs-string">&quot;*&quot;</span>)</span>;</span><br><span class="hljs-function">        <span class="hljs-title">config</span>.<span class="hljs-title">setMaxAge</span><span class="hljs-params">(<span class="hljs-number">1800</span>L)</span>;</span><br><span class="hljs-function"></span><br><span class="hljs-function">        <span class="hljs-title">UrlBasedCorsConfigurationSource</span> <span class="hljs-title">source</span> = <span class="hljs-title">new</span> <span class="hljs-title">UrlBasedCorsConfigurationSource</span><span class="hljs-params">()</span>;</span><br><span class="hljs-function">        <span class="hljs-title">source</span>.<span class="hljs-title">registerCorsConfiguration</span><span class="hljs-params">(<span class="hljs-string">&quot;/**&quot;</span>, config)</span>;</span><br><span class="hljs-function"></span><br><span class="hljs-function">        <span class="hljs-title">return</span> <span class="hljs-title">source</span>;</span><br><span class="hljs-function">    &#125;</span><br><span class="hljs-function">&#125;</span><br><span class="hljs-function"></span><br></code></pre></td></tr></table></figure><h2 id="進行驗證"><a href="#進行驗證" class="headerlink" title="進行驗證"></a>進行驗證</h2><p>當我們點擊html的進行驗證時，會跳轉到keycloak驗證畫面，此時cookie已經獲得spring-session所產生的session，並且此時Redis上已能看到session寫入。</p><p><img src="/./image/Spring-Session_With_Redis_%E9%81%94%E5%88%B0Session_%E9%9B%86%E4%B8%AD%E5%BC%8F%E8%99%95%E7%90%86/7fbb7c17-dab1-4b36-87a0-19b05d9327f5.webp" alt="Image"></p><p><img src="/./image/Spring-Session_With_Redis_%E9%81%94%E5%88%B0Session_%E9%9B%86%E4%B8%AD%E5%BC%8F%E8%99%95%E7%90%86/aa9ba66d-7258-4310-943f-c71bb2f850f1.webp" alt="Image"></p><p><img src="/./image/Spring-Session_With_Redis_%E9%81%94%E5%88%B0Session_%E9%9B%86%E4%B8%AD%E5%BC%8F%E8%99%95%E7%90%86/afd4cab7-69cb-4be4-8b2a-f25f437e6a44.webp" alt="Image"></p><p>我們會發現為什麼Browser和Redis中的session-id匹配不起來? 原因是因為Spring Session在產生session-id時，就已經先將session使用Base64 Encode起來再回傳給browser，所以我們可以透過base64 decode去解碼，就會發現跟redis內儲存的session-id是一致的。</p><p><img src="/./image/Spring-Session_With_Redis_%E9%81%94%E5%88%B0Session_%E9%9B%86%E4%B8%AD%E5%BC%8F%E8%99%95%E7%90%86/2394e891-d1e6-4076-a1f2-616597f8b5cf.webp" alt="Image"></p><p>補充:</p><p>spring-session是透過<code>DefaultCookieSerializer</code> 這個class來使用base64 endcode及decode</p><p><img src="/./image/Spring-Session_With_Redis_%E9%81%94%E5%88%B0Session_%E9%9B%86%E4%B8%AD%E5%BC%8F%E8%99%95%E7%90%86/4add5a52-b2a7-4377-ab44-310eb4b82a25.webp" alt="Image"></p><p><img src="/./image/Spring-Session_With_Redis_%E9%81%94%E5%88%B0Session_%E9%9B%86%E4%B8%AD%E5%BC%8F%E8%99%95%E7%90%86/6c6f7fba-d7f4-4d0d-a8a5-81694eab3851.webp" alt="Image"></p><p>此時我們們可以測試就算將Application重啟，只要我們browser不關閉，就能保持登入而不會跳轉到Keyloak驗證。</p><p>因為本次實驗我們設置session timeout 時間為5分鐘而已，當session timeout後我們可以看到redis的key已經被清空了</p><p><img src="/./image/Spring-Session_With_Redis_%E9%81%94%E5%88%B0Session_%E9%9B%86%E4%B8%AD%E5%BC%8F%E8%99%95%E7%90%86/855386ad-4727-4792-a3b4-52e191438d54.webp" alt="Image"></p><p>此時我們重新訪問頁面就必須重新登入Keycloak進行驗證</p><p><img src="/./image/Spring-Session_With_Redis_%E9%81%94%E5%88%B0Session_%E9%9B%86%E4%B8%AD%E5%BC%8F%E8%99%95%E7%90%86/eb271d47-cc01-4830-91cc-60d6e01b04e8.webp" alt="Image"></p>]]></content>
    
    
    <categories>
      
      <category>Spring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
      <tag>Spring Boot</tag>
      
      <tag>Spring Security</tag>
      
      <tag>Keyclaok</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Minikube部屬Ansible AWX</title>
    <link href="/2024/08/07/Minikube%E9%83%A8%E5%B1%ACAnsible%20AWX/"/>
    <url>/2024/08/07/Minikube%E9%83%A8%E5%B1%ACAnsible%20AWX/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>繼上一篇我們部屬完Minikube後，本篇目標接著部屬Ansible AWX到Minikube，並且透過Ansible AWX API來啟動template</p><h1 id="安裝Ansible-AWX"><a href="#安裝Ansible-AWX" class="headerlink" title="安裝Ansible AWX"></a>安裝Ansible AWX</h1><ol><li>安裝helm&amp;設定環境變數</li></ol><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">curl</span> https://get.helm.sh/helm-v3.<span class="hljs-number">10</span>.<span class="hljs-number">2</span>-windows-amd64.tar.gz<br></code></pre></td></tr></table></figure><ol><li>依序執行以下指令</li></ol><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">helm repo <span class="hljs-keyword">add</span> awx-<span class="hljs-keyword">operator</span> https://ansible.github.io/awx-<span class="hljs-keyword">operator</span>/<br>helm install — generate-<span class="hljs-type">name</span> awx-<span class="hljs-keyword">operator</span>/awx-<span class="hljs-keyword">operator</span><br></code></pre></td></tr></table></figure><ol><li>建立awx-demo.yaml 並執行</li></ol><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">apiVersion:</span> awx.ansible.com/v1beta1<br><span class="hljs-symbol">kind:</span> AWX<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> awx-demo<br><span class="hljs-symbol">spec:</span><br><span class="hljs-symbol">  service_type:</span> nodeport<br><br></code></pre></td></tr></table></figure><p>kubectl apply -f awx-demo.yaml</p><ol><li>確認服務啟動</li></ol><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">kubectl <span class="hljs-built_in">get</span> svc<br></code></pre></td></tr></table></figure><p><img src="/./image/Minikube%E9%83%A8%E5%B1%ACAnsible_AWX/7e2249b4-e477-44c6-9926-8621ecdb5f1d.webp" alt="Image"></p><p><img src="/./image/Minikube%E9%83%A8%E5%B1%ACAnsible_AWX/83e26c43-93a7-4cd5-966d-b7ae2f7773a0.webp" alt="Image"></p><ol><li>獲取minikube pod service Url:</li></ol><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">minikube service <span class="hljs-comment">--url &lt;service_name&gt;</span><br></code></pre></td></tr></table></figure><p><img src="/./image/Minikube%E9%83%A8%E5%B1%ACAnsible_AWX/d20ec0ff-2c67-4799-94e6-7b687ab455ee.webp" alt="Image"></p><ol><li>使用default admin登入AWX</li></ol><p>ID: admin</p><p>密碼使用以下指令並，並將結果透過base64 decode獲得</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">kubectl <span class="hljs-keyword">get</span> secret awx-demo-<span class="hljs-keyword">admin</span>-<span class="hljs-keyword">password</span> -o jsonpath=’&#123;.data.<span class="hljs-keyword">password</span>&#125;’<span class="hljs-comment">-- getpassword</span><br></code></pre></td></tr></table></figure><p><img src="/./image/Minikube%E9%83%A8%E5%B1%ACAnsible_AWX/30a5698d-f782-44cb-9ecc-5c31b9155357.webp" alt="Image"></p><p><img src="/./image/Minikube%E9%83%A8%E5%B1%ACAnsible_AWX/10f0b5a9-cde5-43ee-9ae4-f44bd12ee9d3.webp" alt="Image"></p><p><img src="/./image/Minikube%E9%83%A8%E5%B1%ACAnsible_AWX/96422f21-4ea1-4fa1-91ed-05722e3f7ab1.webp" alt="Image"></p><p>本文部屬是參考以下文章:</p><p><a href="https://medium.com/@caceresabelanibal/install-ansible-awx-on-kubernetes-docker-desktop-for-windows-97406dd64ab5">https:&#x2F;&#x2F;medium.com&#x2F;@caceresabelanibal&#x2F;install-ansible-awx-on-kubernetes-docker-desktop-for-windows-97406dd64ab5</a></p><h1 id="AWX-簡介"><a href="#AWX-簡介" class="headerlink" title="AWX 簡介"></a>AWX 簡介</h1><h2 id="Project"><a href="#Project" class="headerlink" title="Project"></a>Project</h2><p><img src="/./image/Minikube%E9%83%A8%E5%B1%ACAnsible_AWX/0f2f421d-549f-42dd-b3b6-66feed709377.webp" alt="Image"></p><p>Ansible playbook 的邏輯集合。</p><p>我們通過以下兩種方式管理 playbook 和 playbook 目錄：</p><ol><li><p>將placybook手動放置在伺服器上的專案基礎路徑下，預設路徑是&#x2F;var&#x2F;lib&#x2F;awx&#x2F;projects(可變更)</p></li><li><p>將 playbook 放置到 AWX 支援的源代碼管理 (SCM) 系統中，包括 Git、Subversion 和 Red Hat Insights。</p></li></ol><p>詳細可參考官方文件:</p><p><a href="https://ansible.readthedocs.io/projects/awx/en/latest/userguide/projects.html">https://ansible.readthedocs.io/projects/awx/en/latest/userguide/projects.html</a></p><h2 id="Inventories"><a href="#Inventories" class="headerlink" title="Inventories"></a>Inventories</h2><p><img src="/./image/Minikube%E9%83%A8%E5%B1%ACAnsible_AWX/cb588083-5c6e-47ab-92e1-0f4c337d41e2.webp" alt="Image"></p><p>Inventories是一個主機的集合，這些主機是執行作業的對象，與 Ansible 清單文件相同。清單被劃分為多個組，這些組包含實際的主機。組可以手動添加，通過在 AWX 中輸入主機名稱，或從其支持的雲端供應商獲取。</p><p>詳細可參考官方文件:</p><p><a href="https://ansible.readthedocs.io/projects/awx/en/latest/userguide/inventories.html">https://ansible.readthedocs.io/projects/awx/en/latest/userguide/inventories.html</a></p><h2 id="Job-Templates"><a href="#Job-Templates" class="headerlink" title="Job Templates"></a>Job Templates</h2><p><img src="/./image/Minikube%E9%83%A8%E5%B1%ACAnsible_AWX/81db3991-b6df-4fb3-8a49-82bf8f7d757c.webp" alt="Image"></p><p>AWX 的模板（Template）是一個定義和參數集，用於運行 Ansible 作業。模板在多次執行相同作業時非常有用，並且有助於重用 Ansible playbook 內容以及團隊之間的協作。以下是有關 AWX 模板的一些詳細介紹：</p><h3 id="作業範本的功能"><a href="#作業範本的功能" class="headerlink" title="作業範本的功能"></a>作業範本的功能</h3><ol><li>標準化執行：</li></ol><ul><li>作業範本定義了如何運行特定的 Ansible 作業，包括指定的 playbook、inventory、credential 等。</li><li>範本允許您多次重複執行相同的作業，而不需要每次都重新配置參數。</li></ul><ol start="2"><li>重用和協作：</li></ol><ul><li>範本促進了 playbook 內容的重用，不同的團隊成員可以共享和協作使用相同的範本。</li><li>這樣可以確保操作的一致性和可靠性。</li></ul><ol start="3"><li>自動化和編排：</li></ol><ul><li>範本可以用於自動化工作流的一部分，並且可以與其他範本或作業鏈接起來，形成複雜的自動化編排。</li></ul><h3 id="如何使用模板"><a href="#如何使用模板" class="headerlink" title="如何使用模板"></a>如何使用模板</h3><ol><li>創建模板：</li></ol><ul><li>您可以通過 AWX 的 Web 界面創建新的作業範本。</li><li>創建過程中需要選擇 playbook、inventory、credential，以及其他運行參數。</li></ul><ol start="2"><li>管理模板：</li></ol><ul><li>AWX 提供了一個範本菜單，可以查看當前所有可用的作業範本。</li><li>預設視圖是折疊的（簡潔模式），顯示範本名稱、範本類型和最後一次運行作業的時間戳。</li><li>您可以點擊展開（每個條目旁邊的箭頭）以查看更多資訊，或根據範本的各種字段和屬性進行搜索和排序。</li></ul><ol start="3"><li>運行模板：</li></ol><ul><li>當您需要執行作業時，只需選擇相應的範本，並點擊運行。</li><li>您還可以為範本設置定時運行計劃，實現定期自動化作業。<br>參考官方文件:</li></ul><p><a href="https://ansible.readthedocs.io/projects/awx/en/latest/userguide/job_templates.html">https://ansible.readthedocs.io/projects/awx/en/latest/userguide/job_templates.html</a></p><h1 id="操作AWX-API啟動Template"><a href="#操作AWX-API啟動Template" class="headerlink" title="操作AWX API啟動Template"></a>操作AWX API啟動Template</h1><p>當我們輸入<a href="http://domain:port/api/v2，就可以看到AWX自己的原生REST">http://domain:port/api/v2，就可以看到AWX自己的原生REST</a> API</p><p><img src="/./image/Minikube%E9%83%A8%E5%B1%ACAnsible_AWX/5b594f6b-949d-4561-8ecc-4278640b1322.webp" alt="Image"></p><h2 id="STEPS"><a href="#STEPS" class="headerlink" title="STEPS"></a>STEPS</h2><ol><li>POST api&#x2F;v2&#x2F;tokens</li></ol><p> 取得Token</p><p><img src="/./image/Minikube%E9%83%A8%E5%B1%ACAnsible_AWX/e10dcd97-b01a-4a26-b670-6417097d99e5.webp" alt="Image"></p><ol><li>GET api&#x2F;v2&#x2F;job_templates</li></ol><p>帶入1. 的Token取得 templates list</p><p><img src="/./image/Minikube%E9%83%A8%E5%B1%ACAnsible_AWX/4b7389ae-cd21-4159-bd93-86c986f4e525.webp" alt="Image"></p><ol><li>POST api&#x2F;v2&#x2F;job_templates&#x2F;{id}&#x2F;launch&#x2F;</li></ol><p>帶入1. 的Token、2.獲得的templateId啟動 template</p><p><img src="/./image/Minikube%E9%83%A8%E5%B1%ACAnsible_AWX/e95ac213-a613-46d4-a6e3-b155269c41a4.webp" alt="Image"></p><p><img src="/./image/Minikube%E9%83%A8%E5%B1%ACAnsible_AWX/09606e68-f4e2-40c9-ae81-d8a509c705a0.webp" alt="Image"></p><p><img src="/./image/Minikube%E9%83%A8%E5%B1%ACAnsible_AWX/070a57bb-4a8a-4f87-8834-f142b9dd6c89.webp" alt="Image"></p>]]></content>
    
    
    <categories>
      
      <category>Ansible</category>
      
    </categories>
    
    
    <tags>
      
      <tag>AWX</tag>
      
      <tag>K8S</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用Minikube + Ansible部屬微服務</title>
    <link href="/2024/08/04/%E4%BD%BF%E7%94%A8Minikube%20+%20Ansible%E9%83%A8%E5%B1%AC%E5%BE%AE%E6%9C%8D%E5%8B%99/"/>
    <url>/2024/08/04/%E4%BD%BF%E7%94%A8Minikube%20+%20Ansible%E9%83%A8%E5%B1%AC%E5%BE%AE%E6%9C%8D%E5%8B%99/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本篇使用Podman並使用minikube作為k8s cluster，並在minikube上啟動一個ubuntu pod並在裡面安裝Ansible，目標透過Ansible在minikube啟動一個redis pod。</p><h1 id="什麼是-Minikube"><a href="#什麼是-Minikube" class="headerlink" title="什麼是 Minikube"></a>什麼是 Minikube</h1><p><a href="https://github.com/kubernetes/minikube">Minikube</a> 是由 Google 發布的一個輕量級工具。讓開發者可以在本機上輕易架設一個 Kubernetes Cluster，快速上手 Kubernetes 的指令與環境。<a href="https://github.com/kubernetes/minikube">Minikube</a> 會在本機上跑起一個 virtual machine，並且在這 VM 裡建立一個 signle-node Kubernetes Cluster，本身並不支援 HA (High availability)，也不推薦在實際應用上運行。</p><h1 id="安裝Minikube"><a href="#安裝Minikube" class="headerlink" title="安裝Minikube"></a>安裝Minikube</h1><h2 id="安裝Podman並安裝Minikube-Plugin"><a href="#安裝Podman並安裝Minikube-Plugin" class="headerlink" title="安裝Podman並安裝Minikube Plugin"></a>安裝Podman並安裝Minikube Plugin</h2><p>Podman安裝與設定可參考以下文章:</p><p><a href="https://medium.com/@jieshiun/%E5%A6%82%E4%BD%95%E5%9C%A8-windows-%E4%BD%BF%E7%94%A8-podman-desktop-%E5%8F%96%E4%BB%A3-docker-desktop-eca30e4ad308">https:&#x2F;&#x2F;medium.com&#x2F;@jieshiun&#x2F;如何在-windows-使用-podman-desktop-取代-docker-desktop-eca30e4ad308</a></p><p><img src="/./image/%E4%BD%BF%E7%94%A8Minikube_+_Ansible%E9%83%A8%E5%B1%AC%E5%BE%AE%E6%9C%8D%E5%8B%99/f1378bee-5841-4e19-89d0-d461e159a1dc.webp" alt="Image"></p><p>安裝完Minikube 可在Resource中看到</p><p><img src="/./image/%E4%BD%BF%E7%94%A8Minikube_+_Ansible%E9%83%A8%E5%B1%AC%E5%BE%AE%E6%9C%8D%E5%8B%99/211f417d-3b5e-41ff-b0e4-05ea2398772f.webp" alt="Image"></p><h2 id="運行Minikube"><a href="#運行Minikube" class="headerlink" title="運行Minikube"></a>運行Minikube</h2><ol><li><p>開啟cmd 並輸入指令</p><pre><code class="hljs">minikube start --driver=podman --container-runtime=cri-o (啟動Minikube)minikube dashboard (開啟dashboard 頁面)</code></pre></li><li><p>打開browser並開啟儀表版: <a href="http://127.0.0.1:56919/api/v1/namespaces/kubernetes-dashboard/services/http:kubernetes-dashboard:/proxy">http://127.0.0.1:56919/api/v1/namespaces/kubernetes-dashboard/services/http:kubernetes-dashboard:/proxy</a></p></li></ol><p><img src="/./image/%E4%BD%BF%E7%94%A8Minikube_+_Ansible%E9%83%A8%E5%B1%AC%E5%BE%AE%E6%9C%8D%E5%8B%99/59280206-a930-4ef1-b92e-80bec7bb5e13.webp" alt="Image"></p><ol><li>在Podman上也能看到minikube已運行</li></ol><p><img src="/./image/%E4%BD%BF%E7%94%A8Minikube_+_Ansible%E9%83%A8%E5%B1%AC%E5%BE%AE%E6%9C%8D%E5%8B%99/bea93b06-9f59-444e-9aa5-e29d7f2ab13a.webp" alt="Image"></p><h1 id="起動Ubuntu-Pod並安裝Ansible"><a href="#起動Ubuntu-Pod並安裝Ansible" class="headerlink" title="起動Ubuntu Pod並安裝Ansible"></a>起動Ubuntu Pod並安裝Ansible</h1><h2 id="建置ubuntu-yml檔"><a href="#建置ubuntu-yml檔" class="headerlink" title="建置ubuntu.yml檔"></a>建置ubuntu.yml檔</h2><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">apiVersion:</span> v1<br><span class="hljs-symbol">kind:</span> Pod<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> ubuntu<br><span class="hljs-symbol">  labels:</span><br><span class="hljs-symbol">    app:</span> ubuntu<br><span class="hljs-symbol">spec:</span><br><span class="hljs-symbol">  containers:</span><br>    - name: ubuntu<br><span class="hljs-symbol">      image:</span> ubuntu:latest<br><span class="hljs-symbol">      command:</span> [<span class="hljs-string">&quot;/bin/bash&quot;</span>, <span class="hljs-string">&quot;-c&quot;</span>, <span class="hljs-string">&quot;while true; do sleep 3600; done&quot;</span>]<br><br></code></pre></td></tr></table></figure><h2 id="運行Ubuntu-Pod"><a href="#運行Ubuntu-Pod" class="headerlink" title="運行Ubuntu Pod"></a>運行Ubuntu Pod</h2><p>cd 到ubuntu.yml檔所在路徑並執行指令</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs applescript">kubectl apply -f ubuntu.yml<br>kubectl exec -<span class="hljs-keyword">it</span> ubuntu <span class="hljs-comment">-- /bin/bash</span><br></code></pre></td></tr></table></figure><p>此時我們到minikube dashboard上可以看到Ubuntu Pod已經啟動</p><p><img src="/./image/%E4%BD%BF%E7%94%A8Minikube_+_Ansible%E9%83%A8%E5%B1%AC%E5%BE%AE%E6%9C%8D%E5%8B%99/73630251-cd28-4c29-bfb8-38127558fe87.webp" alt="Image"></p><p>我們在podman上也可以看到Ubuntu pod</p><p><img src="/./image/%E4%BD%BF%E7%94%A8Minikube_+_Ansible%E9%83%A8%E5%B1%AC%E5%BE%AE%E6%9C%8D%E5%8B%99/0da46c9b-d994-4302-b04b-b3ebd3a656e6.webp" alt="Image"></p><h2 id="安裝Ansible"><a href="#安裝Ansible" class="headerlink" title="安裝Ansible"></a>安裝Ansible</h2><p>我們可以由podman進入ubuntu的terminal</p><p><img src="/./image/%E4%BD%BF%E7%94%A8Minikube_+_Ansible%E9%83%A8%E5%B1%AC%E5%BE%AE%E6%9C%8D%E5%8B%99/34af0d63-6176-453c-bcb8-515f79c13148.webp" alt="Image"></p><h3 id="執行以下指令安裝Ansible與k8s函式庫"><a href="#執行以下指令安裝Ansible與k8s函式庫" class="headerlink" title="執行以下指令安裝Ansible與k8s函式庫"></a>執行以下指令安裝Ansible與k8s函式庫</h3><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs vim">apt-<span class="hljs-built_in">get</span> <span class="hljs-keyword">update</span><br>apt-<span class="hljs-built_in">get</span> install -<span class="hljs-keyword">y</span> software-properties-common<br><span class="hljs-built_in">add</span>-apt-repository --yes --<span class="hljs-keyword">update</span> <span class="hljs-keyword">pp</span><span class="hljs-variable">a:ansible</span>/ansible<br>apt-<span class="hljs-built_in">get</span> install -<span class="hljs-keyword">y</span> ansible<br>curl -LO <span class="hljs-string">&quot;https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl&quot;</span><br>chmod +<span class="hljs-keyword">x</span> ./kubectl<br>mv ./kubectl /usr/local/bin/kubectl<br>apt-<span class="hljs-built_in">get</span> install -<span class="hljs-keyword">y</span> <span class="hljs-keyword">python3</span>-kubernetes<br></code></pre></td></tr></table></figure><h3 id="建立-root-kube-config文件"><a href="#建立-root-kube-config文件" class="headerlink" title="建立&#x2F;root&#x2F;.kube&#x2F;config文件"></a>建立&#x2F;root&#x2F;.kube&#x2F;config文件</h3><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">v1</span><br><span class="hljs-attribute">clusters</span><span class="hljs-punctuation">:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">cluster:</span><br>    <span class="hljs-attribute">certificate-authority</span><span class="hljs-punctuation">:</span> <span class="hljs-string">/var/run/secrets/kubernetes.io/serviceaccount/ca.crt</span><br>    <span class="hljs-attribute">server</span><span class="hljs-punctuation">:</span> <span class="hljs-string">https://kubernetes.default.svc</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">kubernetes</span><br><span class="hljs-attribute">contexts</span><span class="hljs-punctuation">:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">context:</span><br>    <span class="hljs-attribute">cluster</span><span class="hljs-punctuation">:</span> <span class="hljs-string">kubernetes</span><br>    <span class="hljs-attribute">namespace</span><span class="hljs-punctuation">:</span> <span class="hljs-string">default</span><br>    <span class="hljs-attribute">user</span><span class="hljs-punctuation">:</span> <span class="hljs-string">default</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">default</span><br><span class="hljs-attribute">current-context</span><span class="hljs-punctuation">:</span> <span class="hljs-string">default</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">Config</span><br><span class="hljs-attribute">preferences</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&#123;&#125;</span><br><span class="hljs-attribute">users</span><span class="hljs-punctuation">:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">name: default</span><br>  <span class="hljs-attribute">user</span><span class="hljs-punctuation">:</span><br>    <span class="hljs-attribute">token</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&lt;YOUR_SERVICE_ACCOUNT_TOKEN&gt;</span><br><br></code></pre></td></tr></table></figure><p>獲取服務賬戶令牌並替換 <code>&lt;YOUR_SERVICE_ACCOUNT_TOKEN&gt;</code>：</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">TOKEN</span>=$(<span class="hljs-keyword">cat</span> /<span class="hljs-keyword">var</span>/<span class="hljs-keyword">run</span>/secrets/kubernetes.io/serviceaccount/<span class="hljs-keyword">token</span>)<br>echo <span class="hljs-variable">$TOKEN</span><br></code></pre></td></tr></table></figure><p><img src="/./image/%E4%BD%BF%E7%94%A8Minikube_+_Ansible%E9%83%A8%E5%B1%AC%E5%BE%AE%E6%9C%8D%E5%8B%99/5efc9d38-aa1d-4431-b030-0a78dc547b2a.webp" alt="Image"></p><h3 id=""><a href="#" class="headerlink" title=""></a></h3><p>創建 <code>ansible.cfg</code> 文件：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[defaults]</span><br><span class="hljs-attr">interpreter_python</span> = /usr/bin/python3<br></code></pre></td></tr></table></figure><p><img src="/./image/%E4%BD%BF%E7%94%A8Minikube_+_Ansible%E9%83%A8%E5%B1%AC%E5%BE%AE%E6%9C%8D%E5%8B%99/781fb772-587c-43d8-b5c4-085b8069af8d.webp" alt="Image"></p><h1 id="使用ansible部屬Redis"><a href="#使用ansible部屬Redis" class="headerlink" title="使用ansible部屬Redis"></a>使用ansible部屬Redis</h1><h2 id="建置deploy-redis-yml"><a href="#建置deploy-redis-yml" class="headerlink" title="建置deploy_redis.yml"></a>建置deploy_redis.yml</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Deploy</span> <span class="hljs-string">Redis</span> <span class="hljs-string">Pod</span><br>  <span class="hljs-attr">hosts:</span> <span class="hljs-string">localhost</span><br>  <span class="hljs-attr">tasks:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Create</span> <span class="hljs-string">Redis</span> <span class="hljs-string">Pod</span><br>      <span class="hljs-attr">kubernetes.core.k8s:</span><br>        <span class="hljs-attr">state:</span> <span class="hljs-string">present</span><br>        <span class="hljs-attr">definition:</span><br>          <span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br>          <span class="hljs-attr">kind:</span> <span class="hljs-string">Pod</span><br>          <span class="hljs-attr">metadata:</span><br>            <span class="hljs-attr">name:</span> <span class="hljs-string">redis</span><br>            <span class="hljs-attr">labels:</span><br>              <span class="hljs-attr">app:</span> <span class="hljs-string">redis</span><br>          <span class="hljs-attr">spec:</span><br>            <span class="hljs-attr">containers:</span><br>            <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">redis</span><br>              <span class="hljs-attr">image:</span> <span class="hljs-string">docker.io/redis:latest</span><br>              <span class="hljs-attr">ports:</span><br>              <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">6379</span><br><br></code></pre></td></tr></table></figure><p><img src="/./image/%E4%BD%BF%E7%94%A8Minikube_+_Ansible%E9%83%A8%E5%B1%AC%E5%BE%AE%E6%9C%8D%E5%8B%99/a7e2d1db-ad78-4400-b877-8d774a4e2f1b.webp" alt="Image"></p><p>此時的目錄結構為:</p><p><img src="/./image/%E4%BD%BF%E7%94%A8Minikube_+_Ansible%E9%83%A8%E5%B1%AC%E5%BE%AE%E6%9C%8D%E5%8B%99/a7a9b9b1-20bb-4cb2-82aa-d72bc1a9c7f9.webp" alt="Image"></p><h2 id="執行-Ansible-Playbook"><a href="#執行-Ansible-Playbook" class="headerlink" title="執行 Ansible Playbook"></a>執行 Ansible Playbook</h2><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">ansible-playbook <span class="hljs-keyword">deploy</span>_redis.yml<br></code></pre></td></tr></table></figure><p><img src="/./image/%E4%BD%BF%E7%94%A8Minikube_+_Ansible%E9%83%A8%E5%B1%AC%E5%BE%AE%E6%9C%8D%E5%8B%99/c542eb5e-f0cf-4225-b6f8-c27c9e3e425d.webp" alt="Image"></p><p>此時看dashboard就可以看到成功使用ansible playbook建立一個redis pod</p><p><img src="/./image/%E4%BD%BF%E7%94%A8Minikube_+_Ansible%E9%83%A8%E5%B1%AC%E5%BE%AE%E6%9C%8D%E5%8B%99/ab22cff3-8034-44c0-8b8c-155a96892f84.webp" alt="Image"></p><p>於podman中也可以看到redis pod</p><p><img src="/./image/%E4%BD%BF%E7%94%A8Minikube_+_Ansible%E9%83%A8%E5%B1%AC%E5%BE%AE%E6%9C%8D%E5%8B%99/a2d9d764-5d0a-4680-8234-2e6283906530.webp" alt="Image"></p><p>執行playbook時若出現以下error表示權限不足需參考下面賦予Pod權限標題:</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs swift">fatal: [localhost]: <span class="hljs-type">FAILED</span>! <span class="hljs-operator">=&gt;</span> &#123;<span class="hljs-string">&quot;changed&quot;</span>: <span class="hljs-literal">false</span>, <span class="hljs-string">&quot;msg&quot;</span>: <span class="hljs-string">&quot;Failed to retrieve requested object: b&#x27;&#123;<span class="hljs-subst">\&quot;</span>kind<span class="hljs-subst">\&quot;</span>:<span class="hljs-subst">\&quot;</span>Status<span class="hljs-subst">\&quot;</span>,<span class="hljs-subst">\&quot;</span>apiVersion<span class="hljs-subst">\&quot;</span>:<span class="hljs-subst">\&quot;</span>v1<span class="hljs-subst">\&quot;</span>,<span class="hljs-subst">\&quot;</span>metadata<span class="hljs-subst">\&quot;</span>:&#123;&#125;,<span class="hljs-subst">\&quot;</span>status<span class="hljs-subst">\&quot;</span>:<span class="hljs-subst">\&quot;</span>Failure<span class="hljs-subst">\&quot;</span>,<span class="hljs-subst">\&quot;</span>message<span class="hljs-subst">\&quot;</span>:<span class="hljs-subst">\&quot;</span>pods <span class="hljs-subst">\\</span><span class="hljs-subst">\\</span><span class="hljs-subst">\&quot;</span>redis<span class="hljs-subst">\\</span><span class="hljs-subst">\\</span><span class="hljs-subst">\&quot;</span> is forbidden: User <span class="hljs-subst">\\</span><span class="hljs-subst">\\</span><span class="hljs-subst">\&quot;</span>system:serviceaccount:default:default<span class="hljs-subst">\\</span><span class="hljs-subst">\\</span><span class="hljs-subst">\&quot;</span> cannot get resource <span class="hljs-subst">\\</span><span class="hljs-subst">\\</span><span class="hljs-subst">\&quot;</span>pods<span class="hljs-subst">\\</span><span class="hljs-subst">\\</span><span class="hljs-subst">\&quot;</span> in API group <span class="hljs-subst">\\</span><span class="hljs-subst">\\</span><span class="hljs-subst">\&quot;</span><span class="hljs-subst">\\</span><span class="hljs-subst">\\</span><span class="hljs-subst">\&quot;</span> at the cluster scope<span class="hljs-subst">\&quot;</span>,<span class="hljs-subst">\&quot;</span>reason<span class="hljs-subst">\&quot;</span>:<span class="hljs-subst">\&quot;</span>Forbidden<span class="hljs-subst">\&quot;</span>,<span class="hljs-subst">\&quot;</span>details<span class="hljs-subst">\&quot;</span>:&#123;<span class="hljs-subst">\&quot;</span>name<span class="hljs-subst">\&quot;</span>:<span class="hljs-subst">\&quot;</span>redis<span class="hljs-subst">\&quot;</span>,<span class="hljs-subst">\&quot;</span>kind<span class="hljs-subst">\&quot;</span>:<span class="hljs-subst">\&quot;</span>pods<span class="hljs-subst">\&quot;</span>&#125;,<span class="hljs-subst">\&quot;</span>code<span class="hljs-subst">\&quot;</span>:403&#125;<span class="hljs-subst">\\</span>n&#x27;&quot;</span>, <span class="hljs-string">&quot;reason&quot;</span>: <span class="hljs-string">&quot;Forbidden&quot;</span>&#125;<br></code></pre></td></tr></table></figure><h1 id="賦予Ubuntu-Pod-ServiceAccount權限"><a href="#賦予Ubuntu-Pod-ServiceAccount權限" class="headerlink" title="賦予Ubuntu Pod ServiceAccount權限"></a>賦予Ubuntu Pod ServiceAccount權限</h1><p>說明: 若我們想要使用ubuntu上的ansible部屬一個服務到minikube上，我們就必須先賦予ubuntu pod權限</p><h2 id="確認-Pod-使用的-ServiceAccount"><a href="#確認-Pod-使用的-ServiceAccount" class="headerlink" title="確認 Pod 使用的 ServiceAccount"></a>確認 Pod 使用的 ServiceAccount</h2><p>使用以下指令確認Ubuntu Pod使用的ServiceAccount</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">kubectl <span class="hljs-built_in">get</span> pod ubuntu -o yaml<br></code></pre></td></tr></table></figure><p><img src="/./image/%E4%BD%BF%E7%94%A8Minikube_+_Ansible%E9%83%A8%E5%B1%AC%E5%BE%AE%E6%9C%8D%E5%8B%99/1c129f5b-63ab-4046-a53f-c11a60265ca0.webp" alt="Image"></p><h2 id="創建或更新-Role-和-RoleBinding"><a href="#創建或更新-Role-和-RoleBinding" class="headerlink" title="創建或更新 Role 和 RoleBinding"></a>創建或更新 Role 和 RoleBinding</h2><h3 id="role-yml"><a href="#role-yml" class="headerlink" title="role.yml"></a>role.yml</h3><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">apiVersion:</span> rbac.authorization.k8s.io/v1<br><span class="hljs-symbol">kind:</span> Role<br><span class="hljs-symbol">metadata:</span><br><span class="hljs-symbol">  name:</span> pod-manager-role<br><span class="hljs-symbol">  namespace:</span> default<br><span class="hljs-symbol">rules:</span><br>  - apiGroups: [<span class="hljs-string">&quot;&quot;</span>]<br><span class="hljs-symbol">    resources:</span> [<span class="hljs-string">&quot;pods&quot;</span>]<br><span class="hljs-symbol">    verbs:</span> [<span class="hljs-string">&quot;get&quot;</span>, <span class="hljs-string">&quot;list&quot;</span>, <span class="hljs-string">&quot;watch&quot;</span>, <span class="hljs-string">&quot;create&quot;</span>, <span class="hljs-string">&quot;update&quot;</span>, <span class="hljs-string">&quot;patch&quot;</span>, <span class="hljs-string">&quot;delete&quot;</span>]<br><br></code></pre></td></tr></table></figure><h3 id="rolebinding-yml"><a href="#rolebinding-yml" class="headerlink" title="rolebinding.yml"></a>rolebinding.yml</h3><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">RoleBinding</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">pod-manager-binding</span><br>  <span class="hljs-attribute">namespace</span><span class="hljs-punctuation">:</span> <span class="hljs-string">default</span><br><span class="hljs-attribute">subjects</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">kind: ServiceAccount</span><br>    <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">default</span><br>    <span class="hljs-attribute">namespace</span><span class="hljs-punctuation">:</span> <span class="hljs-string">default</span><br><span class="hljs-attribute">roleRef</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">Role</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">pod-manager-role</span><br>  <span class="hljs-attribute">apiGroup</span><span class="hljs-punctuation">:</span> <span class="hljs-string">rbac.authorization.k8s.io</span><br><br></code></pre></td></tr></table></figure><h3 id="執行指令"><a href="#執行指令" class="headerlink" title="執行指令"></a>執行指令</h3><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs coq">kubectl <span class="hljs-built_in">apply</span> -f role.yml<br>kubectl <span class="hljs-built_in">apply</span> -f rolebinding.yml<br></code></pre></td></tr></table></figure><h2 id="確認權限"><a href="#確認權限" class="headerlink" title="確認權限"></a>確認權限</h2><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs oxygene">kubectl auth can-i <span class="hljs-keyword">create</span> pods --<span class="hljs-keyword">as</span>=system:serviceaccount:<span class="hljs-keyword">default</span>:<span class="hljs-keyword">default</span> --<span class="hljs-keyword">namespace</span>=<span class="hljs-keyword">default</span><br>kubectl auth can-i patch pods --<span class="hljs-keyword">as</span>=system:serviceaccount:<span class="hljs-keyword">default</span>:<span class="hljs-keyword">default</span> --<span class="hljs-keyword">namespace</span>=<span class="hljs-keyword">default</span><br></code></pre></td></tr></table></figure><p>這兩個命令應該返回 <code>yes</code>，表示 <code>default</code> ServiceAccount 具有相應的權限。</p><p><img src="/./image/%E4%BD%BF%E7%94%A8Minikube_+_Ansible%E9%83%A8%E5%B1%AC%E5%BE%AE%E6%9C%8D%E5%8B%99/de2cf3f7-aec7-4541-bd84-1b5b009879f2.webp" alt="Image"></p>]]></content>
    
    
    <categories>
      
      <category>Ansible</category>
      
    </categories>
    
    
    <tags>
      
      <tag>AWX</tag>
      
      <tag>K8S</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>整合Keycloak實現Single-Sign-On (SSO) 及 OAuth2.0 with OpenId Connect</title>
    <link href="/2024/07/28/%E6%95%B4%E5%90%88Keycloak%E5%AF%A6%E7%8F%BESingle-Sign-On%20(SSO)%20%E5%8F%8A%20OAuth2.0%20with%20OpenId%20Connect/"/>
    <url>/2024/07/28/%E6%95%B4%E5%90%88Keycloak%E5%AF%A6%E7%8F%BESingle-Sign-On%20(SSO)%20%E5%8F%8A%20OAuth2.0%20with%20OpenId%20Connect/</url>
    
    <content type="html"><![CDATA[<h1 id="Keycloak簡介"><a href="#Keycloak簡介" class="headerlink" title="Keycloak簡介"></a>Keycloak簡介</h1><p>截自WIKI:</p><p>Keycloak是一個開源軟體產品，旨在為現代的應用程式和服務，提供包含身份管理和訪問管理功能的單點登錄工具。截至2018年3月，紅帽公司負責管理這一JBoss社區項目，並將其作為他們RH-SSO產品的上游項目。[2]從概念的角度上來說，該工具的目的是，只用少量編碼甚至不用編碼，就能很容易地使應用程式和服務更安全。</p><h1 id="使用Docker在本地架設Keycloak-Server"><a href="#使用Docker在本地架設Keycloak-Server" class="headerlink" title="使用Docker在本地架設Keycloak Server"></a>使用Docker在本地架設Keycloak Server</h1><h2 id="指令"><a href="#指令" class="headerlink" title="指令:"></a>指令:</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">docker <span class="hljs-built_in">run</span> -p 8080:8080 -e <span class="hljs-attribute">KEYCLOAK_ADMIN</span>=admin -e <span class="hljs-attribute">KEYCLOAK_ADMIN_PASSWORD</span>=admin quay.io/keycloak/keycloak:23.0.7 start-dev<br></code></pre></td></tr></table></figure><h2 id="接著輸入-http-localhost-8080-就可以看到admin的登入畫面"><a href="#接著輸入-http-localhost-8080-就可以看到admin的登入畫面" class="headerlink" title="接著輸入 http://localhost:8080 就可以看到admin的登入畫面"></a>接著輸入 <a href="http://localhost:8080/">http://localhost:8080</a> 就可以看到admin的登入畫面</h2><p><img src="/./image/%E6%95%B4%E5%90%88Keycloak%E5%AF%A6%E7%8F%BESingle-Sign-On_(SSO)_%E5%8F%8A_OAuth2.0_with_OpenId_Connect/ad55e8d6-bfbb-4406-b894-2718e6de2dd0.webp" alt="Image"></p><p><img src="/./image/%E6%95%B4%E5%90%88Keycloak%E5%AF%A6%E7%8F%BESingle-Sign-On_(SSO)_%E5%8F%8A_OAuth2.0_with_OpenId_Connect/bf6d269e-2cef-4610-8121-7a6dceb0b0ab.webp" alt="Image"></p><h2 id="登入後點選左上角Create-realm-創建一個realm"><a href="#登入後點選左上角Create-realm-創建一個realm" class="headerlink" title="登入後點選左上角Create realm 創建一個realm"></a>登入後點選左上角Create realm 創建一個realm</h2><p><img src="/./image/%E6%95%B4%E5%90%88Keycloak%E5%AF%A6%E7%8F%BESingle-Sign-On_(SSO)_%E5%8F%8A_OAuth2.0_with_OpenId_Connect/aa21f290-b894-4462-902b-1bd9375edebb.webp" alt="Image"></p><h2 id="登入後點選左上角Create-realm-創建一個client"><a href="#登入後點選左上角Create-realm-創建一個client" class="headerlink" title="登入後點選左上角Create realm 創建一個client"></a>登入後點選左上角Create realm 創建一個client</h2><p><img src="/./image/%E6%95%B4%E5%90%88Keycloak%E5%AF%A6%E7%8F%BESingle-Sign-On_(SSO)_%E5%8F%8A_OAuth2.0_with_OpenId_Connect/7be4ea6f-e4c0-4954-ac3c-c75feefcf290.webp" alt="Image"></p><p>Valid redirect URIs 是Keycloak登入認證後，Redirect回Application的URI，這邊設定 <a href="http://localhost:8081/">http://localhost:8081/</a>* 是我自己本機服務的URL</p><p><img src="/./image/%E6%95%B4%E5%90%88Keycloak%E5%AF%A6%E7%8F%BESingle-Sign-On_(SSO)_%E5%8F%8A_OAuth2.0_with_OpenId_Connect/d2da8277-2e21-4c60-b517-61d80f4ba89e.webp" alt="Image"></p><p>開啟 OIDC Flow 與 OAuth2.0 Flow</p><p><img src="/./image/%E6%95%B4%E5%90%88Keycloak%E5%AF%A6%E7%8F%BESingle-Sign-On_(SSO)_%E5%8F%8A_OAuth2.0_with_OpenId_Connect/ac765dc0-8b26-4cf8-95af-1e219223ae53.webp" alt="Image"></p><p>這邊可以看到 client secret 之後要加入Application做為Issuer識別用</p><p><img src="/./image/%E6%95%B4%E5%90%88Keycloak%E5%AF%A6%E7%8F%BESingle-Sign-On_(SSO)_%E5%8F%8A_OAuth2.0_with_OpenId_Connect/a648abf5-8bba-45ee-aa51-9cda5bfd347f.webp" alt="Image"></p><p>特別注意若希望client端在call取得Access Token的Endpoint(&#x2F;realms&#x2F;{realm-name}&#x2F;protocol&#x2F;openid-connect&#x2F;token)同時回傳Id_Token的話，記得要在Client Scope中加入openid</p><p><img src="/./image/%E6%95%B4%E5%90%88Keycloak%E5%AF%A6%E7%8F%BESingle-Sign-On_(SSO)_%E5%8F%8A_OAuth2.0_with_OpenId_Connect/28ca6ccb-8933-4261-a45b-4f4b1afe6634.webp" alt="Image"></p><h2 id="創建user"><a href="#創建user" class="headerlink" title="創建user"></a>創建user</h2><p><img src="/./image/%E6%95%B4%E5%90%88Keycloak%E5%AF%A6%E7%8F%BESingle-Sign-On_(SSO)_%E5%8F%8A_OAuth2.0_with_OpenId_Connect/25691151-41f8-4815-9e7f-250570a89ec6.webp" alt="Image"></p><p><img src="/./image/%E6%95%B4%E5%90%88Keycloak%E5%AF%A6%E7%8F%BESingle-Sign-On_(SSO)_%E5%8F%8A_OAuth2.0_with_OpenId_Connect/9bcb5c5e-8d18-4a21-bce0-212c5ea9488a.webp" alt="Image"></p><p>設置user密碼</p><p><img src="/./image/%E6%95%B4%E5%90%88Keycloak%E5%AF%A6%E7%8F%BESingle-Sign-On_(SSO)_%E5%8F%8A_OAuth2.0_with_OpenId_Connect/144f35f9-a142-45fd-93cd-504dc9ff5de5.webp" alt="Image"></p><h1 id="登入驗證方式"><a href="#登入驗證方式" class="headerlink" title="登入驗證方式:"></a>登入驗證方式:</h1><h2 id="1-OAuth2-OpenId-Flow並使用Session-登入達到Single-Sign-On-SSO"><a href="#1-OAuth2-OpenId-Flow並使用Session-登入達到Single-Sign-On-SSO" class="headerlink" title="1. OAuth2 + OpenId Flow並使用Session 登入達到Single Sign-On (SSO)"></a>1. OAuth2 + OpenId Flow並使用Session 登入達到Single Sign-On (SSO)</h2><h3 id="開啟Applicaion登入Keycloak認證"><a href="#開啟Applicaion登入Keycloak認證" class="headerlink" title="開啟Applicaion登入Keycloak認證"></a>開啟Applicaion登入Keycloak認證</h3><p>我們可以透過Browser看到，當我call服務的url: <a href="http://localhost:8081/%E6%99%82%EF%BC%8C%E6%9C%83return/">http://localhost:8081時，會return</a> http 302 status，此時Spring Security會去call keycloak的認證EndPoint(&#x2F;realms&#x2F;{realm-name}&#x2F;protocol&#x2F;openid-connect&#x2F;auth)，並redirect到Keycloak的登入頁面。</p><p><img src="/./image/%E6%95%B4%E5%90%88Keycloak%E5%AF%A6%E7%8F%BESingle-Sign-On_(SSO)_%E5%8F%8A_OAuth2.0_with_OpenId_Connect/d4047ca7-1c9a-4aa9-9771-8cd51cc099bc.webp" alt="Image"></p><p>當輸入帳密且登入後，我們可以看到keycloak return了一個302 http status，並且call了redirect的EndPoint(login&#x2F;oauth2&#x2F;code&#x2F;keycloak)，並且redirect回到我的微服務當中。</p><p><img src="/./image/%E6%95%B4%E5%90%88Keycloak%E5%AF%A6%E7%8F%BESingle-Sign-On_(SSO)_%E5%8F%8A_OAuth2.0_with_OpenId_Connect/bca8c23a-80b6-4815-82d3-242949b8f2d7.webp" alt="Image"></p><p>這時keycloak其實還攜帶了一組JSESSIONID在cookie當中，我們就可以透過這組keycloak以認證過的JSESSIONID達到sso的效果，後續若要再通過keyclaok時只要在cookie中帶入這個JSESSIONID，使用者就可以不用再次輸入帳密，就可以通過keycloak的驗證。</p><p><img src="/./image/%E6%95%B4%E5%90%88Keycloak%E5%AF%A6%E7%8F%BESingle-Sign-On_(SSO)_%E5%8F%8A_OAuth2.0_with_OpenId_Connect/493523b2-1413-4c41-be07-1b3bac20bf20.webp" alt="Image"></p><p>我們也可以在keycloak server當中看到當前的user1 session相關信息。</p><p><img src="/./image/%E6%95%B4%E5%90%88Keycloak%E5%AF%A6%E7%8F%BESingle-Sign-On_(SSO)_%E5%8F%8A_OAuth2.0_with_OpenId_Connect/bc2b8e44-1015-4472-917c-cb8770e10453.webp" alt="Image"></p><h3 id="使用postman驗證SSO"><a href="#使用postman驗證SSO" class="headerlink" title="使用postman驗證SSO"></a>使用postman驗證SSO</h3><p>我們使用postman直接打微服務的API，並且在cookie帶入剛剛在browser所獲得的JSESSIONID，預期的是不需再次通過Keycloak的認證，就可以呼叫API成功。</p><p><img src="/./image/%E6%95%B4%E5%90%88Keycloak%E5%AF%A6%E7%8F%BESingle-Sign-On_(SSO)_%E5%8F%8A_OAuth2.0_with_OpenId_Connect/e637ebb9-aa5d-49ea-903e-490a022c92d1.webp" alt="Image"></p><p><img src="/./image/%E6%95%B4%E5%90%88Keycloak%E5%AF%A6%E7%8F%BESingle-Sign-On_(SSO)_%E5%8F%8A_OAuth2.0_with_OpenId_Connect/7b2e8eff-31b9-46b4-b236-a389f3b987a5.webp" alt="Image"></p><p>測試成功!</p><p><img src="/./image/%E6%95%B4%E5%90%88Keycloak%E5%AF%A6%E7%8F%BESingle-Sign-On_(SSO)_%E5%8F%8A_OAuth2.0_with_OpenId_Connect/95de90ef-2e2e-48f8-930f-0d70e421ab11.webp" alt="Image"></p><p>我們也可以測試看看帶不同的JSESSIONID，就會出就401認證失敗</p><p><img src="/./image/%E6%95%B4%E5%90%88Keycloak%E5%AF%A6%E7%8F%BESingle-Sign-On_(SSO)_%E5%8F%8A_OAuth2.0_with_OpenId_Connect/f3d65815-8d1f-4d06-9987-410573e2fb83.webp" alt="Image"></p><h3 id="Keycloak-Session設定"><a href="#Keycloak-Session設定" class="headerlink" title="Keycloak Session設定"></a>Keycloak Session設定</h3><p><img src="/./image/%E6%95%B4%E5%90%88Keycloak%E5%AF%A6%E7%8F%BESingle-Sign-On_(SSO)_%E5%8F%8A_OAuth2.0_with_OpenId_Connect/1519a4f9-121e-4d83-a88a-12dafe0658ca.webp" alt="Image"></p><h2 id="2-使用JWT-Authentication進行認證"><a href="#2-使用JWT-Authentication進行認證" class="headerlink" title="2. 使用JWT Authentication進行認證"></a>2. 使用JWT Authentication進行認證</h2><h3 id="介紹-JWT-Authentication"><a href="#介紹-JWT-Authentication" class="headerlink" title="介紹 JWT Authentication"></a>介紹 JWT Authentication</h3><p><img src="/./image/%E6%95%B4%E5%90%88Keycloak%E5%AF%A6%E7%8F%BESingle-Sign-On_(SSO)_%E5%8F%8A_OAuth2.0_with_OpenId_Connect/c00c2ef2-2374-49ca-8683-84520a4e02f6.webp" alt="Image"></p><p>根據官方文件:<br><a href="https://docs.spring.io/spring-security/reference/servlet/oauth2/resource-server/jwt.html">https://docs.spring.io/spring-security/reference/servlet/oauth2/resource-server/jwt.html</a></p><ol><li><p>讀取 Bearer Token 的驗證過濾器將 BearerTokenAuthenticationToken 傳遞給由 ProviderManager 實作的 AuthenticationManager。</p></li><li><p>ProviderManager 設定為使用 JwtAuthenticationProvider 類型的 AuthenticationProvider。</p></li><li><p>JwtAuthenticationProvider 使用 JwtDecoder 解碼、驗證和確認 Jwt。</p></li><li><p>JwtAuthenticationProvider 使用 JwtAuthenticationConverter 將 Jwt 轉換為授予權限的集合。</p></li><li><p>身份驗證成功後，傳回的 Authentication 類型為 JwtAuthenticationToken，並且具有一個主體，該主體是配置的 JwtDecoder 傳回的 Jwt。最終，傳回的 JwtAuthenticationToken 將由驗證 Filter 設定在 SecurityContextHolder 上。</p></li></ol><h3 id="使用Postman打Keycloak-token-EndPoint獲得-Access-Token與ID-Token"><a href="#使用Postman打Keycloak-token-EndPoint獲得-Access-Token與ID-Token" class="headerlink" title="使用Postman打Keycloak token EndPoint獲得 Access-Token與ID-Token"></a>使用Postman打Keycloak token EndPoint獲得 Access-Token與ID-Token</h3><p>EndPoint:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span><span class="hljs-variable">$&#123;host&#125;</span>:<span class="hljs-variable">$&#123;port&#125;</span><span class="hljs-regexp">/realms/</span><span class="hljs-variable">$&#123;realm&#125;</span><span class="hljs-regexp">/protocol/</span>openid-connect/token<br></code></pre></td></tr></table></figure><p>在x-www-form-urlencoded 帶入 client_id、client_secret、grant_type、username、password、scope(如果要獲得ID-Token的話一定要帶openid):</p><p><img src="/./image/%E6%95%B4%E5%90%88Keycloak%E5%AF%A6%E7%8F%BESingle-Sign-On_(SSO)_%E5%8F%8A_OAuth2.0_with_OpenId_Connect/e94d4591-96a6-4b71-92f8-5ceadb43a8b1.webp" alt="Image"></p><p><img src="/./image/%E6%95%B4%E5%90%88Keycloak%E5%AF%A6%E7%8F%BESingle-Sign-On_(SSO)_%E5%8F%8A_OAuth2.0_with_OpenId_Connect/aa408a39-26b6-4254-ae97-69f92acc2c7f.webp" alt="Image"></p><p><img src="/./image/%E6%95%B4%E5%90%88Keycloak%E5%AF%A6%E7%8F%BESingle-Sign-On_(SSO)_%E5%8F%8A_OAuth2.0_with_OpenId_Connect/a3b473a1-8efd-4902-8ec9-c42c09cf3a43.webp" alt="Image"></p><h3 id="使用Postman帶著Access-Token-打Sping-Boot-API"><a href="#使用Postman帶著Access-Token-打Sping-Boot-API" class="headerlink" title="使用Postman帶著Access Token 打Sping Boot API"></a>使用Postman帶著Access Token 打Sping Boot API</h3><p>於Authorization中選擇Bearer Token並帶入Access Token的值</p><p><img src="/./image/%E6%95%B4%E5%90%88Keycloak%E5%AF%A6%E7%8F%BESingle-Sign-On_(SSO)_%E5%8F%8A_OAuth2.0_with_OpenId_Connect/6a69bae1-832d-4f2c-a694-ac373c0fc696.webp" alt="Image"></p><p>並且可以透過Role限制使用者可以訪問的API</p><p><img src="/./image/%E6%95%B4%E5%90%88Keycloak%E5%AF%A6%E7%8F%BESingle-Sign-On_(SSO)_%E5%8F%8A_OAuth2.0_with_OpenId_Connect/1a5cbd4e-d715-4134-992a-d2f956fccdd6.webp" alt="Image"></p><p><img src="/./image/%E6%95%B4%E5%90%88Keycloak%E5%AF%A6%E7%8F%BESingle-Sign-On_(SSO)_%E5%8F%8A_OAuth2.0_with_OpenId_Connect/d22d609e-e115-42d9-99a2-03273497de2d.webp" alt="Image"></p><h3 id="Keycloak-AccessToken設定"><a href="#Keycloak-AccessToken設定" class="headerlink" title="Keycloak AccessToken設定"></a>Keycloak AccessToken設定</h3><ol><li>Global 設定: Realm Settings → Tokens → Access Token Lifespan</li></ol><p><img src="/./image/%E6%95%B4%E5%90%88Keycloak%E5%AF%A6%E7%8F%BESingle-Sign-On_(SSO)_%E5%8F%8A_OAuth2.0_with_OpenId_Connect/038608a9-e0a9-4f89-9878-cffb65cb6f94.webp" alt="Image"></p><ol><li><p>針對每個Client做設定</p><pre><code class="hljs"> Client可以選擇繼承Global設定或是自訂義Access Token過期時間</code></pre></li></ol><p><img src="/./image/%E6%95%B4%E5%90%88Keycloak%E5%AF%A6%E7%8F%BESingle-Sign-On_(SSO)_%E5%8F%8A_OAuth2.0_with_OpenId_Connect/bf49f69b-5a61-4cdf-a4e3-a6e85f61f126.webp" alt="Image"></p><p><img src="/./image/%E6%95%B4%E5%90%88Keycloak%E5%AF%A6%E7%8F%BESingle-Sign-On_(SSO)_%E5%8F%8A_OAuth2.0_with_OpenId_Connect/a85c2698-13e4-4936-8a35-2ccf3377308f.webp" alt="Image"></p><h1 id="建立Spring-Security微服務"><a href="#建立Spring-Security微服務" class="headerlink" title="建立Spring Security微服務"></a>建立Spring Security微服務</h1><h2 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.2.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span> /&gt;</span> <span class="hljs-comment">&lt;!-- lookup parent from repository --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.example<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>demo_oauth<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>demo_oauth<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span>Demo project for Spring Boot<span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>17<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-oauth2-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.security<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-security-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-oauth2-resource-server<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.httpcomponents.client5<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>httpclient5-fluent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">excludes</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">exclude</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">exclude</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">excludes</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h2 id="properties"><a href="#properties" class="headerlink" title="properties"></a>properties</h2><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">server.port</span>=<span class="hljs-number">8081</span><br><br><span class="hljs-comment"># OAuth2 Client settings</span><br><span class="hljs-attr">base.url</span>=http://localhost:<span class="hljs-number">8080</span><br><span class="hljs-attr">successful.redirect.url</span>=http://localhost:<span class="hljs-number">8081</span>/loginSuccess<br><span class="hljs-attr">spring.security.oauth2.client.registration.keycloak.client-id</span>=user<br><span class="hljs-attr">spring.security.oauth2.client.registration.keycloak.client-secret</span>=g3fDmtYeX3LlAS3ovxmWqtH0KXEi7rgS<br><span class="hljs-attr">spring.security.oauth2.client.registration.keycloak.authorization-grant-type</span>=authorization_code<br><br><span class="hljs-comment"># Spring Security oauth2 Endpoint</span><br><span class="hljs-attr">spring.security.oauth2.client.registration.keycloak.redirect-uri</span>=http://localhost:<span class="hljs-number">8081</span>/login/oauth2/code/keycloak<br><span class="hljs-attr">spring.security.oauth2.client.registration.keycloak.scope</span>=email,profile,openid<br><br><span class="hljs-comment">## OAuth2 Provider settings for Keycloak</span><br><span class="hljs-attr">spring.security.oauth2.client.provider.keycloak.authorization-uri</span>=<span class="hljs-variable">$&#123;base.url&#125;</span>/realms/demo/protocol/openid-connect/auth<br><span class="hljs-attr">spring.security.oauth2.client.provider.keycloak.token-uri</span>=<span class="hljs-variable">$&#123;base.url&#125;</span>/realms/demo/protocol/openid-connect/token<br><span class="hljs-attr">spring.security.oauth2.client.provider.keycloak.user-info-uri</span>=<span class="hljs-variable">$&#123;base.url&#125;</span>/realms/demo/protocol/openid-connect/userinfo<br><span class="hljs-attr">spring.security.oauth2.client.provider.keycloak.user-name-attribute</span>=preferred_username<br><span class="hljs-attr">spring.security.oauth2.client.provider.keycloak.issuer-uri</span>=<span class="hljs-variable">$&#123;base.url&#125;</span>/realms/demo<br><span class="hljs-attr">spring.security.oauth2.client.provider.keycloak.jwk-set-uri</span>=<span class="hljs-variable">$&#123;base.url&#125;</span>/realms/demo/protocol/openid-connect/certs<br><span class="hljs-attr">spring.security.oauth2.resourceserver.jwt.jwk-set-uri</span>=<span class="hljs-variable">$&#123;base.url&#125;</span>/realms/demo/protocol/openid-connect/certs<br><br></code></pre></td></tr></table></figure><h2 id="Security-Config"><a href="#Security-Config" class="headerlink" title="Security Config"></a>Security Config</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.demo_oauth.config;<br><br><br><span class="hljs-keyword">import</span> org.apache.hc.client5.http.classic.HttpClient;<br><span class="hljs-keyword">import</span> org.apache.hc.client5.http.impl.classic.HttpClients;<br><span class="hljs-keyword">import</span> org.apache.hc.client5.http.impl.io.PoolingHttpClientConnectionManagerBuilder;<br><span class="hljs-keyword">import</span> org.apache.hc.client5.http.io.HttpClientConnectionManager;<br><span class="hljs-keyword">import</span> org.apache.hc.client5.http.ssl.SSLConnectionSocketFactory;<br><span class="hljs-keyword">import</span> org.apache.hc.client5.http.ssl.SSLConnectionSocketFactoryBuilder;<br><span class="hljs-keyword">import</span> org.apache.hc.client5.http.ssl.TrustAllStrategy;<br><span class="hljs-keyword">import</span> org.apache.hc.core5.ssl.SSLContexts;<br><br><span class="hljs-keyword">import</span> java.security.KeyManagementException;<br><span class="hljs-keyword">import</span> java.security.KeyStoreException;<br><span class="hljs-keyword">import</span> java.security.NoSuchAlgorithmException;<br><br><span class="hljs-keyword">import</span> javax.net.ssl.SSLContext;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.http.client.ClientHttpRequestFactory;<br><span class="hljs-keyword">import</span> org.springframework.http.client.HttpComponentsClientHttpRequestFactory;<br><span class="hljs-keyword">import</span> org.springframework.security.config.Customizer;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;<br><span class="hljs-keyword">import</span> org.springframework.security.oauth2.jwt.JwtDecoder;<br><span class="hljs-keyword">import</span> org.springframework.security.oauth2.jwt.NimbusJwtDecoder;<br><span class="hljs-keyword">import</span> org.springframework.security.oauth2.server.resource.authentication.JwtAuthenticationConverter;<br><span class="hljs-keyword">import</span> org.springframework.security.web.SecurityFilterChain;<br><span class="hljs-keyword">import</span> org.springframework.web.client.RestTemplate;<br><span class="hljs-keyword">import</span> org.springframework.web.cors.CorsConfiguration;<br><span class="hljs-keyword">import</span> org.springframework.web.cors.CorsConfigurationSource;<br><span class="hljs-keyword">import</span> org.springframework.web.cors.UrlBasedCorsConfigurationSource;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableMethodSecurity</span><br><span class="hljs-meta">@EnableWebSecurity</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityConfig</span> &#123;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;spring.security.oauth2.client.provider.keycloak.issuer-uri&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String issuerUri;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> JwtAuthenticationConverter jwtAuthenticationConverter;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-keyword">public</span> SecurityFilterChain <span class="hljs-title function_">securityFilterChain</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        http.csrf(csrf -&gt; csrf.disable());<br><br>        http<br>                .authorizeHttpRequests(authorize -&gt; authorize.anyRequest().authenticated())<br><span class="hljs-comment">//                .oauth2ResourceServer((oauth2) -&gt; oauth2.jwt(jwt -&gt; jwt.decoder(jwtDecoder()).jwtAuthenticationConverter(jwtAuthenticationConverter))) // 使用jwtDecoder向Author Server驗證Accesstion，並使用自定義的jwtConverter，jwt decode後將權限收集進Collection&lt;? extends GrantedAuthority&gt;中</span><br>                .oauth2ResourceServer((oauth2) -&gt; oauth2.jwt(jwt -&gt; jwt.decoder(jwtDecoder()))) <span class="hljs-comment">// 驗證 access token</span><br>                .oauth2Login(Customizer.withDefaults()); <span class="hljs-comment">// 使用表單登入</span><br><br>        http<br>                .oauth2Login(oauth2 -&gt; oauth2.defaultSuccessUrl(<span class="hljs-string">&quot;/checkLogin&quot;</span>, <span class="hljs-literal">true</span>));<br>        <span class="hljs-keyword">return</span> http.build();<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> JwtDecoder <span class="hljs-title function_">jwtDecoder</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">RestTemplate</span> <span class="hljs-variable">restTemplate</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RestTemplate</span>();<br>        restTemplate.setRequestFactory(trustAllClientHttpRequestFactory());<br><br>        <span class="hljs-keyword">return</span> NimbusJwtDecoder.withIssuerLocation(issuerUri).restOperations(restTemplate).build();<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> ClientHttpRequestFactory <span class="hljs-title function_">trustAllClientHttpRequestFactory</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">SSLContext</span> <span class="hljs-variable">sslcontext</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            sslcontext = SSLContexts.custom()<br>                    .loadTrustMaterial(<span class="hljs-literal">null</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TrustAllStrategy</span>())<br>                    .build();<br>        &#125; <span class="hljs-keyword">catch</span> (KeyManagementException | NoSuchAlgorithmException | KeyStoreException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-type">SSLConnectionSocketFactory</span> <span class="hljs-variable">sslSocketFactory</span> <span class="hljs-operator">=</span> SSLConnectionSocketFactoryBuilder.create()<br>                .setSslContext(sslcontext)<br>                .build();<br>        <span class="hljs-type">HttpClientConnectionManager</span> <span class="hljs-variable">connectionManager</span> <span class="hljs-operator">=</span> PoolingHttpClientConnectionManagerBuilder.create()<br>                .setSSLSocketFactory(sslSocketFactory)<br>                .build();<br>        <span class="hljs-type">HttpClient</span> <span class="hljs-variable">httlClient</span> <span class="hljs-operator">=</span> HttpClients.custom().setConnectionManager(connectionManager).evictExpiredConnections()<br>                .build();<br><br>        <span class="hljs-type">ClientHttpRequestFactory</span> <span class="hljs-variable">clientHttpRequestFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpComponentsClientHttpRequestFactory</span>(httlClient);<br>        <span class="hljs-keyword">return</span> clientHttpRequestFactory;<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    CorsConfigurationSource <span class="hljs-title function_">corsConfigurationSource</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">CorsConfiguration</span> <span class="hljs-variable">config</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CorsConfiguration</span>();<br><br>        config.addAllowedHeader(<span class="hljs-string">&quot;*&quot;</span>);<br>        config.addAllowedMethod(<span class="hljs-string">&quot;*&quot;</span>);<br>        config.addAllowedOriginPattern(<span class="hljs-string">&quot;*&quot;</span>);<br>        config.setAllowCredentials(<span class="hljs-literal">true</span>);<br>        config.addExposedHeader(<span class="hljs-string">&quot;*&quot;</span>);<br>        config.setMaxAge(<span class="hljs-number">1800L</span>);<br><br>        <span class="hljs-type">UrlBasedCorsConfigurationSource</span> <span class="hljs-variable">source</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UrlBasedCorsConfigurationSource</span>();<br>        source.registerCorsConfiguration(<span class="hljs-string">&quot;/**&quot;</span>, config);<br><br>        <span class="hljs-keyword">return</span> source;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="JwtConverter"><a href="#JwtConverter" class="headerlink" title="JwtConverter"></a>JwtConverter</h2><p>用途:</p><p>轉換 Jwt 為自訂義 Collection 授予權限。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.demo_oauth.config;<br><br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.security.oauth2.server.resource.authentication.JwtAuthenticationConverter;<br><span class="hljs-keyword">import</span> org.springframework.security.oauth2.server.resource.authentication.JwtGrantedAuthoritiesConverter;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JwtConverter</span> &#123;<br><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> JwtAuthenticationConverter <span class="hljs-title function_">jwtAuthenticationConverter</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">JwtGrantedAuthoritiesConverter</span> <span class="hljs-variable">grantedAuthoritiesConverter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JwtGrantedAuthoritiesConverter</span>();<br><span class="hljs-comment">// 變更權限前綴為 ROLE_ ， Keycloak 預設權限前綴為 SCOPE_ 這在使用hasRole() 會出現問題</span><br>grantedAuthoritiesConverter.setAuthorityPrefix(<span class="hljs-string">&quot;ROLE_&quot;</span>);<br><br>    <span class="hljs-type">JwtAuthenticationConverter</span> <span class="hljs-variable">jwtAuthenticationConverter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">JwtAuthenticationConverter</span>();<br>    jwtAuthenticationConverter.setJwtGrantedAuthoritiesConverter(grantedAuthoritiesConverter);<br>    <span class="hljs-keyword">return</span> jwtAuthenticationConverter;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.demo_oauth.controller;<br><br><span class="hljs-keyword">import</span> java.util.Collection;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><br><span class="hljs-keyword">import</span> org.springframework.http.ResponseEntity;<br><span class="hljs-keyword">import</span> org.springframework.security.access.prepost.PreAuthorize;<br><span class="hljs-keyword">import</span> org.springframework.security.core.Authentication;<br><span class="hljs-keyword">import</span> org.springframework.security.core.GrantedAuthority;<br><span class="hljs-keyword">import</span> org.springframework.security.core.context.SecurityContextHolder;<br><span class="hljs-keyword">import</span> org.springframework.security.oauth2.client.authentication.OAuth2AuthenticationToken;<br><span class="hljs-keyword">import</span> org.springframework.security.oauth2.core.oidc.user.DefaultOidcUser;<br><span class="hljs-keyword">import</span> org.springframework.security.oauth2.core.user.OAuth2User;<br><span class="hljs-keyword">import</span> org.springframework.security.oauth2.jwt.Jwt;<br><span class="hljs-keyword">import</span> org.springframework.security.oauth2.server.resource.authentication.JwtAuthenticationToken;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">loginController</span> &#123;<br><br><span class="hljs-meta">@GetMapping(&quot;/checkLogin&quot;)</span><br><span class="hljs-keyword">public</span> ResponseEntity&lt;String&gt; <span class="hljs-title function_">checkLogin</span><span class="hljs-params">()</span> &#123;<br>OAuth2User oAuth2User;<br>DefaultOidcUser defaultOidcUser;<br><span class="hljs-type">Authentication</span> <span class="hljs-variable">authentication</span> <span class="hljs-operator">=</span> SecurityContextHolder.getContext().getAuthentication();<br><span class="hljs-keyword">if</span> (authentication <span class="hljs-keyword">instanceof</span> OAuth2AuthenticationToken) &#123;<br>defaultOidcUser = (DefaultOidcUser) SecurityContextHolder.getContext().getAuthentication().getPrincipal();<br><span class="hljs-keyword">if</span> (defaultOidcUser != <span class="hljs-literal">null</span>) &#123;<br>System.out.println(<span class="hljs-string">&quot;Login Success !!&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;User Id is: &quot;</span> + defaultOidcUser.getUserInfo().getClaim(<span class="hljs-string">&quot;preferred_username&quot;</span>));<br>defaultOidcUser.getAuthorities().forEach(role -&gt; &#123;System.out.println(<span class="hljs-string">&quot; role : &quot;</span> + role);&#125;);<br>Map&lt;String, Object&gt; realm = defaultOidcUser.getClaimAsMap(<span class="hljs-string">&quot;resource_access&quot;</span>);<br><br><span class="hljs-keyword">return</span> ResponseEntity.ok(<span class="hljs-string">&quot;Login Success by using OIDC flow !! User Id is : &quot;</span> + defaultOidcUser.getUserInfo().getClaim(<span class="hljs-string">&quot;preferred_username&quot;</span>));<br>&#125;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (authentication <span class="hljs-keyword">instanceof</span> JwtAuthenticationToken) &#123;<br><span class="hljs-type">Jwt</span> <span class="hljs-variable">jwt</span> <span class="hljs-operator">=</span> (Jwt) authentication.getPrincipal();<br>Collection&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">GrantedAuthority</span>&gt; authorties = SecurityContextHolder.getContext().getAuthentication().getAuthorities();<br><span class="hljs-keyword">if</span> (jwt != <span class="hljs-literal">null</span> &amp;&amp; authorties != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">userName</span> <span class="hljs-operator">=</span> jwt.getClaim(<span class="hljs-string">&quot;preferred_username&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;Login Success !!&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;User name is : &quot;</span> + userName);<br>System.out.println(<span class="hljs-string">&quot;User&#x27;s authorities is : &quot;</span>+ authorties);<br><br><span class="hljs-keyword">return</span> ResponseEntity.ok(<span class="hljs-string">&quot;Login Success by using access token !! User name is : &quot;</span> + userName);<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">return</span> ResponseEntity.ok(<span class="hljs-string">&quot;Login failed .&quot;</span>);<br>&#125;<br><br><span class="hljs-meta">@GetMapping(&quot;/loginSuccess&quot;)</span><br><span class="hljs-keyword">public</span> Collection&lt;?&gt; loginSuccess(Authentication authentication) &#123;<br>Collection&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">GrantedAuthority</span>&gt; authorties = authentication.getAuthorities();<br><span class="hljs-keyword">return</span> authorties;<br>&#125;<br><br><span class="hljs-meta">@GetMapping(&quot;/hasAuthority&quot;)</span><br><span class="hljs-meta">@PreAuthorize(&quot;hasAuthority(&#x27;ROLE_profile&#x27;)&quot;)</span><br><span class="hljs-keyword">public</span> ResponseEntity&lt;String&gt; <span class="hljs-title function_">admin</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;Client has authority: ROLE_profile&quot;</span>);<br>    <span class="hljs-keyword">return</span> ResponseEntity.ok(<span class="hljs-string">&quot;Client has authority: ROLE_profile&quot;</span>);<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>我們可以透過Keycloak與Spring Security整合達到OAuth2.0認證，並且透過Keycloak後所返回給browser的SessionId達到SSO，讓使用者無須再次輸入帳號密碼，即可獲得Keycloak認證。</p><p>也可以透過取得Access Token的方式，讓使用者有如獲得一個認證過的通行證一般，可以使用符合自己權限的API服務。</p>]]></content>
    
    
    <categories>
      
      <category>Spring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring Boot</tag>
      
      <tag>Spring Security</tag>
      
      <tag>Keyclaok</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring Boot使用Cache Filter Chain重複使用HttpServletRequest</title>
    <link href="/2024/07/15/CacheSettingFilter%E7%AD%86%E8%A8%98/"/>
    <url>/2024/07/15/CacheSettingFilter%E7%AD%86%E8%A8%98/</url>
    
    <content type="html"><![CDATA[<h1 id="業務場景"><a href="#業務場景" class="headerlink" title="業務場景"></a>業務場景</h1><p>如果需要實作一個攔截器攔截Http Request傳入的訊息。通常情況下，HttpServletRequst中的Request Body內容只會讀取一次，但是可能某些情境下可能會讀取多次，由於Request Body內容是以Flow的形式存在,所以第一次讀取完成後,第二次就無法讀取了,一個典型的場景就是Filter 在取得Request Body的內容後,就無法繼續讀取Flow了。</p><p>以下使用Filter Chain 搭配ContentCachingRequestWrapper，將HttpServletRequst存進ContentCachingRequestWrapper中，達到可以多次利用的效果。並以ExceptionHandler作為業務情境，實作錯誤處理時可以獲得來源端的URL及Request Body作為實作目標。</p><h1 id="Filter-Config"><a href="#Filter-Config" class="headerlink" title="Filter Config"></a>Filter Config</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ims.svc.sremonitor.collection.filter;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><span class="hljs-keyword">import</span> org.springframework.web.filter.OncePerRequestFilter;<br><span class="hljs-keyword">import</span> org.springframework.web.util.ContentCachingRequestWrapper;<br><br><span class="hljs-keyword">import</span> jakarta.servlet.FilterChain;<br><span class="hljs-keyword">import</span> jakarta.servlet.ServletException;<br><span class="hljs-keyword">import</span> jakarta.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> jakarta.servlet.http.HttpServletResponse;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">logFilter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">OncePerRequestFilter</span> &#123;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilterInternal</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>     <span class="hljs-type">ContentCachingRequestWrapper</span> <span class="hljs-variable">contentCachingRequestWrapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ContentCachingRequestWrapper</span>((HttpServletRequest) request);<br>     filterChain.doFilter(contentCachingRequestWrapper, response);<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="方法一、用字串方式處理HttpServletRequest獲得Request-Body"><a href="#方法一、用字串方式處理HttpServletRequest獲得Request-Body" class="headerlink" title="方法一、用字串方式處理HttpServletRequest獲得Request Body"></a>方法一、用字串方式處理HttpServletRequest獲得Request Body</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ControllerAdvice</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebExceptionHandler</span> &#123;<br><span class="hljs-keyword">private</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(getClass());<br><br><span class="hljs-meta">@ExceptionHandler(Exception.class)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> ResponseEntity&lt;Error&gt; <span class="hljs-title function_">onException</span><span class="hljs-params">(Exception e, WebRequest webRequest)</span> &#123;<br><br><span class="hljs-type">ContentCachingRequestWrapper</span> <span class="hljs-variable">nativeRequest</span> <span class="hljs-operator">=</span> (ContentCachingRequestWrapper) ((ServletWebRequest) webRequest).getNativeRequest();<br><span class="hljs-type">Mwheader</span> <span class="hljs-variable">mwheader</span> <span class="hljs-operator">=</span> setRequestMwheader(nativeRequest);<br>logger.error(<span class="hljs-string">&quot;[LOG]&quot;</span> + nativeRequest.getRequestURL() + <span class="hljs-string">&quot; Get_Exception &quot;</span> + <span class="hljs-string">&quot;Error_Code:&quot;</span> + ReturnCode.E999.getCode() + <span class="hljs-string">&quot;, Error_Message:&quot;</span> + ReturnCode.E999.getDesc());<br><span class="hljs-keyword">return</span> ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(MwheaderSetter.set(mwheader, ReturnCode.E999.getCode(), ReturnCode.E999.getDesc())));<br>&#125;<br><br><span class="hljs-meta">@ExceptionHandler(MethodArgumentNotValidException.class)</span><br><span class="hljs-keyword">public</span> ResponseEntity&lt;Error&gt; <span class="hljs-title function_">methodArgumentNotValidException</span><span class="hljs-params">(MethodArgumentNotValidException e, WebRequest webRequest)</span> &#123;<br>List&lt;FieldError&gt; errors = e.getBindingResult().getFieldErrors();<br>List&lt;String&gt; message = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>errors.forEach(error -&gt; &#123;<br>message.add(<span class="hljs-string">&quot;[&quot;</span> + error.getField() + <span class="hljs-string">&quot;:&quot;</span> + error.getDefaultMessage() + <span class="hljs-string">&quot;]&quot;</span>);<br>&#125;);<br><span class="hljs-type">String</span> <span class="hljs-variable">errorMessage</span> <span class="hljs-operator">=</span> StringUtils.join(message, <span class="hljs-string">&quot;,&quot;</span>);<br><span class="hljs-type">ContentCachingRequestWrapper</span> <span class="hljs-variable">nativeRequest</span> <span class="hljs-operator">=</span> (ContentCachingRequestWrapper) ((ServletWebRequest) webRequest).getNativeRequest();<br><br><span class="hljs-type">Mwheader</span> <span class="hljs-variable">mwheader</span> <span class="hljs-operator">=</span> setRequestMwheader(nativeRequest);<br><span class="hljs-type">String</span> <span class="hljs-variable">resultMessage</span> <span class="hljs-operator">=</span> MessageFormat.format(ReturnCode.E905.getDesc(), errorMessage);<br>logger.error(<span class="hljs-string">&quot;[LOG]&quot;</span> + nativeRequest.getRequestURL()  + <span class="hljs-string">&quot; Get_MethodArgumentNotValidException &quot;</span> + <span class="hljs-string">&quot;Error_Code:&quot;</span> + ReturnCode.E905.getCode() + <span class="hljs-string">&quot;, Error_Message:&quot;</span> + resultMessage);<br><br><br><span class="hljs-keyword">return</span> ResponseEntity.badRequest().body(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(MwheaderSetter.set(mwheader, ReturnCode.E905.getCode(), resultMessage)));<br>&#125;<br><br><span class="hljs-keyword">private</span> Mwheader <span class="hljs-title function_">setRequestMwheader</span><span class="hljs-params">(ContentCachingRequestWrapper nativeRequest)</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">requestEntityAsString</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(nativeRequest.getContentAsByteArray());<br><br>    <span class="hljs-type">Mwheader</span> <span class="hljs-variable">mwheader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Mwheader</span>();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">requestMsgId</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">requestSourceChannel</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">requestTxnSeq</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br><br><span class="hljs-keyword">if</span> (requestEntityAsString.split(<span class="hljs-string">&quot;\n&quot;</span>)[i].split(<span class="hljs-string">&quot;\&quot;&quot;</span>)[<span class="hljs-number">1</span>].equals(<span class="hljs-string">&quot;MSGID&quot;</span>)) &#123;<br><br>requestMsgId = requestEntityAsString.split(<span class="hljs-string">&quot;\n&quot;</span>)[i].split(<span class="hljs-string">&quot;\&quot;&quot;</span>)[<span class="hljs-number">3</span>];<br><br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (requestEntityAsString.split(<span class="hljs-string">&quot;\n&quot;</span>)[i].split(<span class="hljs-string">&quot;\&quot;&quot;</span>)[<span class="hljs-number">1</span>].equals(<span class="hljs-string">&quot;SOURCECHANNEL&quot;</span>)) &#123;<br><br>requestSourceChannel = requestEntityAsString.split(<span class="hljs-string">&quot;\n&quot;</span>)[i].split(<span class="hljs-string">&quot;\&quot;&quot;</span>)[<span class="hljs-number">3</span>];<br><br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (requestEntityAsString.split(<span class="hljs-string">&quot;\n&quot;</span>)[i].split(<span class="hljs-string">&quot;\&quot;&quot;</span>)[<span class="hljs-number">1</span>].equals(<span class="hljs-string">&quot;TXNSEQ&quot;</span>)) &#123;<br><br>requestTxnSeq = requestEntityAsString.split(<span class="hljs-string">&quot;\n&quot;</span>)[i].split(<span class="hljs-string">&quot;\&quot;&quot;</span>)[<span class="hljs-number">3</span>];<br><br>&#125;<br>&#125;<br>&#125; <span class="hljs-keyword">catch</span> (ArrayIndexOutOfBoundsException e) &#123;<br>logger.error(<span class="hljs-string">&quot;[LOG]Get_ArrayIndexOutOfBoundsException, MWHEADER資料輸入有誤&quot;</span>);<br>&#125;<br>    mwheader.setMsgId(requestMsgId);<br>    mwheader.setSourceChanel(requestSourceChannel);<br>    mwheader.setTxnSeq(requestTxnSeq);<br>    <span class="hljs-keyword">return</span> mwheader;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="方法二、用ObjectMapper處理HttpServletRequest獲得Request-Body"><a href="#方法二、用ObjectMapper處理HttpServletRequest獲得Request-Body" class="headerlink" title="方法二、用ObjectMapper處理HttpServletRequest獲得Request Body"></a>方法二、用ObjectMapper處理HttpServletRequest獲得Request Body</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ControllerAdvice</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebExceptionHandler</span> &#123;<br><span class="hljs-keyword">private</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(getClass());<br><br><span class="hljs-meta">@ExceptionHandler(Exception.class)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> ResponseEntity&lt;Error&gt; <span class="hljs-title function_">onException</span><span class="hljs-params">(Exception e, WebRequest webRequest)</span> &#123;<br><br><span class="hljs-type">ContentCachingRequestWrapper</span> <span class="hljs-variable">nativeRequest</span> <span class="hljs-operator">=</span> (ContentCachingRequestWrapper) ((ServletWebRequest) webRequest).getNativeRequest();<br>logger.error(<span class="hljs-string">&quot;[LOG]&quot;</span> + nativeRequest.getRequestURL() + <span class="hljs-string">&quot; Get_Exception &quot;</span> + <span class="hljs-string">&quot;Error_Code:&quot;</span> + ReturnCode.E999.getCode() + <span class="hljs-string">&quot;, Error_Message:&quot;</span> + ReturnCode.E999.getDesc());<br><span class="hljs-keyword">return</span> ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(MwheaderSetter.set(getMwheader(nativeRequest), ReturnCode.E999.getCode(), ReturnCode.E999.getDesc())));<br>&#125;<br><br><span class="hljs-meta">@ExceptionHandler(MethodArgumentNotValidException.class)</span><br><span class="hljs-keyword">public</span> ResponseEntity&lt;Error&gt; <span class="hljs-title function_">methodArgumentNotValidException</span><span class="hljs-params">(MethodArgumentNotValidException e, WebRequest webRequest)</span> &#123;<br>List&lt;FieldError&gt; errors = e.getBindingResult().getFieldErrors();<br>List&lt;String&gt; message = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>errors.forEach(error -&gt; &#123;<br>message.add(<span class="hljs-string">&quot;[&quot;</span> + error.getField() + <span class="hljs-string">&quot;:&quot;</span> + error.getDefaultMessage() + <span class="hljs-string">&quot;]&quot;</span>);<br>&#125;);<br><span class="hljs-type">String</span> <span class="hljs-variable">errorMessage</span> <span class="hljs-operator">=</span> StringUtils.join(message, <span class="hljs-string">&quot;,&quot;</span>);<br><span class="hljs-type">ContentCachingRequestWrapper</span> <span class="hljs-variable">nativeRequest</span> <span class="hljs-operator">=</span> (ContentCachingRequestWrapper) ((ServletWebRequest) webRequest).getNativeRequest();<br><span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">objectMapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>();<br><span class="hljs-type">String</span> <span class="hljs-variable">resultMessage</span> <span class="hljs-operator">=</span> MessageFormat.format(ReturnCode.E905.getDesc(), errorMessage);<br>logger.error(<span class="hljs-string">&quot;[LOG]&quot;</span> + nativeRequest.getRequestURL()  + <span class="hljs-string">&quot; Get_MethodArgumentNotValidException &quot;</span> + <span class="hljs-string">&quot;Error_Code:&quot;</span> + ReturnCode.E905.getCode() + <span class="hljs-string">&quot;, Error_Message:&quot;</span> + resultMessage);<br><br><span class="hljs-keyword">return</span> ResponseEntity.badRequest().body(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(MwheaderSetter.set(getMwheader(nativeRequest), ReturnCode.E905.getCode(), resultMessage)));<br>&#125;<br><br><span class="hljs-keyword">private</span> Mwheader <span class="hljs-title function_">getMwheader</span><span class="hljs-params">(ContentCachingRequestWrapper nativeRequest)</span> &#123;<br><span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">objectMapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>();<br><span class="hljs-type">JsonNode</span> <span class="hljs-variable">rootNode</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">try</span> &#123;<br>rootNode = objectMapper.readTree(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(nativeRequest.getContentAsByteArray()));<br>&#125; <span class="hljs-keyword">catch</span> (JsonProcessingException e1) &#123;<br>logger.error(<span class="hljs-string">&quot;[LOG]&quot;</span> + nativeRequest.getRequestURL()  + <span class="hljs-string">&quot; Get_JsonProcessingException &quot;</span> + <span class="hljs-string">&quot;Error_Code:&quot;</span> + ReturnCode.E999.getCode() + <span class="hljs-string">&quot;, Error_Message:&quot;</span> + ReturnCode.E999.getDesc() + <span class="hljs-string">&quot; Return Empty MWHEADER.&quot;</span>);<br><br>&#125;<br><span class="hljs-keyword">if</span> (rootNode == <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Mwheader</span>(<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br>&#125;<br><span class="hljs-keyword">return</span> objectMapper.convertValue(rootNode, Request.class).getMwheader();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Spring</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring Boot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JDK17 筆記</title>
    <link href="/2024/07/15/JDK17%E7%AD%86%E8%A8%98/"/>
    <url>/2024/07/15/JDK17%E7%AD%86%E8%A8%98/</url>
    
    <content type="html"><![CDATA[<h1 id="Multiline-Strings"><a href="#Multiline-Strings" class="headerlink" title="Multiline Strings"></a>Multiline Strings</h1><p>原先在使用多行字串的時候是以下圖示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">text</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Hello，&quot;</span> +<br><br>                <span class="hljs-string">&quot;How are &quot;</span> +<br><br>                <span class="hljs-string">&quot;you&quot;</span>;<br></code></pre></td></tr></table></figure><p>現在只需要使用 “”” 就可以表現多行字串了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string"></span><br><span class="hljs-string">          Hello,</span><br><span class="hljs-string"></span><br><span class="hljs-string">          ok bye bye</span><br><span class="hljs-string"></span><br><span class="hljs-string">         &quot;&quot;&quot;</span>;<br></code></pre></td></tr></table></figure><h1 id="Records"><a href="#Records" class="headerlink" title="Records"></a>Records</h1><p>Records 是一個比較不一樣的 class，他是一種配置屬性，但他跟原本配置的 class 又減少了大量的程式碼撰寫</p><p>原先的配置 class ， 需要自己聲明 getter、setter …. 等，或是使用 lomok ，但 Reocords 直接全部省略都不需要寫</p><p>且 Records 是把參數寫在 () 裡面</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">record</span> <span class="hljs-title class_">Customer</span> (<br><br>                        String name,<br><br>                        String email,<br><br>                        Integer age) &#123;<br><br><br><br>&#125;<br></code></pre></td></tr></table></figure><p>且可以直接將參數拿來驗證</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">record</span> <span class="hljs-title class_">Customer</span><span class="hljs-params">(</span><br><span class="hljs-params"></span><br><span class="hljs-params">        String name,</span><br><span class="hljs-params"></span><br><span class="hljs-params">        String email,</span><br><span class="hljs-params"></span><br><span class="hljs-params">        Integer age)</span> &#123;<br><br><br><br>    <span class="hljs-keyword">public</span> Customer &#123;<br><br>        <span class="hljs-keyword">if</span> (name.isBlank()) &#123;<br><br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.lang.IllegalArgumentException(<br><br>                    String.format(<span class="hljs-string">&quot;%f cannot be null&quot;</span>, name));<br><br>        &#125;<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>要注意的是，Records 在使用的時候也不是用 getXX() 和 setOO() 的方式，如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 如同 setOO() 方法</span><br><br><span class="hljs-type">Customer</span> <span class="hljs-variable">customer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Customer</span>(<span class="hljs-string">&quot;apple&quot;</span>, <span class="hljs-string">&quot;ss.gamil.com&quot;</span>, <span class="hljs-number">33</span>);<br><br><span class="hljs-comment">// 如同 getXX() 方法</span><br><br><span class="hljs-type">String</span> <span class="hljs-variable">newName</span> <span class="hljs-operator">=</span> customer.name();<br><br><span class="hljs-type">String</span> <span class="hljs-variable">newEmail</span> <span class="hljs-operator">=</span> customer.email();<br><br><span class="hljs-type">Integer</span> <span class="hljs-variable">newAge</span> <span class="hljs-operator">=</span> customer.age();<br></code></pre></td></tr></table></figure><h1 id="Switch-Expressions"><a href="#Switch-Expressions" class="headerlink" title="Switch Expressions"></a>Switch Expressions</h1><p>在 Java SE 12 的時候先引進了 Switch Expressions 方法，在 Java SE 13 的時候指定值的部分將原先的 break 移除掉改用 yield 使用，用法有點像 return 的感覺</p><p>範例:每天的英文單字為幾個英文單字組成</p><p>原來的 switch case 用法<br><img src="https://hackmd.io/_uploads/Hyr5Frysp.png" alt="image"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">DayOfWeek</span> <span class="hljs-variable">day</span> <span class="hljs-operator">=</span> DayOfWeek.FRIDAY;<br><br>       <span class="hljs-type">int</span> <span class="hljs-variable">numOfLetters</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">switch</span> (day) &#123;<br><br>           <span class="hljs-keyword">case</span> MONDAY, FRIDAY, SUNDAY -&gt; <span class="hljs-number">6</span>;<br><br>           <span class="hljs-keyword">case</span> TUESDAY                -&gt; <span class="hljs-number">7</span>;<br><br>           <span class="hljs-keyword">case</span> THURSDAY, SATURDAY     -&gt; &#123;<br><br>               System.out.println(<span class="hljs-number">8</span>);<br><br>               <span class="hljs-keyword">yield</span> <span class="hljs-number">8</span>;<br><br>           &#125;<br><br>           <span class="hljs-keyword">case</span> WEDNESDAY              -&gt; <span class="hljs-number">9</span>;<br><br>           <span class="hljs-keyword">default</span> -&gt; <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Exception</span>(<span class="hljs-string">&quot;exception&quot;</span>);<br><br>       &#125;;<br></code></pre></td></tr></table></figure><h1 id="Pattern-Matching-for-Instanceof"><a href="#Pattern-Matching-for-Instanceof" class="headerlink" title="Pattern Matching for Instanceof"></a>Pattern Matching for Instanceof</h1><p>Instanceof 是一個二元運算子，確定兩個 Object 之間的關係，一直到 JDK 14 更新了使用方法</p><p>原先判斷表達:判斷成立後需要自行轉換型態</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (animal <span class="hljs-keyword">instanceof</span> Cat) &#123;<br><br>    <span class="hljs-type">Cat</span> <span class="hljs-variable">cat</span> <span class="hljs-operator">=</span> (Cat) animal;<br><br>    cat.meow();<br><br>   <span class="hljs-comment">// other cat operations</span><br><br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (animal <span class="hljs-keyword">instanceof</span> Dog) &#123;<br><br>    <span class="hljs-type">Dog</span> <span class="hljs-variable">dog</span> <span class="hljs-operator">=</span> (Dog) animal;<br><br>    dog.woof();<br><br>    <span class="hljs-comment">// other dog operations</span><br><br>&#125;<br></code></pre></td></tr></table></figure><p>更新後的使用:判斷成立後直接進行轉換使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (animal <span class="hljs-keyword">instanceof</span> Cat cat) &#123;<br><br>    cat.meow();<br><br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(animal <span class="hljs-keyword">instanceof</span> Dog dog) &#123;<br><br>    dog.woof();<br><br>&#125;<br></code></pre></td></tr></table></figure><p>可以明顯發現整個程式碼大大減少，將原先需要轉換型態的部分省略了，會在於判斷成立之後直接幫忙轉換，就可以直接拿來使用</p><h1 id="Sealed-Classes-and-Interfaces"><a href="#Sealed-Classes-and-Interfaces" class="headerlink" title="Sealed Classes and Interfaces"></a>Sealed Classes and Interfaces</h1><p>Sealed Classes 是可以限定繼承的子項目，以確保不會被其他不相關的子項目繼承<br><img src="https://hackmd.io/_uploads/Bkqz5ryja.png" alt="image"></p><p>要繼承此父項目的子項目也必須使用 non-sealed 或是 final，不然會編譯錯誤<br><img src="https://hackmd.io/_uploads/Bk_7cSkop.png" alt="image"></p><p>若是其他未被同意的子項目繼承，則也會編譯錯誤<br><img src="https://hackmd.io/_uploads/rkr4qH1ia.png" alt="image"></p><p><strong>參考資料:</strong><br><a href="https://www.tpisoftware.com/tpu/articleDetails/2890">https://www.tpisoftware.com/tpu/articleDetails/2890</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
