<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Spring Boot使用Cache Filter Chain重複使用HttpServletRequest</title>
    <link href="/2024/07/15/CacheSettingFilter%E7%AD%86%E8%A8%98/"/>
    <url>/2024/07/15/CacheSettingFilter%E7%AD%86%E8%A8%98/</url>
    
    <content type="html"><![CDATA[<h1 id="業務場景"><a href="#業務場景" class="headerlink" title="業務場景"></a>業務場景</h1><p>如果需要實作一個攔截器攔截Http Request傳入的訊息。通常情況下，HttpServletRequst中的Request Body內容只會讀取一次，但是可能某些情境下可能會讀取多次，由於Request Body內容是以Flow的形式存在,所以第一次讀取完成後,第二次就無法讀取了,一個典型的場景就是Filter 在取得Request Body的內容後,就無法繼續讀取Flow了。</p><p>以下使用Filter Chain 搭配ContentCachingRequestWrapper，將HttpServletRequst存進ContentCachingRequestWrapper中，達到可以多次利用的效果。並以ExceptionHandler作為業務情境，實作錯誤處理時可以獲得來源端的URL及Request Body作為實作目標。</p><h1 id="Filter-Config"><a href="#Filter-Config" class="headerlink" title="Filter Config"></a>Filter Config</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ims.svc.sremonitor.collection.filter;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><span class="hljs-keyword">import</span> org.springframework.web.filter.OncePerRequestFilter;<br><span class="hljs-keyword">import</span> org.springframework.web.util.ContentCachingRequestWrapper;<br><br><span class="hljs-keyword">import</span> jakarta.servlet.FilterChain;<br><span class="hljs-keyword">import</span> jakarta.servlet.ServletException;<br><span class="hljs-keyword">import</span> jakarta.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> jakarta.servlet.http.HttpServletResponse;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">logFilter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">OncePerRequestFilter</span> &#123;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilterInternal</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>     <span class="hljs-type">ContentCachingRequestWrapper</span> <span class="hljs-variable">contentCachingRequestWrapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ContentCachingRequestWrapper</span>((HttpServletRequest) request);<br>     filterChain.doFilter(contentCachingRequestWrapper, response);<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="方法一、用字串方式處理HttpServletRequest獲得Request-Body"><a href="#方法一、用字串方式處理HttpServletRequest獲得Request-Body" class="headerlink" title="方法一、用字串方式處理HttpServletRequest獲得Request Body"></a>方法一、用字串方式處理HttpServletRequest獲得Request Body</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ControllerAdvice</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebExceptionHandler</span> &#123;<br><span class="hljs-keyword">private</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(getClass());<br><br><span class="hljs-meta">@ExceptionHandler(Exception.class)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> ResponseEntity&lt;Error&gt; <span class="hljs-title function_">onException</span><span class="hljs-params">(Exception e, WebRequest webRequest)</span> &#123;<br><br><span class="hljs-type">ContentCachingRequestWrapper</span> <span class="hljs-variable">nativeRequest</span> <span class="hljs-operator">=</span> (ContentCachingRequestWrapper) ((ServletWebRequest) webRequest).getNativeRequest();<br><span class="hljs-type">Mwheader</span> <span class="hljs-variable">mwheader</span> <span class="hljs-operator">=</span> setRequestMwheader(nativeRequest);<br>logger.error(<span class="hljs-string">&quot;[LOG]&quot;</span> + nativeRequest.getRequestURL() + <span class="hljs-string">&quot; Get_Exception &quot;</span> + <span class="hljs-string">&quot;Error_Code:&quot;</span> + ReturnCode.E999.getCode() + <span class="hljs-string">&quot;, Error_Message:&quot;</span> + ReturnCode.E999.getDesc());<br><span class="hljs-keyword">return</span> ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(MwheaderSetter.set(mwheader, ReturnCode.E999.getCode(), ReturnCode.E999.getDesc())));<br>&#125;<br><br><span class="hljs-meta">@ExceptionHandler(MethodArgumentNotValidException.class)</span><br><span class="hljs-keyword">public</span> ResponseEntity&lt;Error&gt; <span class="hljs-title function_">methodArgumentNotValidException</span><span class="hljs-params">(MethodArgumentNotValidException e, WebRequest webRequest)</span> &#123;<br>List&lt;FieldError&gt; errors = e.getBindingResult().getFieldErrors();<br>List&lt;String&gt; message = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>errors.forEach(error -&gt; &#123;<br>message.add(<span class="hljs-string">&quot;[&quot;</span> + error.getField() + <span class="hljs-string">&quot;:&quot;</span> + error.getDefaultMessage() + <span class="hljs-string">&quot;]&quot;</span>);<br>&#125;);<br><span class="hljs-type">String</span> <span class="hljs-variable">errorMessage</span> <span class="hljs-operator">=</span> StringUtils.join(message, <span class="hljs-string">&quot;,&quot;</span>);<br><span class="hljs-type">ContentCachingRequestWrapper</span> <span class="hljs-variable">nativeRequest</span> <span class="hljs-operator">=</span> (ContentCachingRequestWrapper) ((ServletWebRequest) webRequest).getNativeRequest();<br><br><span class="hljs-type">Mwheader</span> <span class="hljs-variable">mwheader</span> <span class="hljs-operator">=</span> setRequestMwheader(nativeRequest);<br><span class="hljs-type">String</span> <span class="hljs-variable">resultMessage</span> <span class="hljs-operator">=</span> MessageFormat.format(ReturnCode.E905.getDesc(), errorMessage);<br>logger.error(<span class="hljs-string">&quot;[LOG]&quot;</span> + nativeRequest.getRequestURL()  + <span class="hljs-string">&quot; Get_MethodArgumentNotValidException &quot;</span> + <span class="hljs-string">&quot;Error_Code:&quot;</span> + ReturnCode.E905.getCode() + <span class="hljs-string">&quot;, Error_Message:&quot;</span> + resultMessage);<br><br><br><span class="hljs-keyword">return</span> ResponseEntity.badRequest().body(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(MwheaderSetter.set(mwheader, ReturnCode.E905.getCode(), resultMessage)));<br>&#125;<br><br><span class="hljs-keyword">private</span> Mwheader <span class="hljs-title function_">setRequestMwheader</span><span class="hljs-params">(ContentCachingRequestWrapper nativeRequest)</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">requestEntityAsString</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(nativeRequest.getContentAsByteArray());<br><br>    <span class="hljs-type">Mwheader</span> <span class="hljs-variable">mwheader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Mwheader</span>();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">requestMsgId</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">requestSourceChannel</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">requestTxnSeq</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br><br><span class="hljs-keyword">if</span> (requestEntityAsString.split(<span class="hljs-string">&quot;\n&quot;</span>)[i].split(<span class="hljs-string">&quot;\&quot;&quot;</span>)[<span class="hljs-number">1</span>].equals(<span class="hljs-string">&quot;MSGID&quot;</span>)) &#123;<br><br>requestMsgId = requestEntityAsString.split(<span class="hljs-string">&quot;\n&quot;</span>)[i].split(<span class="hljs-string">&quot;\&quot;&quot;</span>)[<span class="hljs-number">3</span>];<br><br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (requestEntityAsString.split(<span class="hljs-string">&quot;\n&quot;</span>)[i].split(<span class="hljs-string">&quot;\&quot;&quot;</span>)[<span class="hljs-number">1</span>].equals(<span class="hljs-string">&quot;SOURCECHANNEL&quot;</span>)) &#123;<br><br>requestSourceChannel = requestEntityAsString.split(<span class="hljs-string">&quot;\n&quot;</span>)[i].split(<span class="hljs-string">&quot;\&quot;&quot;</span>)[<span class="hljs-number">3</span>];<br><br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (requestEntityAsString.split(<span class="hljs-string">&quot;\n&quot;</span>)[i].split(<span class="hljs-string">&quot;\&quot;&quot;</span>)[<span class="hljs-number">1</span>].equals(<span class="hljs-string">&quot;TXNSEQ&quot;</span>)) &#123;<br><br>requestTxnSeq = requestEntityAsString.split(<span class="hljs-string">&quot;\n&quot;</span>)[i].split(<span class="hljs-string">&quot;\&quot;&quot;</span>)[<span class="hljs-number">3</span>];<br><br>&#125;<br>&#125;<br>&#125; <span class="hljs-keyword">catch</span> (ArrayIndexOutOfBoundsException e) &#123;<br>logger.error(<span class="hljs-string">&quot;[LOG]Get_ArrayIndexOutOfBoundsException, MWHEADER資料輸入有誤&quot;</span>);<br>&#125;<br>    mwheader.setMsgId(requestMsgId);<br>    mwheader.setSourceChanel(requestSourceChannel);<br>    mwheader.setTxnSeq(requestTxnSeq);<br>    <span class="hljs-keyword">return</span> mwheader;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="方法二、用ObjectMapper處理HttpServletRequest獲得Request-Body"><a href="#方法二、用ObjectMapper處理HttpServletRequest獲得Request-Body" class="headerlink" title="方法二、用ObjectMapper處理HttpServletRequest獲得Request Body"></a>方法二、用ObjectMapper處理HttpServletRequest獲得Request Body</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ControllerAdvice</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebExceptionHandler</span> &#123;<br><span class="hljs-keyword">private</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(getClass());<br><br><span class="hljs-meta">@ExceptionHandler(Exception.class)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> ResponseEntity&lt;Error&gt; <span class="hljs-title function_">onException</span><span class="hljs-params">(Exception e, WebRequest webRequest)</span> &#123;<br><br><span class="hljs-type">ContentCachingRequestWrapper</span> <span class="hljs-variable">nativeRequest</span> <span class="hljs-operator">=</span> (ContentCachingRequestWrapper) ((ServletWebRequest) webRequest).getNativeRequest();<br>logger.error(<span class="hljs-string">&quot;[LOG]&quot;</span> + nativeRequest.getRequestURL() + <span class="hljs-string">&quot; Get_Exception &quot;</span> + <span class="hljs-string">&quot;Error_Code:&quot;</span> + ReturnCode.E999.getCode() + <span class="hljs-string">&quot;, Error_Message:&quot;</span> + ReturnCode.E999.getDesc());<br><span class="hljs-keyword">return</span> ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(MwheaderSetter.set(getMwheader(nativeRequest), ReturnCode.E999.getCode(), ReturnCode.E999.getDesc())));<br>&#125;<br><br><span class="hljs-meta">@ExceptionHandler(MethodArgumentNotValidException.class)</span><br><span class="hljs-keyword">public</span> ResponseEntity&lt;Error&gt; <span class="hljs-title function_">methodArgumentNotValidException</span><span class="hljs-params">(MethodArgumentNotValidException e, WebRequest webRequest)</span> &#123;<br>List&lt;FieldError&gt; errors = e.getBindingResult().getFieldErrors();<br>List&lt;String&gt; message = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>errors.forEach(error -&gt; &#123;<br>message.add(<span class="hljs-string">&quot;[&quot;</span> + error.getField() + <span class="hljs-string">&quot;:&quot;</span> + error.getDefaultMessage() + <span class="hljs-string">&quot;]&quot;</span>);<br>&#125;);<br><span class="hljs-type">String</span> <span class="hljs-variable">errorMessage</span> <span class="hljs-operator">=</span> StringUtils.join(message, <span class="hljs-string">&quot;,&quot;</span>);<br><span class="hljs-type">ContentCachingRequestWrapper</span> <span class="hljs-variable">nativeRequest</span> <span class="hljs-operator">=</span> (ContentCachingRequestWrapper) ((ServletWebRequest) webRequest).getNativeRequest();<br><span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">objectMapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>();<br><span class="hljs-type">String</span> <span class="hljs-variable">resultMessage</span> <span class="hljs-operator">=</span> MessageFormat.format(ReturnCode.E905.getDesc(), errorMessage);<br>logger.error(<span class="hljs-string">&quot;[LOG]&quot;</span> + nativeRequest.getRequestURL()  + <span class="hljs-string">&quot; Get_MethodArgumentNotValidException &quot;</span> + <span class="hljs-string">&quot;Error_Code:&quot;</span> + ReturnCode.E905.getCode() + <span class="hljs-string">&quot;, Error_Message:&quot;</span> + resultMessage);<br><br><span class="hljs-keyword">return</span> ResponseEntity.badRequest().body(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(MwheaderSetter.set(getMwheader(nativeRequest), ReturnCode.E905.getCode(), resultMessage)));<br>&#125;<br><br><span class="hljs-keyword">private</span> Mwheader <span class="hljs-title function_">getMwheader</span><span class="hljs-params">(ContentCachingRequestWrapper nativeRequest)</span> &#123;<br><span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">objectMapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>();<br><span class="hljs-type">JsonNode</span> <span class="hljs-variable">rootNode</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">try</span> &#123;<br>rootNode = objectMapper.readTree(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(nativeRequest.getContentAsByteArray()));<br>&#125; <span class="hljs-keyword">catch</span> (JsonProcessingException e1) &#123;<br>logger.error(<span class="hljs-string">&quot;[LOG]&quot;</span> + nativeRequest.getRequestURL()  + <span class="hljs-string">&quot; Get_JsonProcessingException &quot;</span> + <span class="hljs-string">&quot;Error_Code:&quot;</span> + ReturnCode.E999.getCode() + <span class="hljs-string">&quot;, Error_Message:&quot;</span> + ReturnCode.E999.getDesc() + <span class="hljs-string">&quot; Return Empty MWHEADER.&quot;</span>);<br><br>&#125;<br><span class="hljs-keyword">if</span> (rootNode == <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Mwheader</span>(<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br>&#125;<br><span class="hljs-keyword">return</span> objectMapper.convertValue(rootNode, Request.class).getMwheader();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>JDK17 筆記</title>
    <link href="/2024/07/15/JDK17%E7%AD%86%E8%A8%98/"/>
    <url>/2024/07/15/JDK17%E7%AD%86%E8%A8%98/</url>
    
    <content type="html"><![CDATA[<h1 id="Multiline-Strings"><a href="#Multiline-Strings" class="headerlink" title="Multiline Strings"></a>Multiline Strings</h1><p>原先在使用多行字串的時候是以下圖示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">text</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Hello，&quot;</span> +<br><br>                <span class="hljs-string">&quot;How are &quot;</span> +<br><br>                <span class="hljs-string">&quot;you&quot;</span>;<br></code></pre></td></tr></table></figure><p>現在只需要使用 “”” 就可以表現多行字串了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string"></span><br><span class="hljs-string">          Hello,</span><br><span class="hljs-string"></span><br><span class="hljs-string">          ok bye bye</span><br><span class="hljs-string"></span><br><span class="hljs-string">         &quot;&quot;&quot;</span>;<br></code></pre></td></tr></table></figure><h1 id="Records"><a href="#Records" class="headerlink" title="Records"></a>Records</h1><p>Records 是一個比較不一樣的 class，他是一種配置屬性，但他跟原本配置的 class 又減少了大量的程式碼撰寫</p><p>原先的配置 class ， 需要自己聲明 getter、setter …. 等，或是使用 lomok ，但 Reocords 直接全部省略都不需要寫</p><p>且 Records 是把參數寫在 () 裡面</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">record</span> <span class="hljs-title class_">Customer</span> (<br><br>                        String name,<br><br>                        String email,<br><br>                        Integer age) &#123;<br><br><br><br>&#125;<br></code></pre></td></tr></table></figure><p>且可以直接將參數拿來驗證</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">record</span> <span class="hljs-title class_">Customer</span><span class="hljs-params">(</span><br><span class="hljs-params"></span><br><span class="hljs-params">        String name,</span><br><span class="hljs-params"></span><br><span class="hljs-params">        String email,</span><br><span class="hljs-params"></span><br><span class="hljs-params">        Integer age)</span> &#123;<br><br><br><br>    <span class="hljs-keyword">public</span> Customer &#123;<br><br>        <span class="hljs-keyword">if</span> (name.isBlank()) &#123;<br><br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.lang.IllegalArgumentException(<br><br>                    String.format(<span class="hljs-string">&quot;%f cannot be null&quot;</span>, name));<br><br>        &#125;<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>要注意的是，Records 在使用的時候也不是用 getXX() 和 setOO() 的方式，如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 如同 setOO() 方法</span><br><br><span class="hljs-type">Customer</span> <span class="hljs-variable">customer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Customer</span>(<span class="hljs-string">&quot;apple&quot;</span>, <span class="hljs-string">&quot;ss.gamil.com&quot;</span>, <span class="hljs-number">33</span>);<br><br><span class="hljs-comment">// 如同 getXX() 方法</span><br><br><span class="hljs-type">String</span> <span class="hljs-variable">newName</span> <span class="hljs-operator">=</span> customer.name();<br><br><span class="hljs-type">String</span> <span class="hljs-variable">newEmail</span> <span class="hljs-operator">=</span> customer.email();<br><br><span class="hljs-type">Integer</span> <span class="hljs-variable">newAge</span> <span class="hljs-operator">=</span> customer.age();<br></code></pre></td></tr></table></figure><h1 id="Switch-Expressions"><a href="#Switch-Expressions" class="headerlink" title="Switch Expressions"></a>Switch Expressions</h1><p>在 Java SE 12 的時候先引進了 Switch Expressions 方法，在 Java SE 13 的時候指定值的部分將原先的 break 移除掉改用 yield 使用，用法有點像 return 的感覺</p><p>範例:每天的英文單字為幾個英文單字組成</p><p>原來的 switch case 用法<br><img src="https://hackmd-prod-images.s3-ap-northeast-1.amazonaws.com/uploads/upload_7562bd778b4b79a24d8651a302f8add0.png?AWSAccessKeyId=AKIA3XSAAW6AWSKNINWO&Expires=1721054726&Signature=JRtTU1lM5QBkFQezAoPBBhmjAkM=" alt="image"><br>Switch Expressions</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">DayOfWeek</span> <span class="hljs-variable">day</span> <span class="hljs-operator">=</span> DayOfWeek.FRIDAY;<br><br>       <span class="hljs-type">int</span> <span class="hljs-variable">numOfLetters</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">switch</span> (day) &#123;<br><br>           <span class="hljs-keyword">case</span> MONDAY, FRIDAY, SUNDAY -&gt; <span class="hljs-number">6</span>;<br><br>           <span class="hljs-keyword">case</span> TUESDAY                -&gt; <span class="hljs-number">7</span>;<br><br>           <span class="hljs-keyword">case</span> THURSDAY, SATURDAY     -&gt; &#123;<br><br>               System.out.println(<span class="hljs-number">8</span>);<br><br>               <span class="hljs-keyword">yield</span> <span class="hljs-number">8</span>;<br><br>           &#125;<br><br>           <span class="hljs-keyword">case</span> WEDNESDAY              -&gt; <span class="hljs-number">9</span>;<br><br>           <span class="hljs-keyword">default</span> -&gt; <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Exception</span>(<span class="hljs-string">&quot;exception&quot;</span>);<br><br>       &#125;;<br></code></pre></td></tr></table></figure><h1 id="Pattern-Matching-for-Instanceof"><a href="#Pattern-Matching-for-Instanceof" class="headerlink" title="Pattern Matching for Instanceof"></a>Pattern Matching for Instanceof</h1><p>Instanceof 是一個二元運算子，確定兩個 Object 之間的關係，一直到 JDK 14 更新了使用方法</p><p>原先判斷表達:判斷成立後需要自行轉換型態</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (animal <span class="hljs-keyword">instanceof</span> Cat) &#123;<br><br>    <span class="hljs-type">Cat</span> <span class="hljs-variable">cat</span> <span class="hljs-operator">=</span> (Cat) animal;<br><br>    cat.meow();<br><br>   <span class="hljs-comment">// other cat operations</span><br><br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (animal <span class="hljs-keyword">instanceof</span> Dog) &#123;<br><br>    <span class="hljs-type">Dog</span> <span class="hljs-variable">dog</span> <span class="hljs-operator">=</span> (Dog) animal;<br><br>    dog.woof();<br><br>    <span class="hljs-comment">// other dog operations</span><br><br>&#125;<br></code></pre></td></tr></table></figure><p>更新後的使用:判斷成立後直接進行轉換使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (animal <span class="hljs-keyword">instanceof</span> Cat cat) &#123;<br><br>    cat.meow();<br><br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(animal <span class="hljs-keyword">instanceof</span> Dog dog) &#123;<br><br>    dog.woof();<br><br>&#125;<br></code></pre></td></tr></table></figure><p>可以明顯發現整個程式碼大大減少，將原先需要轉換型態的部分省略了，會在於判斷成立之後直接幫忙轉換，就可以直接拿來使用</p><h1 id="Sealed-Classes-and-Interfaces"><a href="#Sealed-Classes-and-Interfaces" class="headerlink" title="Sealed Classes and Interfaces"></a>Sealed Classes and Interfaces</h1><p>Sealed Classes 是可以限定繼承的子項目，以確保不會被其他不相關的子項目繼承<br><img src="https://hackmd-prod-images.s3-ap-northeast-1.amazonaws.com/uploads/upload_b3ddc8b7e67b02f845c7b0aa087edf1c.png?AWSAccessKeyId=AKIA3XSAAW6AWSKNINWO&Expires=1721055585&Signature=YbfrlTE1QaInWV16SXlq66rdQAo=" alt="image"></p><p>要繼承此父項目的子項目也必須使用 non-sealed 或是 final，不然會編譯錯誤<br><img src="https://hackmd-prod-images.s3-ap-northeast-1.amazonaws.com/uploads/upload_b28e98cbfd073da701d6c63f97f2306c.png?AWSAccessKeyId=AKIA3XSAAW6AWSKNINWO&Expires=1721055527&Signature=fYj02zWZNE0xuGKsf2TY5qlEnsU=" alt="image"></p><p>若是其他未被同意的子項目繼承，則也會編譯錯誤<br><img src="https://hackmd-prod-images.s3-ap-northeast-1.amazonaws.com/uploads/upload_10984b80a0ebb12697f4e9ba13f504a4.png?AWSAccessKeyId=AKIA3XSAAW6AWSKNINWO&Expires=1721055619&Signature=9zmHGPrKLIONecfdd7NJK6cChe8=" alt="image"></p><p><strong>參考資料:</strong><br><a href="https://www.tpisoftware.com/tpu/articleDetails/2890">https://www.tpisoftware.com/tpu/articleDetails/2890</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
