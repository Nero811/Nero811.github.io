<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>整合Keycloak實現Single-Sign-On (SSO) 及 OAuth2.0 with OpenId Connect</title>
    <link href="/2024/07/21/keycloak/"/>
    <url>/2024/07/21/keycloak/</url>
    
    <content type="html"><![CDATA[<h1 id="Keycloak簡介"><a href="#Keycloak簡介" class="headerlink" title="Keycloak簡介"></a>Keycloak簡介</h1><p>截至WIKI:<br>Keycloak是一個開源軟體產品，旨在為現代的應用程式和服務，提供包含身份管理和訪問管理功能的單點登錄工具。截至2018年3月，紅帽公司負責管理這一JBoss社區項目，並將其作為他們RH-SSO產品的上游項目。[2]從概念的角度上來說，該工具的目的是，只用少量編碼甚至不用編碼，就能很容易地使應用程式和服務更安全。</p><h1 id="使用Docker在本地架設Keycloak-Server"><a href="#使用Docker在本地架設Keycloak-Server" class="headerlink" title="使用Docker在本地架設Keycloak Server"></a>使用Docker在本地架設Keycloak Server</h1><h2 id="指令"><a href="#指令" class="headerlink" title="指令:"></a>指令:</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">docker <span class="hljs-built_in">run</span> -p 8080:8080 -e <span class="hljs-attribute">KEYCLOAK_ADMIN</span>=admin -e <span class="hljs-attribute">KEYCLOAK_ADMIN_PASSWORD</span>=admin quay.io/keycloak/keycloak:23.0.7 start-dev<br></code></pre></td></tr></table></figure><h2 id="接著輸入-http-localhost-8080-就可以看到admin的登入畫面"><a href="#接著輸入-http-localhost-8080-就可以看到admin的登入畫面" class="headerlink" title="接著輸入 http://localhost:8080 就可以看到admin的登入畫面"></a>接著輸入 <a href="http://localhost:8080/">http://localhost:8080</a> 就可以看到admin的登入畫面</h2><p><img src="/./image/keycloak_login_1.png"><br><img src="/./image/keycloak_login_2.png"></p><h2 id="登入後點選左上角Create-realm-創建一個realm"><a href="#登入後點選左上角Create-realm-創建一個realm" class="headerlink" title="登入後點選左上角Create realm 創建一個realm"></a>登入後點選左上角Create realm 創建一個realm</h2><p><img src="/./image/keycloak_create_realm_1.png"></p><h2 id="登入後點選左上角Create-realm-創建一個client"><a href="#登入後點選左上角Create-realm-創建一個client" class="headerlink" title="登入後點選左上角Create realm 創建一個client"></a>登入後點選左上角Create realm 創建一個client</h2><p><img src="/./image/keycloak_create_client_1.png"><br>Valid redirect URIs 是Keycloak登入認證後，Redirect回Application的URI，這邊設定 <a href="http://localhost:8081/">http://localhost:8081/</a>* 是我自己本機服務的URL<br><img src="/./image/keycloak_create_client_2.png"><br>開啟 OIDC Flow 與 OAuth2.0 Flow<br><img src="/./image/keycloak_create_client_3.png"><br>這邊可以看到 client secret 之後要加入Application做為Issuer識別用<br><img src="/./image/keycloak_create_client_4.png"><br>特別注意若希望client端在call取得Access Token的Endpoint(&#x2F;realms&#x2F;{realm-name}&#x2F;protocol&#x2F;openid-connect&#x2F;token)同時回傳Id_Token的話，記得要在Client Scope中加入openid<br><img src="/./image/keycloak_create_client_5.png"></p><h2 id="創建user"><a href="#創建user" class="headerlink" title="創建user"></a>創建user</h2><p><img src="/./image/keycloak_create_user_1.png"><br><img src="/./image/keycloak_create_user_2.png"><br>設置user密碼<br><img src="/./image/keycloak_create_user_3.png"></p><h1 id="建立Spring-Security微服務"><a href="#建立Spring-Security微服務" class="headerlink" title="建立Spring Security微服務"></a>建立Spring Security微服務</h1><h2 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.2.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span> /&gt;</span> <span class="hljs-comment">&lt;!-- lookup parent from repository --&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.example<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>demo_oauth<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>demo_oauth<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span>Demo project for Spring Boot<span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>17<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-oauth2-client<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.security<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-security-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-oauth2-resource-server<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.httpcomponents.client5<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>httpclient5-fluent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">excludes</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">exclude</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">exclude</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">excludes</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h2 id="properties"><a href="#properties" class="headerlink" title="properties"></a>properties</h2><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">server.port</span>=<span class="hljs-number">8081</span><br><br><span class="hljs-comment"># OAuth2 Client settings</span><br><span class="hljs-attr">base.url</span>=http://localhost:<span class="hljs-number">8080</span><br><span class="hljs-attr">successful.redirect.url</span>=http://localhost:<span class="hljs-number">8081</span>/loginSuccess<br><span class="hljs-attr">spring.security.oauth2.client.registration.keycloak.client-id</span>=user<br><span class="hljs-attr">spring.security.oauth2.client.registration.keycloak.client-secret</span>=g3fDmtYeX3LlAS3ovxmWqtH0KXEi7rgS<br><span class="hljs-attr">spring.security.oauth2.client.registration.keycloak.authorization-grant-type</span>=authorization_code<br><br><span class="hljs-comment"># Spring Security oauth2 Endpoint</span><br><span class="hljs-attr">spring.security.oauth2.client.registration.keycloak.redirect-uri</span>=http://localhost:<span class="hljs-number">8081</span>/login/oauth2/code/keycloak<br><span class="hljs-attr">spring.security.oauth2.client.registration.keycloak.scope</span>=email,profile,openid<br><br><span class="hljs-comment">## OAuth2 Provider settings for Keycloak</span><br><span class="hljs-attr">spring.security.oauth2.client.provider.keycloak.authorization-uri</span>=<span class="hljs-variable">$&#123;base.url&#125;</span>/realms/demo/protocol/openid-connect/auth<br><span class="hljs-attr">spring.security.oauth2.client.provider.keycloak.token-uri</span>=<span class="hljs-variable">$&#123;base.url&#125;</span>/realms/demo/protocol/openid-connect/token<br><span class="hljs-attr">spring.security.oauth2.client.provider.keycloak.user-info-uri</span>=<span class="hljs-variable">$&#123;base.url&#125;</span>/realms/demo/protocol/openid-connect/userinfo<br><span class="hljs-attr">spring.security.oauth2.client.provider.keycloak.user-name-attribute</span>=preferred_username<br><span class="hljs-attr">spring.security.oauth2.client.provider.keycloak.issuer-uri</span>=<span class="hljs-variable">$&#123;base.url&#125;</span>/realms/demo<br><span class="hljs-attr">spring.security.oauth2.client.provider.keycloak.jwk-set-uri</span>=<span class="hljs-variable">$&#123;base.url&#125;</span>/realms/demo/protocol/openid-connect/certs<br><span class="hljs-attr">spring.security.oauth2.resourceserver.jwt.jwk-set-uri</span>=<span class="hljs-variable">$&#123;base.url&#125;</span>/realms/demo/protocol/openid-connect/certs<br><br></code></pre></td></tr></table></figure><h2 id="Security-Config"><a href="#Security-Config" class="headerlink" title="Security Config"></a>Security Config</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.demo_oauth.config;<br><br><br><span class="hljs-keyword">import</span> org.apache.hc.client5.http.classic.HttpClient;<br><span class="hljs-keyword">import</span> org.apache.hc.client5.http.impl.classic.HttpClients;<br><span class="hljs-keyword">import</span> org.apache.hc.client5.http.impl.io.PoolingHttpClientConnectionManagerBuilder;<br><span class="hljs-keyword">import</span> org.apache.hc.client5.http.io.HttpClientConnectionManager;<br><span class="hljs-keyword">import</span> org.apache.hc.client5.http.ssl.SSLConnectionSocketFactory;<br><span class="hljs-keyword">import</span> org.apache.hc.client5.http.ssl.SSLConnectionSocketFactoryBuilder;<br><span class="hljs-keyword">import</span> org.apache.hc.client5.http.ssl.TrustAllStrategy;<br><span class="hljs-keyword">import</span> org.apache.hc.core5.ssl.SSLContexts;<br><br><span class="hljs-keyword">import</span> java.security.KeyManagementException;<br><span class="hljs-keyword">import</span> java.security.KeyStoreException;<br><span class="hljs-keyword">import</span> java.security.NoSuchAlgorithmException;<br><br><span class="hljs-keyword">import</span> javax.net.ssl.SSLContext;<br><br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.http.client.ClientHttpRequestFactory;<br><span class="hljs-keyword">import</span> org.springframework.http.client.HttpComponentsClientHttpRequestFactory;<br><span class="hljs-keyword">import</span> org.springframework.security.config.Customizer;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;<br><span class="hljs-keyword">import</span> org.springframework.security.oauth2.jwt.JwtDecoder;<br><span class="hljs-keyword">import</span> org.springframework.security.oauth2.jwt.NimbusJwtDecoder;<br><span class="hljs-keyword">import</span> org.springframework.security.oauth2.server.resource.authentication.JwtAuthenticationConverter;<br><span class="hljs-keyword">import</span> org.springframework.security.web.SecurityFilterChain;<br><span class="hljs-keyword">import</span> org.springframework.web.client.RestTemplate;<br><span class="hljs-keyword">import</span> org.springframework.web.cors.CorsConfiguration;<br><span class="hljs-keyword">import</span> org.springframework.web.cors.CorsConfigurationSource;<br><span class="hljs-keyword">import</span> org.springframework.web.cors.UrlBasedCorsConfigurationSource;<br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableMethodSecurity</span><br><span class="hljs-meta">@EnableWebSecurity</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityConfig</span> &#123;<br><br><span class="hljs-meta">@Value(&quot;$&#123;spring.security.oauth2.client.provider.keycloak.issuer-uri&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String issuerUri;<br><br><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> JwtAuthenticationConverter jwtAuthenticationConverter;<br><br><span class="hljs-meta">@Bean</span><br><span class="hljs-keyword">public</span> SecurityFilterChain <span class="hljs-title function_">securityFilterChain</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>http.csrf(csrf -&gt; csrf.disable());<br><br>http<br>.authorizeHttpRequests(authorize -&gt; authorize.anyRequest().authenticated())<br>.oauth2ResourceServer((oauth2) -&gt; oauth2.jwt(jwt -&gt; jwt.decoder(jwtDecoder()))) <span class="hljs-comment">// 驗證 access token</span><br>.oauth2Login(Customizer.withDefaults()); <span class="hljs-comment">// 使用表單登入</span><br><span class="hljs-keyword">return</span> http.build();<br>&#125;<br><br><span class="hljs-keyword">private</span> JwtDecoder <span class="hljs-title function_">jwtDecoder</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-type">RestTemplate</span> <span class="hljs-variable">restTemplate</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RestTemplate</span>();<br>restTemplate.setRequestFactory(trustAllClientHttpRequestFactory());<br><br><span class="hljs-keyword">return</span> NimbusJwtDecoder.withIssuerLocation(issuerUri).restOperations(restTemplate).build();<br>&#125;<br><br><span class="hljs-keyword">private</span> ClientHttpRequestFactory <span class="hljs-title function_">trustAllClientHttpRequestFactory</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-type">SSLContext</span> <span class="hljs-variable">sslcontext</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">try</span> &#123;<br>sslcontext = SSLContexts.custom()<br>        .loadTrustMaterial(<span class="hljs-literal">null</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">TrustAllStrategy</span>())<br>        .build();<br>&#125; <span class="hljs-keyword">catch</span> (KeyManagementException | NoSuchAlgorithmException | KeyStoreException e) &#123;<br>e.printStackTrace();<br>&#125;<br><span class="hljs-type">SSLConnectionSocketFactory</span> <span class="hljs-variable">sslSocketFactory</span> <span class="hljs-operator">=</span> SSLConnectionSocketFactoryBuilder.create()<br>                .setSslContext(sslcontext)<br>                .build();<br><span class="hljs-type">HttpClientConnectionManager</span> <span class="hljs-variable">connectionManager</span> <span class="hljs-operator">=</span> PoolingHttpClientConnectionManagerBuilder.create()<br>                .setSSLSocketFactory(sslSocketFactory)<br>                .build();<br><span class="hljs-type">HttpClient</span> <span class="hljs-variable">httlClient</span> <span class="hljs-operator">=</span> HttpClients.custom().setConnectionManager(connectionManager).evictExpiredConnections()<br>.build();<br><br><span class="hljs-type">ClientHttpRequestFactory</span> <span class="hljs-variable">clientHttpRequestFactory</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpComponentsClientHttpRequestFactory</span>(httlClient);<br><span class="hljs-keyword">return</span> clientHttpRequestFactory;<br>&#125;<br><br><span class="hljs-meta">@Bean</span><br>CorsConfigurationSource <span class="hljs-title function_">corsConfigurationSource</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">CorsConfiguration</span> <span class="hljs-variable">config</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">CorsConfiguration</span>();<br><br>config.addAllowedHeader(<span class="hljs-string">&quot;*&quot;</span>);<br>config.addAllowedMethod(<span class="hljs-string">&quot;*&quot;</span>);<br>config.addAllowedOriginPattern(<span class="hljs-string">&quot;*&quot;</span>);<br>config.setAllowCredentials(<span class="hljs-literal">true</span>);<br>config.addExposedHeader(<span class="hljs-string">&quot;*&quot;</span>);<br>config.setMaxAge(<span class="hljs-number">1800L</span>);<br><br><span class="hljs-type">UrlBasedCorsConfigurationSource</span> <span class="hljs-variable">source</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UrlBasedCorsConfigurationSource</span>();<br>source.registerCorsConfiguration(<span class="hljs-string">&quot;/**&quot;</span>, config);<br><br><span class="hljs-keyword">return</span> source;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.demo_oauth.controller;<br><br><span class="hljs-keyword">import</span> java.util.Collection;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><br><span class="hljs-keyword">import</span> org.springframework.http.ResponseEntity;<br><span class="hljs-keyword">import</span> org.springframework.security.access.prepost.PreAuthorize;<br><span class="hljs-keyword">import</span> org.springframework.security.core.Authentication;<br><span class="hljs-keyword">import</span> org.springframework.security.core.GrantedAuthority;<br><span class="hljs-keyword">import</span> org.springframework.security.core.context.SecurityContextHolder;<br><span class="hljs-keyword">import</span> org.springframework.security.oauth2.core.oidc.user.DefaultOidcUser;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.GetMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">loginController</span> &#123;<br><br><span class="hljs-meta">@GetMapping(&quot;/checkLogin&quot;)</span><br><span class="hljs-keyword">public</span> ResponseEntity&lt;String&gt; <span class="hljs-title function_">checkLogin</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-type">DefaultOidcUser</span> <span class="hljs-variable">oidcUser</span> <span class="hljs-operator">=</span> (DefaultOidcUser) SecurityContextHolder.getContext().getAuthentication().getPrincipal();<br><span class="hljs-keyword">if</span> (oidcUser != <span class="hljs-literal">null</span>) &#123;<br>System.out.println(<span class="hljs-string">&quot;Login Success !!&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;User is : &quot;</span>+ oidcUser.getUserInfo().getFullName());<br>System.out.println(<span class="hljs-string">&quot;User Id is: &quot;</span> + oidcUser.getUserInfo().getClaim(<span class="hljs-string">&quot;preferred_username&quot;</span>));<br>oidcUser.getAuthorities().forEach(role -&gt; &#123;System.out.println(<span class="hljs-string">&quot; role : &quot;</span> + role);&#125;);<br>Map&lt;String, Object&gt; realm = oidcUser.getClaimAsMap(<span class="hljs-string">&quot;resource_access&quot;</span>);<br><span class="hljs-keyword">if</span> (realm != <span class="hljs-literal">null</span>) &#123;<br>System.out.println(<span class="hljs-string">&quot;claim resource_access: &quot;</span> + realm);<br>System.out.println(<span class="hljs-string">&quot;users: &quot;</span> + realm.get(<span class="hljs-string">&quot;users&quot;</span>));<br>&#125;<br><br><span class="hljs-keyword">return</span> ResponseEntity.ok(<span class="hljs-string">&quot;Login Success !! User Id is : &quot;</span> + oidcUser.getUserInfo().getClaim(<span class="hljs-string">&quot;preferred_username&quot;</span>));<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">return</span> ResponseEntity.ok(<span class="hljs-string">&quot;Login failed .&quot;</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-meta">@GetMapping(&quot;/loginSuccess&quot;)</span><br><span class="hljs-keyword">public</span> Collection&lt;?&gt; loginSuccess(Authentication authentication) &#123;<br>Collection&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">GrantedAuthority</span>&gt; authorties = authentication.getAuthorities();<br><span class="hljs-keyword">return</span> authorties;<br>&#125;<br><br><span class="hljs-meta">@GetMapping(&quot;/hasAuthority&quot;)</span><br><span class="hljs-meta">@PreAuthorize(&quot;hasAuthority(&#x27;SCOPE_profile&#x27;)&quot;)</span><br><span class="hljs-keyword">public</span> ResponseEntity&lt;String&gt; <span class="hljs-title function_">admin</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;Client has authority: SCOPE_profile&quot;</span>);<br>    <span class="hljs-keyword">return</span> ResponseEntity.ok(<span class="hljs-string">&quot;Client has authority: SCOPE_profile&quot;</span>);<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="測試使用Session達到SSO"><a href="#測試使用Session達到SSO" class="headerlink" title="測試使用Session達到SSO"></a>測試使用Session達到SSO</h1><h2 id="開啟Applicaion登入Keycloak認證"><a href="#開啟Applicaion登入Keycloak認證" class="headerlink" title="開啟Applicaion登入Keycloak認證"></a>開啟Applicaion登入Keycloak認證</h2><p>我們可以透過Browser看到，當我call服務的url: <a href="http://localhost:8081時，會return">http://localhost:8081時，會return</a> http 302 status，此時Spring Security會去call keycloak的認證EndPoint(&#x2F;realms&#x2F;{realm-name}&#x2F;protocol&#x2F;openid-connect&#x2F;auth)，並redirect到Keycloak的登入頁面。<br><img src="/./image/keycloak_sso_test_1.png"></p><p>當輸入帳密且登入後，我們可以看到keycloak return了一個302 http status，並且call了redirect的EndPoint(login&#x2F;oauth2&#x2F;code&#x2F;keycloak)，並且redirect回到我的微服務當中。<br><img src="/./image/keycloak_sso_test_2.png"></p><p>這時keycloak其實還攜帶了一組JSESSIONID在cookie當中，我們就可以透過這組keycloak以認證過的JSESSIONID達到sso的效果，後續若要再通過keyclaok時只要在cookie中帶入這個JSESSIONID，使用者就可以不用再次輸入帳密，就可以通過keycloak的驗證。<br><img src="/./image/keycloak_sso_test_3.png"></p><p>我們也可以在keycloak server當中看到當前的user1 session相關信息。<br><img src="/./image/keycloak_sso_test_4.png"></p><h2 id="使用postman驗證SSO"><a href="#使用postman驗證SSO" class="headerlink" title="使用postman驗證SSO"></a>使用postman驗證SSO</h2><p>我們使用postman直接打微服務的API，並且在cookie帶入剛剛在browser所獲得的JSESSIONID，預期的是不需再次通過Keycloak的認證，就可以呼叫API成功。<br><img src="/./image/keycloak_sso_test_postman_1.png"><br><img src="/./image/keycloak_sso_test_postman_2.png"><br>測試成功!<br><img src="/./image/keycloak_sso_test_postman_3.png"></p><p>我們也可以測試看看帶不同的JSESSIONID，就會出就401認證失敗<br><img src="/./image/keycloak_sso_test_postman_4.png"></p><h1 id="結論"><a href="#結論" class="headerlink" title="結論"></a>結論</h1><p>我們可以透過Keycloak與Spring Security整合達到OAuth2.0認證，並且透過Keycloak後所返回給browser的SessionId達到SSO，讓使用者無須再次輸入帳號密碼，即可獲得Keycloak認證。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Spring Boot使用Cache Filter Chain重複使用HttpServletRequest</title>
    <link href="/2024/07/15/CacheSettingFilter%E7%AD%86%E8%A8%98/"/>
    <url>/2024/07/15/CacheSettingFilter%E7%AD%86%E8%A8%98/</url>
    
    <content type="html"><![CDATA[<h1 id="業務場景"><a href="#業務場景" class="headerlink" title="業務場景"></a>業務場景</h1><p>如果需要實作一個攔截器攔截Http Request傳入的訊息。通常情況下，HttpServletRequst中的Request Body內容只會讀取一次，但是可能某些情境下可能會讀取多次，由於Request Body內容是以Flow的形式存在,所以第一次讀取完成後,第二次就無法讀取了,一個典型的場景就是Filter 在取得Request Body的內容後,就無法繼續讀取Flow了。</p><p>以下使用Filter Chain 搭配ContentCachingRequestWrapper，將HttpServletRequst存進ContentCachingRequestWrapper中，達到可以多次利用的效果。並以ExceptionHandler作為業務情境，實作錯誤處理時可以獲得來源端的URL及Request Body作為實作目標。</p><h1 id="Filter-Config"><a href="#Filter-Config" class="headerlink" title="Filter Config"></a>Filter Config</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> ims.svc.sremonitor.collection.filter;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><span class="hljs-keyword">import</span> org.springframework.web.filter.OncePerRequestFilter;<br><span class="hljs-keyword">import</span> org.springframework.web.util.ContentCachingRequestWrapper;<br><br><span class="hljs-keyword">import</span> jakarta.servlet.FilterChain;<br><span class="hljs-keyword">import</span> jakarta.servlet.ServletException;<br><span class="hljs-keyword">import</span> jakarta.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> jakarta.servlet.http.HttpServletResponse;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">logFilter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">OncePerRequestFilter</span> &#123;<br><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilterInternal</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>     <span class="hljs-type">ContentCachingRequestWrapper</span> <span class="hljs-variable">contentCachingRequestWrapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ContentCachingRequestWrapper</span>((HttpServletRequest) request);<br>     filterChain.doFilter(contentCachingRequestWrapper, response);<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="方法一、用字串方式處理HttpServletRequest獲得Request-Body"><a href="#方法一、用字串方式處理HttpServletRequest獲得Request-Body" class="headerlink" title="方法一、用字串方式處理HttpServletRequest獲得Request Body"></a>方法一、用字串方式處理HttpServletRequest獲得Request Body</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ControllerAdvice</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebExceptionHandler</span> &#123;<br><span class="hljs-keyword">private</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(getClass());<br><br><span class="hljs-meta">@ExceptionHandler(Exception.class)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> ResponseEntity&lt;Error&gt; <span class="hljs-title function_">onException</span><span class="hljs-params">(Exception e, WebRequest webRequest)</span> &#123;<br><br><span class="hljs-type">ContentCachingRequestWrapper</span> <span class="hljs-variable">nativeRequest</span> <span class="hljs-operator">=</span> (ContentCachingRequestWrapper) ((ServletWebRequest) webRequest).getNativeRequest();<br><span class="hljs-type">Mwheader</span> <span class="hljs-variable">mwheader</span> <span class="hljs-operator">=</span> setRequestMwheader(nativeRequest);<br>logger.error(<span class="hljs-string">&quot;[LOG]&quot;</span> + nativeRequest.getRequestURL() + <span class="hljs-string">&quot; Get_Exception &quot;</span> + <span class="hljs-string">&quot;Error_Code:&quot;</span> + ReturnCode.E999.getCode() + <span class="hljs-string">&quot;, Error_Message:&quot;</span> + ReturnCode.E999.getDesc());<br><span class="hljs-keyword">return</span> ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(MwheaderSetter.set(mwheader, ReturnCode.E999.getCode(), ReturnCode.E999.getDesc())));<br>&#125;<br><br><span class="hljs-meta">@ExceptionHandler(MethodArgumentNotValidException.class)</span><br><span class="hljs-keyword">public</span> ResponseEntity&lt;Error&gt; <span class="hljs-title function_">methodArgumentNotValidException</span><span class="hljs-params">(MethodArgumentNotValidException e, WebRequest webRequest)</span> &#123;<br>List&lt;FieldError&gt; errors = e.getBindingResult().getFieldErrors();<br>List&lt;String&gt; message = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>errors.forEach(error -&gt; &#123;<br>message.add(<span class="hljs-string">&quot;[&quot;</span> + error.getField() + <span class="hljs-string">&quot;:&quot;</span> + error.getDefaultMessage() + <span class="hljs-string">&quot;]&quot;</span>);<br>&#125;);<br><span class="hljs-type">String</span> <span class="hljs-variable">errorMessage</span> <span class="hljs-operator">=</span> StringUtils.join(message, <span class="hljs-string">&quot;,&quot;</span>);<br><span class="hljs-type">ContentCachingRequestWrapper</span> <span class="hljs-variable">nativeRequest</span> <span class="hljs-operator">=</span> (ContentCachingRequestWrapper) ((ServletWebRequest) webRequest).getNativeRequest();<br><br><span class="hljs-type">Mwheader</span> <span class="hljs-variable">mwheader</span> <span class="hljs-operator">=</span> setRequestMwheader(nativeRequest);<br><span class="hljs-type">String</span> <span class="hljs-variable">resultMessage</span> <span class="hljs-operator">=</span> MessageFormat.format(ReturnCode.E905.getDesc(), errorMessage);<br>logger.error(<span class="hljs-string">&quot;[LOG]&quot;</span> + nativeRequest.getRequestURL()  + <span class="hljs-string">&quot; Get_MethodArgumentNotValidException &quot;</span> + <span class="hljs-string">&quot;Error_Code:&quot;</span> + ReturnCode.E905.getCode() + <span class="hljs-string">&quot;, Error_Message:&quot;</span> + resultMessage);<br><br><br><span class="hljs-keyword">return</span> ResponseEntity.badRequest().body(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(MwheaderSetter.set(mwheader, ReturnCode.E905.getCode(), resultMessage)));<br>&#125;<br><br><span class="hljs-keyword">private</span> Mwheader <span class="hljs-title function_">setRequestMwheader</span><span class="hljs-params">(ContentCachingRequestWrapper nativeRequest)</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">requestEntityAsString</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(nativeRequest.getContentAsByteArray());<br><br>    <span class="hljs-type">Mwheader</span> <span class="hljs-variable">mwheader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Mwheader</span>();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">requestMsgId</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">requestSourceChannel</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">requestTxnSeq</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br><br><span class="hljs-keyword">if</span> (requestEntityAsString.split(<span class="hljs-string">&quot;\n&quot;</span>)[i].split(<span class="hljs-string">&quot;\&quot;&quot;</span>)[<span class="hljs-number">1</span>].equals(<span class="hljs-string">&quot;MSGID&quot;</span>)) &#123;<br><br>requestMsgId = requestEntityAsString.split(<span class="hljs-string">&quot;\n&quot;</span>)[i].split(<span class="hljs-string">&quot;\&quot;&quot;</span>)[<span class="hljs-number">3</span>];<br><br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (requestEntityAsString.split(<span class="hljs-string">&quot;\n&quot;</span>)[i].split(<span class="hljs-string">&quot;\&quot;&quot;</span>)[<span class="hljs-number">1</span>].equals(<span class="hljs-string">&quot;SOURCECHANNEL&quot;</span>)) &#123;<br><br>requestSourceChannel = requestEntityAsString.split(<span class="hljs-string">&quot;\n&quot;</span>)[i].split(<span class="hljs-string">&quot;\&quot;&quot;</span>)[<span class="hljs-number">3</span>];<br><br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (requestEntityAsString.split(<span class="hljs-string">&quot;\n&quot;</span>)[i].split(<span class="hljs-string">&quot;\&quot;&quot;</span>)[<span class="hljs-number">1</span>].equals(<span class="hljs-string">&quot;TXNSEQ&quot;</span>)) &#123;<br><br>requestTxnSeq = requestEntityAsString.split(<span class="hljs-string">&quot;\n&quot;</span>)[i].split(<span class="hljs-string">&quot;\&quot;&quot;</span>)[<span class="hljs-number">3</span>];<br><br>&#125;<br>&#125;<br>&#125; <span class="hljs-keyword">catch</span> (ArrayIndexOutOfBoundsException e) &#123;<br>logger.error(<span class="hljs-string">&quot;[LOG]Get_ArrayIndexOutOfBoundsException, MWHEADER資料輸入有誤&quot;</span>);<br>&#125;<br>    mwheader.setMsgId(requestMsgId);<br>    mwheader.setSourceChanel(requestSourceChannel);<br>    mwheader.setTxnSeq(requestTxnSeq);<br>    <span class="hljs-keyword">return</span> mwheader;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="方法二、用ObjectMapper處理HttpServletRequest獲得Request-Body"><a href="#方法二、用ObjectMapper處理HttpServletRequest獲得Request-Body" class="headerlink" title="方法二、用ObjectMapper處理HttpServletRequest獲得Request Body"></a>方法二、用ObjectMapper處理HttpServletRequest獲得Request Body</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ControllerAdvice</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebExceptionHandler</span> &#123;<br><span class="hljs-keyword">private</span> <span class="hljs-type">Logger</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> LoggerFactory.getLogger(getClass());<br><br><span class="hljs-meta">@ExceptionHandler(Exception.class)</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-keyword">public</span> ResponseEntity&lt;Error&gt; <span class="hljs-title function_">onException</span><span class="hljs-params">(Exception e, WebRequest webRequest)</span> &#123;<br><br><span class="hljs-type">ContentCachingRequestWrapper</span> <span class="hljs-variable">nativeRequest</span> <span class="hljs-operator">=</span> (ContentCachingRequestWrapper) ((ServletWebRequest) webRequest).getNativeRequest();<br>logger.error(<span class="hljs-string">&quot;[LOG]&quot;</span> + nativeRequest.getRequestURL() + <span class="hljs-string">&quot; Get_Exception &quot;</span> + <span class="hljs-string">&quot;Error_Code:&quot;</span> + ReturnCode.E999.getCode() + <span class="hljs-string">&quot;, Error_Message:&quot;</span> + ReturnCode.E999.getDesc());<br><span class="hljs-keyword">return</span> ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(MwheaderSetter.set(getMwheader(nativeRequest), ReturnCode.E999.getCode(), ReturnCode.E999.getDesc())));<br>&#125;<br><br><span class="hljs-meta">@ExceptionHandler(MethodArgumentNotValidException.class)</span><br><span class="hljs-keyword">public</span> ResponseEntity&lt;Error&gt; <span class="hljs-title function_">methodArgumentNotValidException</span><span class="hljs-params">(MethodArgumentNotValidException e, WebRequest webRequest)</span> &#123;<br>List&lt;FieldError&gt; errors = e.getBindingResult().getFieldErrors();<br>List&lt;String&gt; message = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>errors.forEach(error -&gt; &#123;<br>message.add(<span class="hljs-string">&quot;[&quot;</span> + error.getField() + <span class="hljs-string">&quot;:&quot;</span> + error.getDefaultMessage() + <span class="hljs-string">&quot;]&quot;</span>);<br>&#125;);<br><span class="hljs-type">String</span> <span class="hljs-variable">errorMessage</span> <span class="hljs-operator">=</span> StringUtils.join(message, <span class="hljs-string">&quot;,&quot;</span>);<br><span class="hljs-type">ContentCachingRequestWrapper</span> <span class="hljs-variable">nativeRequest</span> <span class="hljs-operator">=</span> (ContentCachingRequestWrapper) ((ServletWebRequest) webRequest).getNativeRequest();<br><span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">objectMapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>();<br><span class="hljs-type">String</span> <span class="hljs-variable">resultMessage</span> <span class="hljs-operator">=</span> MessageFormat.format(ReturnCode.E905.getDesc(), errorMessage);<br>logger.error(<span class="hljs-string">&quot;[LOG]&quot;</span> + nativeRequest.getRequestURL()  + <span class="hljs-string">&quot; Get_MethodArgumentNotValidException &quot;</span> + <span class="hljs-string">&quot;Error_Code:&quot;</span> + ReturnCode.E905.getCode() + <span class="hljs-string">&quot;, Error_Message:&quot;</span> + resultMessage);<br><br><span class="hljs-keyword">return</span> ResponseEntity.badRequest().body(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(MwheaderSetter.set(getMwheader(nativeRequest), ReturnCode.E905.getCode(), resultMessage)));<br>&#125;<br><br><span class="hljs-keyword">private</span> Mwheader <span class="hljs-title function_">getMwheader</span><span class="hljs-params">(ContentCachingRequestWrapper nativeRequest)</span> &#123;<br><span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">objectMapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>();<br><span class="hljs-type">JsonNode</span> <span class="hljs-variable">rootNode</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">try</span> &#123;<br>rootNode = objectMapper.readTree(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(nativeRequest.getContentAsByteArray()));<br>&#125; <span class="hljs-keyword">catch</span> (JsonProcessingException e1) &#123;<br>logger.error(<span class="hljs-string">&quot;[LOG]&quot;</span> + nativeRequest.getRequestURL()  + <span class="hljs-string">&quot; Get_JsonProcessingException &quot;</span> + <span class="hljs-string">&quot;Error_Code:&quot;</span> + ReturnCode.E999.getCode() + <span class="hljs-string">&quot;, Error_Message:&quot;</span> + ReturnCode.E999.getDesc() + <span class="hljs-string">&quot; Return Empty MWHEADER.&quot;</span>);<br><br>&#125;<br><span class="hljs-keyword">if</span> (rootNode == <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Mwheader</span>(<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br>&#125;<br><span class="hljs-keyword">return</span> objectMapper.convertValue(rootNode, Request.class).getMwheader();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>JDK17 筆記</title>
    <link href="/2024/07/15/JDK17%E7%AD%86%E8%A8%98/"/>
    <url>/2024/07/15/JDK17%E7%AD%86%E8%A8%98/</url>
    
    <content type="html"><![CDATA[<h1 id="Multiline-Strings"><a href="#Multiline-Strings" class="headerlink" title="Multiline Strings"></a>Multiline Strings</h1><p>原先在使用多行字串的時候是以下圖示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">text</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Hello，&quot;</span> +<br><br>                <span class="hljs-string">&quot;How are &quot;</span> +<br><br>                <span class="hljs-string">&quot;you&quot;</span>;<br></code></pre></td></tr></table></figure><p>現在只需要使用 “”” 就可以表現多行字串了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string"></span><br><span class="hljs-string">          Hello,</span><br><span class="hljs-string"></span><br><span class="hljs-string">          ok bye bye</span><br><span class="hljs-string"></span><br><span class="hljs-string">         &quot;&quot;&quot;</span>;<br></code></pre></td></tr></table></figure><h1 id="Records"><a href="#Records" class="headerlink" title="Records"></a>Records</h1><p>Records 是一個比較不一樣的 class，他是一種配置屬性，但他跟原本配置的 class 又減少了大量的程式碼撰寫</p><p>原先的配置 class ， 需要自己聲明 getter、setter …. 等，或是使用 lomok ，但 Reocords 直接全部省略都不需要寫</p><p>且 Records 是把參數寫在 () 裡面</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">record</span> <span class="hljs-title class_">Customer</span> (<br><br>                        String name,<br><br>                        String email,<br><br>                        Integer age) &#123;<br><br><br><br>&#125;<br></code></pre></td></tr></table></figure><p>且可以直接將參數拿來驗證</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">record</span> <span class="hljs-title class_">Customer</span><span class="hljs-params">(</span><br><span class="hljs-params"></span><br><span class="hljs-params">        String name,</span><br><span class="hljs-params"></span><br><span class="hljs-params">        String email,</span><br><span class="hljs-params"></span><br><span class="hljs-params">        Integer age)</span> &#123;<br><br><br><br>    <span class="hljs-keyword">public</span> Customer &#123;<br><br>        <span class="hljs-keyword">if</span> (name.isBlank()) &#123;<br><br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">java</span>.lang.IllegalArgumentException(<br><br>                    String.format(<span class="hljs-string">&quot;%f cannot be null&quot;</span>, name));<br><br>        &#125;<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>要注意的是，Records 在使用的時候也不是用 getXX() 和 setOO() 的方式，如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 如同 setOO() 方法</span><br><br><span class="hljs-type">Customer</span> <span class="hljs-variable">customer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Customer</span>(<span class="hljs-string">&quot;apple&quot;</span>, <span class="hljs-string">&quot;ss.gamil.com&quot;</span>, <span class="hljs-number">33</span>);<br><br><span class="hljs-comment">// 如同 getXX() 方法</span><br><br><span class="hljs-type">String</span> <span class="hljs-variable">newName</span> <span class="hljs-operator">=</span> customer.name();<br><br><span class="hljs-type">String</span> <span class="hljs-variable">newEmail</span> <span class="hljs-operator">=</span> customer.email();<br><br><span class="hljs-type">Integer</span> <span class="hljs-variable">newAge</span> <span class="hljs-operator">=</span> customer.age();<br></code></pre></td></tr></table></figure><h1 id="Switch-Expressions"><a href="#Switch-Expressions" class="headerlink" title="Switch Expressions"></a>Switch Expressions</h1><p>在 Java SE 12 的時候先引進了 Switch Expressions 方法，在 Java SE 13 的時候指定值的部分將原先的 break 移除掉改用 yield 使用，用法有點像 return 的感覺</p><p>範例:每天的英文單字為幾個英文單字組成</p><p>原來的 switch case 用法<br><img src="https://hackmd.io/_uploads/Hyr5Frysp.png" alt="image"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">DayOfWeek</span> <span class="hljs-variable">day</span> <span class="hljs-operator">=</span> DayOfWeek.FRIDAY;<br><br>       <span class="hljs-type">int</span> <span class="hljs-variable">numOfLetters</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">switch</span> (day) &#123;<br><br>           <span class="hljs-keyword">case</span> MONDAY, FRIDAY, SUNDAY -&gt; <span class="hljs-number">6</span>;<br><br>           <span class="hljs-keyword">case</span> TUESDAY                -&gt; <span class="hljs-number">7</span>;<br><br>           <span class="hljs-keyword">case</span> THURSDAY, SATURDAY     -&gt; &#123;<br><br>               System.out.println(<span class="hljs-number">8</span>);<br><br>               <span class="hljs-keyword">yield</span> <span class="hljs-number">8</span>;<br><br>           &#125;<br><br>           <span class="hljs-keyword">case</span> WEDNESDAY              -&gt; <span class="hljs-number">9</span>;<br><br>           <span class="hljs-keyword">default</span> -&gt; <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Exception</span>(<span class="hljs-string">&quot;exception&quot;</span>);<br><br>       &#125;;<br></code></pre></td></tr></table></figure><h1 id="Pattern-Matching-for-Instanceof"><a href="#Pattern-Matching-for-Instanceof" class="headerlink" title="Pattern Matching for Instanceof"></a>Pattern Matching for Instanceof</h1><p>Instanceof 是一個二元運算子，確定兩個 Object 之間的關係，一直到 JDK 14 更新了使用方法</p><p>原先判斷表達:判斷成立後需要自行轉換型態</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (animal <span class="hljs-keyword">instanceof</span> Cat) &#123;<br><br>    <span class="hljs-type">Cat</span> <span class="hljs-variable">cat</span> <span class="hljs-operator">=</span> (Cat) animal;<br><br>    cat.meow();<br><br>   <span class="hljs-comment">// other cat operations</span><br><br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (animal <span class="hljs-keyword">instanceof</span> Dog) &#123;<br><br>    <span class="hljs-type">Dog</span> <span class="hljs-variable">dog</span> <span class="hljs-operator">=</span> (Dog) animal;<br><br>    dog.woof();<br><br>    <span class="hljs-comment">// other dog operations</span><br><br>&#125;<br></code></pre></td></tr></table></figure><p>更新後的使用:判斷成立後直接進行轉換使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (animal <span class="hljs-keyword">instanceof</span> Cat cat) &#123;<br><br>    cat.meow();<br><br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(animal <span class="hljs-keyword">instanceof</span> Dog dog) &#123;<br><br>    dog.woof();<br><br>&#125;<br></code></pre></td></tr></table></figure><p>可以明顯發現整個程式碼大大減少，將原先需要轉換型態的部分省略了，會在於判斷成立之後直接幫忙轉換，就可以直接拿來使用</p><h1 id="Sealed-Classes-and-Interfaces"><a href="#Sealed-Classes-and-Interfaces" class="headerlink" title="Sealed Classes and Interfaces"></a>Sealed Classes and Interfaces</h1><p>Sealed Classes 是可以限定繼承的子項目，以確保不會被其他不相關的子項目繼承<br><img src="https://hackmd.io/_uploads/Bkqz5ryja.png" alt="image"></p><p>要繼承此父項目的子項目也必須使用 non-sealed 或是 final，不然會編譯錯誤<br><img src="https://hackmd.io/_uploads/Bk_7cSkop.png" alt="image"></p><p>若是其他未被同意的子項目繼承，則也會編譯錯誤<br><img src="https://hackmd.io/_uploads/rkr4qH1ia.png" alt="image"></p><p><strong>參考資料:</strong><br><a href="https://www.tpisoftware.com/tpu/articleDetails/2890">https://www.tpisoftware.com/tpu/articleDetails/2890</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
